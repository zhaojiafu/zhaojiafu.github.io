{"meta":{"title":"赵家富的个人博客","subtitle":"保持好奇心","description":"感觉无从下手的时候，问自己“不难，要你干啥？”","author":"赵家富","url":"https://zhaojiafu.github.io","root":"/"},"pages":[{"title":"分类","date":"2019-12-02T01:29:58.000Z","updated":"2019-12-02T08:38:16.394Z","comments":false,"path":"categories/index.html","permalink":"https://zhaojiafu.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-02T01:28:34.000Z","updated":"2019-12-02T08:38:16.373Z","comments":false,"path":"tags/index.html","permalink":"https://zhaojiafu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"np.c_和np.r_","slug":"a6411e19977dd76bfc98c4f632a869bf","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:37.161Z","comments":true,"path":"2019/12/02/a6411e19977dd76bfc98c4f632a869bf/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/a6411e19977dd76bfc98c4f632a869bf/","excerpt":"","text":"# demo import numpy as np a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) c = np.c_[a,b] print(np.r_[a,b]) print(c) print(np.c_[b,c])结果 [1 2 3 4 5 6] [[1 4] [2 5] [3 6]] [[4 1 4] [5 2 5] [6 3 6]]np.r_是按列连接两个矩阵，就是把两矩阵上下相加，要求列数相等。np.c_是按行连接两个矩阵，就是把两矩阵左右相加，要求行数相等。","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"numpy","slug":"numpy","permalink":"https://zhaojiafu.github.io/tags/numpy/"}]},{"title":"一个方便的支持多种语言的软件--notepad","slug":"0605b6462f77d238a1c8b148c949e516","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.801Z","comments":true,"path":"2019/12/02/0605b6462f77d238a1c8b148c949e516/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/0605b6462f77d238a1c8b148c949e516/","excerpt":"","text":"说明这个是我在B站看到别人讲解JavaScript时，用起来很方便，然后上网搜了下载了一个，发现支持好多语言，java、JavaScript、python等等好多，需要的话自己下载，我也是留着以后下次需要，方便寻找使用。 下载地址：https://notepad-plus-plus.org/repository/7.x/7.7.1/npp.7.7.1.Installer.exe?spm=a1z4aq.12345171.0.0.507e6064WKbFPr&amp;file=npp.7.7.1.Installer.exe","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"300个国外优秀网站","slug":"0c08cb7c2fdac2367dbeeac904868014","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.099Z","comments":true,"path":"2019/12/02/0c08cb7c2fdac2367dbeeac904868014/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/0c08cb7c2fdac2367dbeeac904868014/","excerpt":"","text":"1 People(人物）http://people.aol.com/people/index.html娱乐 全球五十位最XX的人2 TV Guide（电视指南）http://www.tvguide.com娱乐默多克旗下3 Time（时代）http://www.time.com/新闻年度风云人物4 Sports Illustrated（体育画报）http://sportsillustrated.cnn.com/体育 本世纪 最佳运动员5 Better Homes &amp; Gardens（美好家园）http://www.bhg.com/ 家居6 Reader’s Digest(读者文摘）http://www.rd.com/splash.jhtml 综合 美国发行量最 大的商业杂志7 Parade（旅行）http://www.parade.com/auth/entry.lasso 旅游8 Newsweek（新闻周刊）http://www.msnbc.com/news/NW-front_Front.asp 新闻 微软收购9 Business Week（商业周刊）http://www.businessweek.com/ 商业 25位XX人 全球最有价值品牌 10Good Housekeeping（好主妇）http://www.goodhousekeeping.com/ 家庭11Fortune（财富）http://www.fortune.com/ 商业全球五百强12Cosmopolitan（全球主义者）http://www.cosmopolitan.com/ 娱乐13Woman’s Day（妇女日）http://www.womansday.com/xp6/WomansDay/home.xml 妇女 14Forbes（福布斯）http://www.forbes.com/ 商业全球最富的多少人15Family Circle（家庭圈）http://www.familycircle.com/home/homepage.jsp 家庭 16USA Weekend（美国周末）http://www.usaweekend.com/ 休闲甘尼特报业公司旗下17Instyle（时髦）http://www.instyle.com/instyle 时尚 年度性感偶像18Entertainment Weekly(娱乐周刊）http://www.ew.com/ew/ 娱乐19Martha Stewart Living（玛萨斯图尔特生活） http://www.marthastewart.com/ 生活 指导美国人生活的女王20U.S. News &amp; World Report（美国新闻与世界报道）http://www.usnews.com/ 新闻全美大学排行榜21Ladies’ Home Journal(妇女家庭杂志) http://www.lhj.com/ 家庭22National Geographic(国家地理杂志) http://www.nationalgeographic.com/ 地理 23Southern Living（南方生活）http://www.southernliving.com/ 生活24Vogue（时尚）http://www.style.com/vogue/index.html 时尚25PC Magazine（个人电脑）http://www.pcmag.com/ IT26Money（金钱）http://money.cnn.com/ 理财27Maxim（马克西姆）http://www.maximonline.com/index.html 娱乐28O, The Oprah Magazine http://www.oprah.com/omagazine 妇女29Glamour（魅力）http://www.glamour.com/ 时尚30National Enquirer, The（国家寻问者）http://www.nationalenquirer.com/ 新闻 31New York Times Magazine（纽约时报杂志）http://www.nytimes.com/ 新闻32Golf Digest（高尔夫文摘）http://www.golfdigest.com/ 体育33Rolling Stone（滚石）http://www.rollingstone.com/ 音乐34Playboy（花花公子）http://www.playboy.com/ 男性35Vanity Fair（名利场）http://www.vanityfair.com/ 娱乐名人采访36Seventeen（十七岁）http://www.seventeen.com/ 青年37Parents（父母）http://www.parents.com/ 教育38Star Magazine（明星杂志）http://www.starmagazine.com/ 娱乐39ESPN The Magazine（ESPN杂志）http://espn.go.com/magazine/ 体育40Prevention（预防）http://www.prevention.com/ 健康41Redbook（红书）http://magazines.ivillage.com/redbook/ 妇女42Rosie http://www.rosieo.com/43Golf Magazine（高尔夫杂志）http://sportsillustrated.cnn.com/golfonline/ 体育 44Travel &amp; Leisure（旅游和休闲）http://www.travelandleisure.com/ 休闲45Elle http://www.elle.com/ 时尚46New Yorker, The（纽约客）http://www.newyorker.com/ 文艺47W http://www.style.com/w/ 时尚48Woman’s World(妇女世界）http://www.robertcraig.com/womansworld.html 妇女 49Parenting（养育）http://www.parenting.com/parenting/ 家庭50Car &amp; Driver（人车志）http://www.caranddriver.com/xp/Caranddriver/home.xml 机车51Endless Vacation（无尽假日）http://www.endlessvacation.com/ 休闲52Bride’s Magazine（新娘杂志）http://www.brides.com/ 婚礼53InformationWeek（信息周刊）http://www.informationweek.com/ IT54Country Living（乡村生活）http://magazines.ivillage.com/countryliving/ 生活 55Us Weekly（美国周刊）http://usweekly.abc.com/ 新闻56Marie Claire（玛丽克莱尔）http://www.marieclaire.com/ 时尚57Sunset（日落）http://www.sunset.com/ 科学58Soap Opera Digest（肥皂剧文摘）http://www.soapoperadigest.com/ 娱乐59AARP Modern Maturity（现代文明） http://www.modernmaturity.org/ 公益美国发 行量最大的杂志60GQ http://www.gq.com/ 时尚61Architectural Digest（建筑学文摘）http://www.condenet.com/mags/archdigest/ 建筑62Harper’s Bazaar(哈泼氏）http://www.harpersbazaar.com/ 时尚63Travel Agent（旅游代理）http://www.travelagents.com/ 旅游64Smithsonian（史密森尼)http://www.si.edu/ 博物65PC World（PC世界）http://www.pcworld.com/ IT66Modern Bride（现代新娘）http://www.modernbride.com/ 婚礼67Men’s Health（男性健康）http://www.menshealth.com/ 健康68Bon Appetit（好 ）http://www.epicurious.com/b_ba/b00_home/ba.html 烹饪69Motor Trend（机车潮流）http://www.motortrend.com/ 机车70Economist, The（经济学人）http://www.economist.com/政经世界上最牛的政经杂志71Self（自我）http://www.self.com/ 妇女72Shape（体形）http://www.shapeonline.com/ 健康73Teen People http://www.teenpeople.com/teenpeople/ 青年74YM http://www.ym.com/ 时尚75Consumer Reports（消费者报告）http://www.consumerreports.org/main/home.jsp 消费76Cooking Light（烹饪之光）http://www.cookinglight.com/ 烹饪77Travel Weekly（旅行周刊）http://www.travelweekly.co.uk/tw_home/home.asp 旅游78House Beautiful（美丽住宅）http://magazines.ivillage.com/housebeautiful/ 家居 79Ebony（乌木）http://www.ebony.com/ 成人80Popular Photography（大众摄影）http://www.popularphotography.com/index.asp 摄影81Country Home（乡村家庭）http://www.countryhome.com/ch/index.html 家庭82Barron’s http://www.barrons.com/ 商业83eWeek http://www.eweek.com/ 消费84Conde Nast Traveler http://www.concierge.com/cntraveler/ 旅游85Town &amp; Country(城镇和乡村) http://magazines.ivillage.com/townandcountry/ 生活 86InfoWorld(信息世界) http://www.infoworld.com/ IT87EE Times http://www.eetimes.com/ 电子88Food &amp; Wine(食物和酒) http://www.foodandwine.com/ 食品89New York(纽约) http://www.newyorkmetro.com/ 城市90Essence(本质) http://www.essence.com/ 黑人91Road &amp; Track(公路与轨迹) http://www.roadandtrack.com/ 机车92Health(健康) http://www.health.com/ 健康93Inc(公司) http://www.inc.com/home/ 商业94Allure(吸引) http://www.allure.com/ 时尚95Vibe http://www.vibe.com/new/home/pointer.html 娱乐96Gourmet(美食家) http://www.gourmet.com/ 烹饪97Taste of Home(家的滋味) http://www.tasteofhome.com/ 烹饪98Muscle &amp; Fitness(肌肉和健身) http://www.muscleandfitness.com/ 健康99Popular Mechanics(大众机械) http://popularmechanics.com/ 机械100Home(家) http://www.homemag.com/ 家居 101fitness（健身) http://www.fitnessmagazine.com/home/index.jsp 健康102Field &amp; Stream（田园和小溪) http://www.fieldandstream.com/ 休闲103American Baby（美国宝贝)http://www.americanbaby.com/ab/CDA/homepage/ 家庭104FamilyFun（家庭乐趣） http://familyfun.go.com/ 家庭105Sporting News, The（体育新闻) http://www.sportingnews.com/ 体育106Esquire（先生） http://www.esquire.com/ 男性107Penthouse（小棚屋） http://www.penthouse.com/ 成人108Kiplinger’s Personal Finance Magazine(吉朴林的个人金融杂志)http://www.kiplinger.com/ 理财109Globe(环球) http://www.boston.com/globe/ 环境110SmartMoney(精明理财) http://www.smartmoney.com/ 理财111Stuff(素材) http://www.stuffmagazine.com/ 男性112CRN http://www.crn.com/ IT113Men’s Journal(男人) http://www.mensjournal.com/ 男性114House &amp; Garden(家园) http://www.condenet.com/mags/hg/ 家居115Fast Company(快速公司) http://www.fastcompany.com/homepage/ 商业116Computer Shopper(计算机购物者) http://shopper.cnet.com/ 消费117Jet(黑玉) http://www.jetmag.com/ 黑人118First For Women http://www.ffwmarket.com/ 妇女119Traditional Home（传统家庭） http://www.traditionalhome.com/ 家庭120Automobile Magazine(汽车杂志） http://www.automobilemag.com/ 机车121Red Herring（红鲱鱼） http://www.redherring.com/ 商业122Highlights for Children（儿童文粹） http://www.highlights.com/ 儿童123Wired（连线） http://www.wired.com/ IT124Outside（户外） http://outsidemag.com/index.html 休闲125This Old House（这个老屋子） http://www.thisoldhouse.com/toh/ 家居126NetworkWorld（网络世界） http://www.networkworld.com/ IT127Entrepreneur（企业家） http://www.entrepreneur.com/ 商业128Popular Science（大众科学） http://www.popsci.com/popsci/ 科普129Elle Decor http://www.elledecor.co.th/ 设计130Quick Cooking （速煮） http://www.quickcooking.com/ 烹饪131Family Handyman（家庭佣人） http://www.familyhandyman.com/ 家居132Science（科学） http://www.sciencemag.org/ 科学133Bridal Guide（新娘指南） http://www.bridalguide.com/ 婚礼134Child（孩子） http://www.child.com/index.jsp 家庭135Cable Guide（有线电视指南） http://www.cableguide.co.uk/ 娱乐136Midwest Living（中西部生活） http://www.midwestliving.com/ 生活137Metropolitan Home（大城市生活） http://www.mho.co.uk/ 生活138Chronicle of Higher Education, The（高等教育编年史）http://chronicle.com / 教育139Mutual Funds Magazine（互动基金杂志）http://www.mutual-funds.com/mfmag/ 商业140Travelhost（旅游主人） http://www.travelhost.com/ 旅游141Sound &amp; Vision（声与影） http://www.soundandvisionmag.com/index.asp 电影 142CIO（首席信息官） http://www.cio.com/ IT143Hot Rod http://www.hotrod.com/ 机车144Computerworld（计算机世界） http://www.computerworld.com/ IT145Source, The（来源） http://www.thesource.com/ 黑人146Departures（启程） http://www.departures.com/ 商业147Spin（旋转） http://www.spin.com/ 音乐148Travel Holiday（旅行假日） http://www.travelholiday.com/ 旅游149Black Enterprise（黑人企业） http://www.blackenterprise.com/ 商业150BabyTalk（宝贝说话）http://www.parenting.com/parenting/...s/babytalk.html 家庭151New England Journal of Medicine（新英格兰医学期刊）http://content.nejm.org/ 医学152EBN Electronic Buyer’s News(EBN电子买主新闻)http://www.ebnonline.com/ 电 子153Jane(简) http://www.janes.com/ 军事154Working Mother(妇女运动者) http://www.workingwoman.com/ 妇女155Men’s Fitness(男性健身) http://www.mensfitness.com/mens.html 健康156Victoria(维多利亚) http://magazines.ivillage.com/victoria/ 生活157CosmoGirl(都市女孩) http://www.cosmogirl.com/ 时尚158Nation’s Restaurant News(国家餐馆新闻) http://www.nrn.com/ 行业159Harvard Business Review(哈佛商业评论) http://www.hbr.com/ 商业160FHM(男人帮) http://www.fhm.com/ 男性161Sports Illustrated For Kids(儿童体育画报) http://www.sikids.com/ 儿童162Boating(航船) http://www.boatingmag.com/ 体育163Discover(探索) http://www.discover.com/ 科普164Real Simple(反朴归真) http://www.realsimple.com/realsimple/ 生活165Guideposts（路标） http://www.guideposts.com/ 宗教166Cycle World(环形世界)http://www.cycleworld.com/xp6/CycleWorld/main.xml 机车167EDN http://www.e-insite.net/ednmag/ 电子168Tennis Magazine(网球杂志) http://www.tennis.com/ 体育169Advertising Age(广告时代) http://www.adage.com/ 行业170Hemispheres(半球) http://www.hemispheresmagazine.com/home.htm 收藏171Fortune Small Business(财富小商业)http://www.fortune.com/smallbusiness/ 商业172Meetings &amp; Conventions(会议)http://www.meetings-conventions.com/ 行业173Worth(价值) http://www.worth.com/magazine/index.cfm 理财174Outdoor Life(户外生活) http://www.outdoorlife.com/outdoor/ 休闲175Official U.S. Playstation Magazine(美国官方PS杂志)http://www.gamers.com/opm/index.jsp 游戏176Automotive News(汽车新闻) http://www.autonews.com/ 机车177Scientific American(科学美国人) http://www.sciam.com/ 科普178Nickelodeon http://www.nick.com/ 娱乐179More(更多) http://www.more.com/ 时尚180Ski(滑雪) http://www.skinet.com/skinet/ 体育181Lucky(幸运) http://www.luckymag.com/ 时尚182Interior Design(室内装饰设计) http://www.interiordesign.net/ 行业183Sky (Delta Air Lines)(天空 三角航线) http://www.delta-sky.com/ 航线184Power &amp; Motoryacht(能源和摩托艇) http://powerandmotoryacht.about.com/mbody.htm 休闲185GamePro(专业游戏) http://www.gamepro.com/ 游戏186JAMA(睡衣裤) http://jama.ama-assn.org/ 健康187Furniture Today(今日家具) http://www.furnituretoday.com/index.shtml 家居 188My Generation(我们这一代) http://www.mygeneration.org/ 音乐189Successful Meetings(成功会议)http://www.successmtgs.com/successmtgs/index.jsp 行业190Premiere(首映) http://www.premiere.com/ 电影191Birds &amp; Blooms(鸟语花香) http://www.birdsandblooms.com/ 家居192Aviation Week &amp; Space Technology(航空技术周刊)http://www.aviationnow.com/ 休闲193Electronic Design(电子设计) http://www.e-insite.net/ednmag/ 电子194T &amp; L Golf(T &amp; L高尔夫) http://www.tlgolf.com/ 休闲195Wine Spectator(酒的旁观者) http://www.winespectator.com/ 休闲196National Geographic Traveler(国家地理旅行者)http://www.nationalgeographic.com/traveler/ 旅游197AutoWeek(汽车周刊) http://www.autoweek.com/ 机车198Wood(木工) http://www.woodmagazine.com/ 工艺199Chemical &amp; Engineering News(化工新闻) http://pubs.acs.org/cen/ 行业200Electronic Gaming Monthly(电子游戏月刊)http://www.gamers.com/egm/index.j sp 游戏201Disney Adventures(迪斯尼冒险) http://disney.go.com/disneyadventures/ 孩子 202National Examiner(国家主考者) http://www.nationalexaminer.com/ 教育203Soap Opera Weekly(肥皂剧周刊) http://www.soapoperaweekly.com/ 娱乐204Golf World(高尔夫世界) http://www.worldgolf.com/ 体育205Runner’s World(跑步者世界) http://www.runnersworld.com/ 体育206Country Weekly(乡村周刊) http://www.countryweekly.com/ 音乐207American Way(美国道路) http://www.americanwaymag.com/ 旅游208Upside(上面) http://www.upside.com/ IT209Design News (设计新闻) http://www.manufacturing.net/ 行业210Details(详细资料) http://www.condenet.com/mags/details/ 时尚211American Profile(美国外形) http://www.americanprofile.com/ 健康212ENR http://enr.construction.com/Default.asp 建筑213Machine Design(机械设计) http://www.machinedesign.com/ 行业214PC Gamer(PC游戏玩家) http://www.pcgamer.com/ 游戏215Biography(传记)http://www.biography.com/ 文学216Atlantic Monthly(大西洋月刊) http://www.theatlantic.com/ 文艺217Successful Farming(成功农业) http://www.agriculture.com/sfonline/ 行业218Texas Monthly(德克莎斯月刊) http://www.texasmonthly.com/ 地区219Skiing(滑雪运动) http://www.skiingmag.com/skiing/ 体育220Southern Accents(南方口音) http://www.southernaccents.com/accents/ 家庭221American Rifleman(美国步枪射手)http://www.americanrifleman.org/site/index.asp 枪械222Bassmaster http://www.bassmaster.com/ 休闲223SN-Supermarket News(超级市场新闻) http://www.supermarketnews.com/ 行业224ABA Journal(美国银行家协会期刊)http://www.abanet.org/journal/redesign/home.html 行业225Nature(自然) http://www.nature.com/ 科学226Architectural Record(建筑学档案) http://www.archrecord.com/ 行业227Adweek(广告周刊) http://www.adweek.com/adweek/index.jsp 行业228Petersen’s 4-Wheel &amp; Off Road http://www.4wheeloffroad.com/ 机车229Business 2.0(商业2.0) http://www.business2.com/ 商业230Flying(飞行) http://www.flyingmag.com/ 休闲231Billboard(公告牌) http://www.billboard.com/billboard/index.jsp 音乐232Coastal Living(海岸生活) http://www.coastalliving.com/coastal/ 生活233Country Woman(乡村女人) http://www.countrywomanmagazine.com/ 家庭234Boys’sLife(男孩生活) http://www.boyslife.org/ 孩子235Transworld Skateboarding(环球滑板)http://www.skateboarding.com/skate/ 体育 236NFL Insider（美国足球联盟知情者） http://ww2.nfl.com/insider/ 体育237People en Espanol（人物西班牙语版）http://www.peopleenespanol.com/pespanol/index.html/ 娱乐238Journal of Accountancy（会计学期刊）http://www.aicpa.org/pubs/jofa/joaho me.htm239Windows 2000 Magazine（视窗2000杂志） http://www.win2000mag.net/ IT240Veranda（阳台） http://www.veranda.com/ 家居241Video Business（视频商业） http://www.videobusiness.com/ 商业242Backpacker（背包） http://www.backpacker.com/ 休闲243Cigar Aficionado（雪茄迷） http://www.cigaraficionado.com/ 休闲244Telephony（技术） http://www.telephonyonline.com/ IT245Flex（弯曲） http://www.flexonline.com/ 健康246Variety (weekly)（品种周刊） http://www.variety.com/ 商业247Cruising World （巡航世界） http://www.cruisingworld.com/ 休闲248American Hunter（美国猎人） http://www.american-hunter.com/ 休闲249Crain’s Chicago Business(克瑞恩芝加哥商业)http://www.chicagobusiness.com/ 商业250Broadcastin &amp;Cable(宽带与有线电视) http://www.broadcastingcable.com/ 行业 251Petersen’s Photographic http://www.photographic.com/ 摄影252Golf for Women(女性高尔夫) http://www.golfdigest.com/gfw/ 体育253USAirways Attache Magazine254Progressive Farmer(改进农场主) http://www.progressivefarmer.com/farmer/ 农业 255Easyriders http://www.easyriders.com/Home/Home.asp 机车256Crain’s New York Business(克瑞恩纽约商业) http://www.crainsny.com/ 商业 257Yachting(游艇) http://www.yachtingnet.com/yachting/ 休闲258Chicago(芝加哥) http://www.chicagomag.com/ 城市259Computer Gaming World(计算机游戏世界) http://www.gamers.com/cgw/index.jsp 游戏260Video Store(视频商店) http://www.videostoremag.com/ 商业261Country(乡村) http://www.country-magazine.com/ 生活262Fine Homebuilding(好家建造者)http://www.taunton.com/finehomebuilding/index.asp 家居263Yankee(美国佬) http://www.yankeemagazine.com/travel/index.php 旅游264Publisher’s Weekly(出版者周刊) http://www.publishersweekly.com/ 行业265Restaurants &amp; Institutions(餐馆与协会) http://www.rimag.com/ 行业266American Medical News(美国医学新闻)http://www.ama-assn.org/public/journa ls/amnews/ 行业267North American Hunter(北美猎人) http://visitors.huntingclub.com/magazine.asp268Federal Computer Week(联邦计算机周刊) http://www.fcw.com/ IT269Guns &amp; Ammo(枪与军火) http://www.gunsandammomag.com/dynamic.asp 枪械270Transworld Snowboarding(环球滑雪板)http://www.snowboarding-online.com/ 体育271New Equipment Digest(新设备文摘) http://www.newequipment.com/ 行业272Weekly World News(世界新闻周刊) http://www.weeklyworldnews.com/ 新闻273Chemical Week(化学周刊) http://www.chemweek.com/ 行业274Four Wheeler(四轮车) http://www.fourwheeler.com/ 机车275Gear(齿轮) http://www.gearmagazine.com/ 家居276Pensions &amp; Investments(养老金和投资) http://www.pionline.com/ 理财277Macworld(Mac世界) http://www.macworld.com/ IT278Builder(建筑者) http://builder.com.com/ IT279RB Restaurant Business(餐馆业) http://www.foodservicetoday.com/rb/index.shtml 行业280CFO(首席运营官) http://www.cfo.com/ IT281American Family Physician(美国家庭医生) http://www.aafp.org/afp.xml 健康 282Los Angeles Times Magazine(洛杉矶时报杂志) http://www.latimes.com/ 新闻 283Saveur http://www.saveur.com/ 烹饪284Multichannel News(多频道新闻) http://www.multichannel.com/ 行业285Purchasing(购买) http://www.manufacturing.net/ 消费286Laser Focus World(激光焦点世界) http://lfw.pennnet.com/home.cfm 行业287HANDY(手工) http://visitors.handymanclub.com/handy_mag.asp 家居288Medical Economics(医药经济) http://www.medec.com/ 行业289Reminisce(回忆) http://www.reminisce.com/ 休闲290Pillsbury Classic Cookbooks http://www.pillsbury.com/ 烹饪291Skin Diver(滑水) http://www.skin-diver.com/ 休闲292Nursing 2002 http://www.nursinghomesmagazine.com/ 护理293Hemmings Motor News http://cars.hemmings.com/ 机车294American Legion Magazine(美国军团杂志) http://www.legion.org/ 公益295Farm Journal(农业期刊) http://www.farmjournal.com/ 农业296Southwest Airlines Spirit(西南航线精灵) http://www.spiritmag.com/ 航行297Dr. Dobb’s Journal http://www.ddj.com/ IT298Chicago Tribune Magazine(芝加哥论坛杂志)http://www.chicagotribune.com/features/magazine/ 新闻299Islands(岛屿) http://www.islands.com/ 休闲300Institutional Investor(金融机构投资者) http://www.epinions.com/ 转载来自：https://www.douban.com/group/topic/4002607/","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"},{"name":"国外网站","slug":"国外网站","permalink":"https://zhaojiafu.github.io/tags/%E5%9B%BD%E5%A4%96%E7%BD%91%E7%AB%99/"}]},{"title":"获取高匿代理ip的步骤思路（推荐使用--刚找到的方法判断是否高匿）","slug":"d4c50ce3239482e4f0aa1cbeba85d6d8","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.140Z","comments":true,"path":"2019/12/02/d4c50ce3239482e4f0aa1cbeba85d6d8/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/d4c50ce3239482e4f0aa1cbeba85d6d8/","excerpt":"","text":"一、获取高匿代理IP思路注意事项做第二步之前你需要先找个地址url，用本机访问出来一个成功的页面，建议保留为html，作为后面使用，进行成功和禁用页面的对比，然后才可以高频访问此网站使你的电脑禁用。 2、（刚找到的，推荐这个）判断高匿代理ip的另外俩个方法url = &quot;http://httpbin.org/ip&quot; # 如果返回的ip里面有本机ip,则证明不是匿名代理 url = &quot;http://httpbin.org/get?show_env=1&quot; # &quot;X-Real-Ip&quot;对应的value如果是你的本机ip,则不是匿名代理1、获取高匿的可用代理ip，可以用以下四个步骤（之前的笨方法）：第一步：获取代理ip，比如快代理，66代理，西刺代理等一些代理IP网站爬取第二步：找一个容易禁止代理IP的网站，我选择是孔夫子，进行高频率线程访问孔夫子网，使孔夫子网站禁用我当前电脑ip。第三步：可以初步进行代理ip筛选，用python request库进行访问百度或者其他，删选出可用代理ip（不一定是高匿的），也可以直接进行第四步。第四步：直接进行用request访问，如果含有的响应文本里有成功的页面文字就可以说明ip可以用，而且是高匿（因为你的当前电脑已经被测试网站禁止，如果访问成功说明代理ip可以用） 二、实践、1、获取代理ip，这个我就不写了，如果会爬虫自己就可以找几个代理ip网站爬爬。2、我用的孔夫子旧书网作为鉴别代理IP高匿网站前提，先保留一份访问成功的响应html页面。然后进行高频访问孔夫子网不多说直接上代码： import requests import time from threading import Thread def ceshi(file_save): url = &quot;http://book.kongfz.com/175804/1038155437/&quot; headers = { &apos;Cookie&apos;: &apos;PHPSESSID=0d12c303a92043f13a3cc2c329e444f36b44ef71; shoppingCartSessionId=74c831996eb9a1009d79244d7d915040; kfz_uuid=f53edd56-8938-48af-a447-9a07bde47ffa; reciever_area=1006000000; Hm_lvt_bca7840de7b518b3c5e6c6d73ca2662c=1552367977; Hm_lvt_33be6c04e0febc7531a1315c9594b136=1552367977; kfz_trace=f53edd56-8938-48af-a447-9a07bde47ffa|10072231|834871367e51d410|-; acw_tc=65c86a0a15523697386136416e812159c1e7ce1072aea90b9eb27c93ee05cc; BIGipServerpool_nxtqzj=527099402.24615.0000; Hm_lpvt_bca7840de7b518b3c5e6c6d73ca2662c=1552371456; Hm_lpvt_33be6c04e0febc7531a1315c9594b136=1552371456&apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&apos; } try: resp = requests.get(url=url, headers=headers, timeout=2) if &quot;胡适传论，上下。,胡明,简介,人民文学出版社&quot; in resp.text: print(&quot;ok&quot;) else: print(&quot;errer&quot;) except: pass if __name__ == &apos;__main__&apos;: start_time = time.time() # 储存可用的ip地址 file_save = open(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_003免费代理_IP\\66代理IP\\ok_2s_detail_ips.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) thread_list = [] total_num = 0 for i in range(1000): thred_ip = Thread(target=ceshi, args=[file_save]) thread_list.append(thred_ip) thred_ip.start() total_num += 1 print(total_num, total_num) for i in thread_list: i.join() file_save.close() end_time = time.time() print((end_time - start_time), &apos;秒&apos;)3、初步删选如果爬的代理ip数量很多采用这一步，少的话可以直接下一步，想着多了进行初次删选，以后这批初步代理ip可能需要，我使用的是百度。 直接上代码： import requests import time from threading import Thread def demo_ip(ip_one, file_save): url = &quot;https://www.baidu.com/&quot; headers = { &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;, &apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.9&apos;, &apos;Cache-Control&apos;: &apos;max-age=0&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;Cookie&apos;: &apos;PSTM=1550130597; BIDUPSID=526C9C6BFBDCEB1D551FA9C22E28F592; BAIDUID=A9DC7E5415BF03D3B8D8749E48A7529A:FG=1; BD_UPN=12314753; ispeed_lsm=2; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; delPer=0; BD_HOME=0; H_PS_PSSID=26523_1429_21099_28607_28584_28558_28604_28606&apos;, &apos;Host&apos;: &apos;www.baidu.com&apos;, &apos;Upgrade-Insecure-Requests&apos;: &apos;1&apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36&apos; } proxies = { &quot;http&quot;: &quot;http://&quot; + ip_one, } try: resp = requests.get(url=url, headers=headers, proxies=proxies, timeout=2) # resp = requests.get(url=url, headers=headers, timeout=2) # print(resp.text) except: pass else: file_save.write(ip_one + &apos;\\n&apos;) if __name__ == &apos;__main__&apos;: start_time = time.time() # 储存可用的ip地址 file_save = open(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_003免费代理_IP\\有效获取测试代理IP是高匿的方法\\初步可用代理2ip_2s.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) with open(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_003免费代理_IP\\有效获取测试代理IP是高匿的方法\\获取去重的总IP数量113万个&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;) as file_ips: ips_list = file_ips.readlines() thread_list = [] total_num = 0 for ip_one in set(ips_list): # 前面携带http的 # ip = ip_one.replace(&apos;http://&apos;,&apos;&apos;).strip() # 直接ip+port的 ip = ip_one.strip() thred_ip = Thread(target=demo_ip, args=[ip, file_save]) thread_list.append(thred_ip) thred_ip.start() total_num += 1 print(total_num, total_num) time.sleep(0.0005) for i in thread_list: i.join() file_save.close() end_time = time.time() print((end_time - start_time), &apos;秒&apos;)4、测试高匿代理可用ip（前提本机代理ip已经被禁）如果不知道是否本机电脑被禁，用浏览器访问孔夫子官网，如果可以访问说明没有被禁止，如果不能访问，说明可以进行高匿删选了。 直接上代码： import requests import time from threading import Thread def get_gao_ni_ip(ip, file_save): url = &quot;http://book.kongfz.com/175804/1038155437/&quot; headers = { &apos;Cookie&apos;: &apos;PHPSESSID=0d12c303a92043f13a3cc2c329e444f36b44ef71; shoppingCartSessionId=74c831996eb9a1009d79244d7d915040; kfz_uuid=f53edd56-8938-48af-a447-9a07bde47ffa; reciever_area=1006000000; Hm_lvt_bca7840de7b518b3c5e6c6d73ca2662c=1552367977; Hm_lvt_33be6c04e0febc7531a1315c9594b136=1552367977; kfz_trace=f53edd56-8938-48af-a447-9a07bde47ffa|10072231|834871367e51d410|-; acw_tc=65c86a0a15523697386136416e812159c1e7ce1072aea90b9eb27c93ee05cc; BIGipServerpool_nxtqzj=527099402.24615.0000; Hm_lpvt_bca7840de7b518b3c5e6c6d73ca2662c=1552371456; Hm_lpvt_33be6c04e0febc7531a1315c9594b136=1552371456&apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&apos; } proxies = { &quot;http&quot;: &quot;http://&quot; + ip, } try: resp = requests.get(url=url, headers=headers, proxies=proxies, timeout=2) # print(resp.text) if &quot;胡适传论，上&quot; \\ &quot;下。_胡明_孔夫子旧书网&quot; in resp.text: print(&quot;ip可用&quot;,ip) file_save.write(ip + &apos;\\n&apos;) else: print(&quot;errer&quot;) except: pass if __name__ == &apos;__main__&apos;: start_time = time.time() # 储存可用的ip地址 file_save = open(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_003免费代理_IP\\有效获取测试代理IP是高匿的方法\\高匿ip.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) with open(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_003免费代理_IP\\有效获取测试代理IP是高匿的方法\\获取去重的总IP数量113万个&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;) as file_ips: ips_list = file_ips.readlines() thread_list = [] total_num = 0 for ip_one in set(ips_list): # 前面携带http的 ip = ip_one.strip() # 直接ip+port的 thred_ip = Thread(target=get_gao_ni_ip, args=[ip, file_save]) thread_list.append(thred_ip) thred_ip.start() total_num += 1 print(total_num, total_num) # 为了是电脑CPU不至于很卡 time.sleep(0.005) for i in thread_list: i.join() file_save.close() end_time = time.time() print((end_time - start_time), &apos;秒&apos;)至此，删选高匿代理ip结束,如果有更好删选高匿代理ip方法，欢迎留言告知，希望大老不吝赐教。 4、测试高匿代理可用ip第二种方法利用百度搜索IP，出来的网站的结果，进行爬取，然后利用自己电脑本机ip和request请求响应回来的代理ip进行比较，如果不一样，说明请求的代理IP就是高匿的。代码如下： import requests from fake_useragent import UserAgent import re import time from threading import Thread ua = UserAgent() print(dir(ua)) print(ua.random) def ceshi(ip, file_save): # url = &quot;https://whatismyipaddress.com/zh-cn/index&quot; url = &quot;http://2019.ip138.com/ic.asp&quot; headers = { # &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&apos; &apos;User-Agent&apos;: ua.random } proxies = { &quot;http&quot;: &quot;http://&quot; + ip, # &quot;http&quot;: &quot;http://62.7.85.234:8080&quot;, } try: resp = requests.get(url=url, headers=headers, proxies=proxies, timeout=2,allow_redirects=False) # resp = requests.get(url=url, headers=headers, timeout=2) # print(111,resp.text) if &apos;&lt;body style=&quot;margin:0px&quot;&gt;&lt;center&gt;&apos; in resp.text: ip1 = re.findall(&apos;&lt;body style=&quot;margin:0px&quot;&gt;&lt;center&gt;.*\\[(.*?)\\].*&lt;/center&gt;&apos;,resp.text)[0] if ip1 != &apos;42.120.74.109&apos;: print(&quot;ip可用&quot;, ip1) file_save.write(ip + &apos;\\n&apos;) else: print(&quot;ip是透明的&quot;) else: print(&quot;errer&quot;) except Exception as e: print(&quot;异常&quot;,e) pass if __name__ == &apos;__main__&apos;: file_save = open(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_003免费代理_IP\\有效获取测试代理IP是高匿的方法\\高匿_detail-ip.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) ip = &apos;106.75.140.177:8888&apos; ceshi(ip, file_save)","categories":[{"name":"代理ip","slug":"代理ip","permalink":"https://zhaojiafu.github.io/categories/%E4%BB%A3%E7%90%86ip/"}],"tags":[{"name":"代理ip","slug":"代理ip","permalink":"https://zhaojiafu.github.io/tags/%E4%BB%A3%E7%90%86ip/"}]},{"title":"统计文件目录下的文件总数和文件大小总和","slug":"08225dae53de8a1230e96d820bd29537","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.775Z","comments":true,"path":"2019/12/02/08225dae53de8a1230e96d820bd29537/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/08225dae53de8a1230e96d820bd29537/","excerpt":"","text":"做window开发时有时候电脑爬着很多程序，需要查看文件的数量和大小，所以用python的os模块写个小代码，计算后在数量多时能省四分之一的时间。 import os import time def get_file_num(path): global total_size, num_total, file_num # path = r&quot;E:\\004_kongfuz_selenium70_120W&quot; os.chdir(path) ret = os.listdir() # os.getcwd() print(ret) print(os.getcwd()) current_path = os.getcwd() for i in ret: path1 = os.path.join(current_path, i) a = os.path.isdir(path1) if a: get_file_num(path1) else: file_num += 1 total_size += os.path.getsize(path1) num_total += len(ret) if __name__ == &apos;__main__&apos;: start_time = time.time() total_size = 0 num_total = 0 file_num = 0 path = r&quot;E:\\004_kongfuz_selenium70_120W&quot; get_file_num(path) end_time = time.time() print(&quot;用时&quot;, end_time - start_time) print(&quot;总大小&quot;, total_size / 1024 / 1024) print(&quot;总文件夹+文件&quot;, num_total) print(&quot;总文件&quot;, file_num)","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"爬虫之请求头处理小工具模块copyheaders","slug":"0aa94ee4a5bb7ff44d0492b85a1ecdc2","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:29:41.346Z","comments":true,"path":"2019/12/02/0aa94ee4a5bb7ff44d0492b85a1ecdc2/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/0aa94ee4a5bb7ff44d0492b85a1ecdc2/","excerpt":"","text":"# 1、安装 pip install copyheaders2、使用方式直接看代码： from copyheaders import headers_raw_to_dict str = b&apos;&apos;&apos; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Connection: keep-alive Cookie: UM_distinctid=168f06fbeb246b-04277d3e392091-1333063-140000-168f06fbeb3a1b; CNZZDATA3302454=cnzz_eid%3D1674373702-1550220021-https%253A%252F%252Fwww.baidu.com%252F%26ntime%3D1552444290 Host: www.bejson.com If-Modified-Since: Wed, 13 Mar 2019 02:58:11 GMT If-None-Match: W/&quot;5c8871c3-a7fd&quot; Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36 &apos;&apos;&apos; headers = headers_raw_to_dict(str) print(headers) print(type(headers))","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"copyheaders","slug":"copyheaders","permalink":"https://zhaojiafu.github.io/tags/copyheaders/"},{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"Python+Selenium之鼠标悬浮在指定元素上方和对指定元素块进行截图、拼接图片","slug":"0d1f86f5ce40e09c3799ab5dede44444","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.887Z","comments":true,"path":"2019/12/02/0d1f86f5ce40e09c3799ab5dede44444/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/0d1f86f5ce40e09c3799ab5dede44444/","excerpt":"","text":"# 1、悬浮在指定元素上方： from selenium import webdriver from selenium.webdriver.common.action_chains import ActionChains driver = webdriver.Chrome() url = &quot;http://dun.163.com/trial/picture-click&quot; driver.get(url=url) # driver.find_element_by_class_name(&apos;yidun_tips&apos;).click() # 准备悬停的元素 move_element = driver.find_element_by_class_name(&quot;yidun_tips&quot;) # 悬停 ActionChains(driver).move_to_element(move_element).perform()2、截图：img1_element = driver.find_element_by_class_name(&apos;yidun_bgimg&apos;) # 获取俩张图片 time.sleep(1) img1_element.screenshot(r&quot;D:\\zjf_workspace\\自己测试用的\\验证码的破解\\图文坐标\\img1.png&quot;)3、拼接图片from PIL import Image import matplotlib.pyplot as plt img1 = Image.open(r&quot;D:\\zjf_workspace\\自己测试用的\\验证码的破解\\图文坐标\\img1.png&quot;) img2 = Image.open(r&quot;D:\\zjf_workspace\\自己测试用的\\验证码的破解\\图文坐标\\img2.png&quot;) # img3 = Image.open(r&quot;D:\\zjf_workspace\\自己测试用的\\验证码的破解\\图文坐标\\img3.png&quot;) new_im = Image.new(&apos;RGB&apos;, (320, 200)) new_im.paste(img1, (0, 0)) new_im.paste(img2,(0,160,img2.size[0],160+img2.size[1])) plt.imshow(new_im) plt.show()","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"},{"name":"python模块","slug":"selenium/python模块","permalink":"https://zhaojiafu.github.io/categories/selenium/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"Pycharm 快捷键","slug":"d03f5bb9d53a323cdf6f9b007811e1ae","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.182Z","comments":true,"path":"2019/12/02/d03f5bb9d53a323cdf6f9b007811e1ae/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/d03f5bb9d53a323cdf6f9b007811e1ae/","excerpt":"","text":"Pycharm 快捷键1、Python自带ShellALt + N 上一句命令Ctrl + N 新建一个py文件F5 运行当前的py文件Ctrl + C 强制亭子 2、设置为Eclipse默认的快捷键 + Pycharm 4.0.5Ctrl + Shift + Q 全屏Ctrl + Shift + Alt + Q presentation modeShift + ESC 关闭除编辑区域的其他区域Ctrl + Shift + Z Run替换 Ctrl +Shift + F10 Run context configurationCtrl + Alt + Shift + X 替换 Alt + Shift + F10 Run 选择运行方式Ctrl + Shift + Alt + A 行注释 Ctrl + Alt + F12 打开工程的路径 Ctrl + Shift + C 复制当前文件的路径Ctrl + PageUp/PageDown 切换标签Ctrl + E 最近工作的文件Ctrl + Space 代码提示Ctrl + O 根据name模糊查找当前文件中类、方法Alt + (向左箭头或者向右箭头) ，回退or前进到到之前查看或者编辑处 //有时是这个，有时时下面的Alt + (向上箭头或者向下箭头) ，将当前方法整体往下或者往上移动Alt + Up/Down 当前行与上一行，下一行互换Alt + Right/Left 跳转到下一个、前一个编辑的选项卡Ctrl + Shift+R 根据name模糊查找某个资源文件Ctrl + Shift+T 根据name模糊查找当前project中某个类Ctrl + H 整个项目中查找Ctrl + S（没作用，pycharm是自动保存）F3 与 Ctrl + 鼠标左键效果一样：跳转到方法定义处Shift + Enter 在行中编辑自动跳转到下一行开头处Ctrl + Alt + L 代码格式化Ctrl + Shift + ]/[ 选定代码块结束、开始Alt + Enter 快速修正Ctrl + Shilf + F12 最大最小化当前编辑窗口（相当于Eclipse ctrl+M）Ctrl + F6 窗口间切换Ctrl +（-/+） 折叠放开代码Alt + Shift + R 将当前文件重命名（Eclipse中用F2、当时pycharm被冲突了）单步调试按钮（F5/F6/F7/F8），自己多用几次就熟悉了，此处不讲。Alt + Enter 自动引入包Ctrl + Enter 换行还在当前行Enter 到下一行Shift + Enter 另起一行Ctrl + Shift + S 打开设置面板F2 / Shift + F2下一条、前一条高亮的错误Ctrl + Shift + F 格式化代码Ctrl + Alt + L 格式化代码Ctrl + Shift + F12 最大化编辑开关Ctrl+Click 跳转到声明Ctrl + Alt + B 跳转到实现Ctrl + Shift + I 查看快速定义Alt + Shift + F10 运行模式配置Alt + Shift + F9 调试模式配置Shift + F10 运行Shift + F9 调试Ctrl + F8 设置断点Ctrl + Shift + B 设置断点Ctrl + Shift + F8 查看断点Alt + F 打开文件下拉菜单选择新建Ctrl + N 右键Alt + Shift + R 重命名Ctrl + N 新建文件Ctrl + D 删除当前行,剪贴板上没有Ctrl + X 剪切当前行,剪切板上有Ctrl + O 导航Ctrl + Tab 在窗口间进行切换Alt + Home 跳转到导航栏Alt + 1 Project窗口 3、编辑（Editing）Ctrl + Space 基本的代码完成（类、方法、属性）Ctrl + Alt + Space 快速导入任意类Ctrl + Q 快速查看文档Shift + F1 外部文档Ctrl + 鼠标 简介Ctrl + F1 显示错误描述或警告信息Ctrl + O 方法/类定位Ctrl + Alt + T 选中当前行，可以复制当前方法到下面，后者添加tryCtrl + / 行注释Ctrl + Shift + / 块注释Ctrl + Shift + Alt + A 行注释Ctrl + Shift + ]/[ 选定代码块结束、开始Ctrl + Alt + L 代码格式化Ctrl + Alt + O 优化导入Ctrl + Alt + I 自动缩进Tab / Shift + Tab 缩进、不缩进当前行Ctrl+X 剪切当前行或选定的代码块到剪贴板Ctrl+C 复制当前行或选定的代码块到剪贴板Ctrl+V 从剪贴板粘贴Ctrl + Shift + V 从最近的缓冲区粘贴/打开缓冲区Ctrl + Shift + J 添加智能线Ctrl + Shift + U 在选定的区域或代码块间切换Ctrl + Delete 删除到字符结束Ctrl + Backspace 删除到字符开始Ctrl + Numpad+/- 展开/折叠代码块（当前位置的：函数，注释等） 4、查找/替换(Search/Replace)Enter 下一个Shift + Enter 前一个 5、运行(Running)Ctrl + Shift + F10 运行编辑器配置Ctrl + Alt + R 运行manage.py任务 6、调试(Debugging)F8 跳过F7 进入Shift + F8 退出Alt + F9 运行游标Alt + F8 验证表达式Ctrl + Alt + F8 快速验证表达式F9 恢复程序 7、导航(Navigation)F12 回到先前的工具窗口Esc 从工具窗口回到编辑窗口Shift + Esc 隐藏左侧窗口Ctrl + G 查看当前行号、字符号Ctrl + E 当前文件弹出Alt + F1 查找当前文件或标识Ctrl+Click 跳转到声明Ctrl + Alt + B 跳转到实现Ctrl + Shift + I查看快速定义Ctrl + Shift + B跳转到类型声明Ctrl + Shift + H 方法层次结构Ctrl + Alt + H 调用层次结构F4 / Ctrl + Enter 编辑资源、查看资源Alt + Home 显示导航条F11书签开关Ctrl + Shift + F11 书签助记开关Ctrl + #[0-9] 跳转到标识的书签Shift + F11 显示书签 8、搜索相关(Usage Search)Alt + F7/Ctrl + F7 文件中查询用法Ctrl + Shift + F7 文件中用法高亮显示Ctrl + Alt + F7 显示用法 9、重构(Refactoring)F5 复制F6 剪切Shift + F6 重命名Ctrl + F6 更改签名Ctrl + Alt + N 内联Ctrl + Alt + M 提取方法Ctrl + Alt + V 提取属性Ctrl + Alt + F 提取字段Ctrl + Alt + C 提取常量Ctrl + Alt + P 提取参数 10、控制VCS/Local HistoryCtrl + K 提交项目Ctrl + T 更新项目Alt + Shift + C 查看最近的变化Alt + BackQuote(’) VCS快速弹出 11、模版(Live Templates)Ctrl + Alt + J 当前行使用模版Ctrl +Ｊ 插入模版 13、基本(General)Alt + #[0-9] 打开相应的工具窗口Ctrl + Alt + Y 同步Alt + Shift + I 根据配置检查当前文件Ctrl + BackQuote(’) 快速切换当前计划Ctrl + Alt + S 打开设置页Ctrl + Shift + A 查找编辑器里所有的动作 14、Pycharm 相关设置14.1 查看本地目录结构Pycharm -&gt; 右键applications -&gt; Show in Explorer 14.2 更改背景颜色file -&gt; setting -&gt; appearance&amp;behavior -&gt; appearance在theme处选择darcula，此时背景颜色就编程了深色 14.3 编辑Themesetting-&gt;Editor-&gt;colors&amp;fonts-&gt;font处将darcula另外save as一个，之后此处就会编程copy版本了，也就能编辑了 14.4 显示行数 空白字符双击一下shift键，就会弹出搜索框，在里面输入show line numbers，此时就会显示一个开关，将off设置成onShow line numbersShow whitespacesShow method separators 14.5 设置Python自动引入包要先在 &gt;general &gt; autoimport -&gt; python :show popup快捷键：Alt + Enter: 自动添加包“代码自动完成”时间延时设置Code Completion -&gt; Auto code completion in (ms):0 -&gt; Autopopup in (ms):500Ctrl+滚轮改变字体大小Ctrl + Shift + S 打开设置面板，搜索 Mouse 14.6 代码自动整理设置Setting -&gt; Editor -&gt; Code Style -&gt; Python -&gt; Wrapping and Braces这里line breaks去掉√，否则bar, 和baz会分开在不同行，不好看 14.7 设置快捷键运行、全屏、演示Crtl + Alt + S 打开设置面板 -&gt; Appearence&amp;Behavior -&gt; Keymap删除原来的快捷键，设置新的Ctrl + Shift + Z 替换 Ctrl + Shift + F10 运行编辑配置Ctrl + Alt + Shift + X 替换 Alt + Shift + F10 选择Run配置Ctrl + Shift + Q 全屏Ctrl + Shift + Alt + Q 演示模式Ctrl + Shift + Alt + A 注释行代码 14.8 智能感知忽略大小写File -&gt; setting -&gt; Editor -&gt; Code Completion -&gt; case sensitive completion -&gt; 选择None 14.9 添加const、requests和lxml等 模板const.py单文件直接拷贝到C:\\Python27\\Lib 文件夹下添加requests模块最简单但有点慢的方法是在C:\\Python27\\Lib下搜索pip.exe文件，用命令行 pip install requests或者解压缩requests模板的压缩包requests-v2.7.0找到setup.py文件的位置，在当前文件夹用cmd命令执行python setup.py install，重启pycharm或者下载requests-2.7.0-py2.py3-none-any.whl文件解压后直接把requests文件夹复制到C:\\Python27\\Lib目录下，第二个文件夹没用不要用easy-install，只能安装，不能卸载，要手动删除 参考：https://blog.csdn.net/u014015972/article/details/48550443https://www.jianshu.com/p/b0a9d9dbaf6e","categories":[{"name":"pycharm","slug":"pycharm","permalink":"https://zhaojiafu.github.io/categories/pycharm/"}],"tags":[{"name":"pycharm","slug":"pycharm","permalink":"https://zhaojiafu.github.io/tags/pycharm/"}]},{"title":"爬虫requests.exceptions.SSLError错误","slug":"0e73c2398e881f45ebd8a0f742c5ab17","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.667Z","comments":true,"path":"2019/12/02/0e73c2398e881f45ebd8a0f742c5ab17/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/0e73c2398e881f45ebd8a0f742c5ab17/","excerpt":"","text":"# 报错：OpenSSL.SSL.Error: [(‘SSL routines’, ‘tls_process_server_certificate’, ‘certificate verify failed’)] 完整错误 Traceback (most recent call last): File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\contrib\\pyopenssl.py&quot;, line 453, in wrap_socket cnx.do_handshake() File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\OpenSSL\\SSL.py&quot;, line 1915, in do_handshake self._raise_ssl_error(self._ssl, result) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\OpenSSL\\SSL.py&quot;, line 1647, in _raise_ssl_error _raise_current_error() File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\OpenSSL\\_util.py&quot;, line 54, in exception_from_error_queue raise exception_type(errors) OpenSSL.SSL.Error: [(&apos;SSL routines&apos;, &apos;tls_process_server_certificate&apos;, &apos;certificate verify failed&apos;)] During handling of the above exception, another exception occurred: Traceback (most recent call last): File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\connectionpool.py&quot;, line 594, in urlopen self._prepare_proxy(conn) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\connectionpool.py&quot;, line 805, in _prepare_proxy conn.connect() File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\connection.py&quot;, line 344, in connect ssl_context=context) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\util\\ssl_.py&quot;, line 344, in ssl_wrap_socket return context.wrap_socket(sock, server_hostname=server_hostname) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\contrib\\pyopenssl.py&quot;, line 459, in wrap_socket raise ssl.SSLError(&apos;bad handshake: %r&apos; % e) ssl.SSLError: (&quot;bad handshake: Error([(&apos;SSL routines&apos;, &apos;tls_process_server_certificate&apos;, &apos;certificate verify failed&apos;)],)&quot;,) During handling of the above exception, another exception occurred: Traceback (most recent call last): File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\adapters.py&quot;, line 449, in send timeout=timeout File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\connectionpool.py&quot;, line 638, in urlopen _stacktrace=sys.exc_info()[2]) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\urllib3\\util\\retry.py&quot;, line 398, in increment raise MaxRetryError(_pool, url, error or ResponseError(cause)) urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host=&apos;user.qzone.qq.com&apos;, port=443): Max retries exceeded with url: /9998935 (Caused by SSLError(SSLError(&quot;bad handshake: Error([(&apos;SSL routines&apos;, &apos;tls_process_server_certificate&apos;, &apos;certificate verify failed&apos;)],)&quot;,),)) During handling of the above exception, another exception occurred: Traceback (most recent call last): File &quot;D:/zjf_workspace/自己测试用的/qq/寻找可以访问空间的QQ号.py&quot;, line 12, in &lt;module&gt; response = requests.get(url=url,headers=headers,verify=True) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\api.py&quot;, line 75, in get return request(&apos;get&apos;, url, params=params, **kwargs) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\api.py&quot;, line 60, in request return session.request(method=method, url=url, **kwargs) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\sessions.py&quot;, line 533, in request resp = self.send(prep, **send_kwargs) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\sessions.py&quot;, line 646, in send r = adapter.send(request, **kwargs) File &quot;C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\adapters.py&quot;, line 514, in send raise SSLError(e, request=request) requests.exceptions.SSLError: HTTPSConnectionPool(host=&apos;user.qzone.qq.com&apos;, port=443): Max retries exceeded with url: /9998935 (Caused by SSLError(SSLError(&quot;bad handshake: Error([(&apos;SSL routines&apos;, &apos;tls_process_server_certificate&apos;, &apos;certificate verify failed&apos;)],)&quot;,),))网上搜索最终找到一个快速解决方法：request请求加入参数verify=True即可。 response = requests.get(url=url,headers=headers,verify=True)","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"爬虫","slug":"爬虫","permalink":"https://zhaojiafu.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"xpath之The behavior of this method will change in future versions","slug":"122412c2d8afcfd626187bc005e25c1c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.732Z","comments":true,"path":"2019/12/02/122412c2d8afcfd626187bc005e25c1c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/122412c2d8afcfd626187bc005e25c1c/","excerpt":"","text":"警告内容原话： FutureWarning: The behavior of this method will change in future versions. Use specific &apos;len(elem)&apos; or &apos;elem is not None&apos; test instead. if next_page_a:意思就是将 if next_page_a:替换掉，我的替换成 if next_page_a is not None:或者if len(next_page_a) &gt; 0:就可以了","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"xpath","slug":"xpath","permalink":"https://zhaojiafu.github.io/tags/xpath/"}]},{"title":"使用python的os模块对目录下的所以文件进行json数据去脏和去除空文件夹","slug":"126732e4c4ac1a8c71c865f9576ebf8a","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.016Z","comments":true,"path":"2019/12/02/126732e4c4ac1a8c71c865f9576ebf8a/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/126732e4c4ac1a8c71c865f9576ebf8a/","excerpt":"","text":"需求：最近有个需求，需求对目录下的一个json数据进行处理，主要对json里面的title如果为空字符串，将此文件进行删除，如果文件夹为空，也就行递归的查找和删除。 直接上我的代码，需要自己拿去，O(∩_∩)O哈哈~ import json import os def remove_none_dirs(path): # 去重空文件夹 list = os.listdir(path) for i in list: path_new = os.path.join(path, i) if os.path.isdir(path_new): list2 = os.listdir(path=path_new) if len(list2) &gt; 0: remove_none_dirs(path_new) else: os.removedirs(path_new) else: break def remove_json_error(path): # 去重json脏数据，title为空的 list = os.listdir(path) for i in list: path_new = os.path.join(path, i) if os.path.isdir(path_new): remove_json_error(path_new) else: if path_new.endswith(&quot;json&quot;): title = add_file_to_redis(path_new) if title.strip() == &quot;&quot;: os.remove(path_new) else: pass else: pass def add_file_to_redis(path): with open(path, &apos;r&apos;, encoding=&apos;utf-8&apos;) as file: ret = file.read() data = json.loads(ret) title = data[&quot;Title&quot;] print(title) return title if __name__ == &apos;__main__&apos;: path = r&quot;需要查找的目录&quot; remove_json_error(path) remove_none_dirs(path)","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"windows与Linux间远程拷贝文件-pscp命令","slug":"178962d67fb81d78b26b6393231df736","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.846Z","comments":true,"path":"2019/12/02/178962d67fb81d78b26b6393231df736/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/178962d67fb81d78b26b6393231df736/","excerpt":"","text":"# windows与Linux间远程拷贝文件-pscp命令 pscp命令下载从http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html下载pscp，将其放入windows的system32 文件夹下 (一)上传1.开始→运行→cmd进入到dos模式 输入以下命令 pscp D:\\java\\apache-tomcat-5.5.27\\webapps\\szfdc.rar dev@192.168.68.249:/home/dev2.输入密码 ok 文件已经上传到目标机器的/home/dev目录下了 (二)下载1.开始→运行→cmd进入到dos模式 输入以下命令 pscp dev@192.168.68.248:/home/dev/gren.sql d:\\gren.sql;输入密码。其中：dev为linux的用户名，192.168.68.248为远程Linux主机ip地址，/home/dev/gren.sql为linux下的文件，d:\\gren.sql为保存在本地的文件其他。 PuTTY Secure Copy client （putty 安全复制客户端） Release 0.53b 版本， Usage: pscp [options] [user@]host:source target pscp [options] source [source…] [user@]host pscp [options] -ls user@host:filespec用法： pscp [选项] [用户名@]主机：源文件 目标文件 pscp [选项] 源文件 [源文件……] [用户名@]主机 pscp [选项] -ls 用户名@主机：文件空间？ Options:选项： -p 保护文件属性 -q 安静，不显示统计 -r 复制子文件夹 -v 显示信息 -load 加载，加载保存节的设定 -P 端口，连接到指定空间端口 -l 用户，用指定的用户连接空间 -pw 密码，用指定的密码登录空间 -1/-2 强迫 ssh 使用的版本 -C 打开压缩 -i key 钥匙，证明用的钥匙文件 -batch 关闭交互能力，也许 -unsafe 不安全，允许伺服端取代字符 (危险的) 复制文件到服务器用到下面pscp [options] source [source…] [user@]host:target所以复制本地文件：c:\\documents\\foo.txt到服务器example.com用户名是fred到文件/tmp/foo你的命令是：pscp c:\\documents\\foo.txt fred@example.com:/tmp/foo带用户名密码的命令（copy windows 下 c:/hq/es_map.txt 到 linux 192.168.1.7下的 home目录） pscp -q -l root -pw Admin123 c:/hq/es_map.txt root@192.168.1.7:/home 参考：https://blog.csdn.net/huwei2003/article/details/45688565","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"},{"name":"pscp命令","slug":"pscp命令","permalink":"https://zhaojiafu.github.io/tags/pscp%E5%91%BD%E4%BB%A4/"}]},{"title":"ffmpeg 的命令总结","slug":"945a6986a5cd54907f3a8ee2cb390423","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.441Z","comments":true,"path":"2019/12/02/945a6986a5cd54907f3a8ee2cb390423/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/945a6986a5cd54907f3a8ee2cb390423/","excerpt":"","text":"# 官网http://ffmpeg.org/doxygen/3.1/structAVOutputFormat.html 参考别人的 格式转换 (将file.avi 转换成output.flv) ffmpeg -i file.avi output.flv -i 表示输入文件 :现在有个视频video.avi，有个音频 audio.mp3，将其合并成output.avi 两个命令 （ video2.avi 是中间文件 ，用完可删） ffmpeg -i video.avi -vcodec copy -an video2.aviffmpeg -i video2.avi -i audio.mp3 -vcodec copy -acodec copy output.avi -i 表示输入文件 -vcodec copy 表示 force video codec (‘copy’ to copy stream) 这个不知怎么译 ，估计是直接copy -acodec copy 这个说的应该是音频了 跟上面一样 -an : 表示 disable audio 估计是audio no 之类的缩写 表示去掉video.avi 原有的音频 方法2 好像可以直接指定两个输入文件 ， ffmpeg -i /tmp/a.wav -i /tmp/a.avi /tmp/a.avi 两个文件 的顺序很重 从视频里提取声音（声音与视频的分离） ffmpeg -i 人生若只如初见.flv -vn r.mp3 从flv 文件 中提取声音并保存为mp3 格式 -vn : 表示忽略视频 估计是video no 之类的缩写 ffmpeg -i 人生若只如初见.flv -an r.flv 只留视频不留声音 -an : 表示 忽略 声音 估计是audio no 之类的缩写从视频里提取图片（ ） ffmpeg -i test.avi -y -f image2 -ss 8 -t 0.001 -s 350x240 test.jpg -ss 第8秒处 截一图 压缩mp3 文件 如果你觉得mp3 文件 有点大，想变小一点那么可以通过-ab 选项改变音频的比特率 （bitrate） ffmpeg -i input.mp3 -ab 128 output.mp3 //这里将比特率设为128 你可以用file 命令查看一下源文件 的信息 z.mp3: Audio file with ID3 version 2.3.0, contains: MPEG ADTS, layer III, v1, 192 kbps, 44.1 kHz, Stereo 其中的192 kbps 就是这个东西 mp3中比特率的含义是：在压缩音频文件至mp3时，由压缩软件所确定数码文件在播放时每秒传 送给播放器大小，其单位是：千位/秒；英文的含义是：kbps - = kilobits per second。现在mp3文件的最高数位率是320 kbps。这样的文件体积很大，每分钟的音乐超过两兆字节。如果采用可变比特率（VBR）编码来生成mp3文件，获得与320 kbps相当音质，文件的体积会缩小25~50%。请注意：播放时间相同，而歌曲不同，所获的压缩mp3文件的一般不相同，这是因为VBR编码所生成的 mp3文件的大小不仅仅取决于播放时间的长度，还取决于源音频文件的其它因素。 录音（要有可用的麦克风，并且如果用alsa 的话，好像得安alsa-oss，重启） ffmpeg -f oss -i /dev/dsp out.avi (should hava oss or alsa-oss) ffmpeg -f alsa -ac 2 -i hw:0, 0 out.avi (should ) ffmpeg -f alsa -ac 2 -i pulse (should hava PulseAudio) oss 是linux 下的声音相关的东西，与alsa 一样，不过oss 是商业的， 而/dev/dsp 是oss 用到的麦克的设备吧，可以这样理解 屏幕录像 ffmpeg -f x11grab -s xga -r 10 -i :0.0+0+0 wheer.avi ffmpeg -f x11grab -s 320x240 -r 10 -i :0.0+100+200 wheer.avi :0:0 表示屏幕（个人理解，因为系统变量$DISPLAY值就是:0.0） 而100,表示距左端100象素，200表示距上端200 -s 设置窗口大小 -r 10 好像是设置频率，不懂 ffmpeg -f x11grab -s xga -qscale 5 -r 10 -i :0.0+0+0 wheer.avi -qscale 8 设定画面质量，值 越小越好 屏幕录像，同时录音 ffmpeg -f oss -i /dev/dsp -f x11grab -r 30 -s 1024x768 -i :0.0 output.mkv ffmpeg -ac 2 -f oss -i /dev/dsp -f x11grab -r 30 -s 1024x768 -i :0.0 -acodec pcm_s16le -vcodec libx264 -vpre lossless_ultrafast -threads 0 output.mkv 看到这，你会发现这个命令有多强大， 如果我屏幕上打开了一个窗口，我只想录这个窗口的内容，如何确定这个窗口的坐标位置呢 可以用另外一个命令 xwininfo 输入这个命令后，用鼠标点选目标窗口， 就会出现目标窗口的坐标，宽高等一系列信息 Absolute upper-left X: 276 Absolute upper-left Y: 57 Relative upper-left X: 2 Relative upper-left Y: 23 Width: 742 Height: 499 Depth: 24 Visual: 0x21 Visual Class: TrueColor Border width: 0 Class: InputOutput Colormap: 0x20 (installed) Bit Gravity State: NorthWestGravity Window Gravity State: NorthWestGravity Backing Store State: NotUseful Save Under State: no Map State: IsViewable Override Redirect State: no Corners: +276+57 -262+57 -262-244 +276-244 -geometry 80x24+274+34 看到这一行了没 (） 比如根据上面的信息 ffmpeg -f oss -i /dev/dsp -f x11grab -r 30 -s 1280x752 -i :0.0+0+23 output.aviAnother thing you can change is the video frame rate (FPS). In the example above we used -r 30 which means capture at 30 FPS. You can change this value to whatever frame rate you want. 这个 -r 30 应该是每秒钟取样几次，估计是一秒截三十次屏， 切头去尾 ffmpeg -ss 00:00:10 -t 00:01:22 -i 五月天-突然好想你.mp3 output.mp3 只要 从第10秒开始截取，共截取1：22时长的内容 视频文件的连接，如两个flv 文件 连接成一 好像必须先将文件 转成mpg ，dv 等格式的文件后才能进行连接 连接复数的AVI影片档之范例（在此范例中须一度暂时将AVI档转换成MPEG-1档(MPEG-1, MPEG-2 PS, DV格式亦可连接)）ffmpeg -i input1.avi -sameq inputfile_01.mpg -r 20 ffmpeg -i input2.avi -sameq inputfile_02.mpg -r 20 cat inputfile_01.mpg inputfile_02.mpg &gt; inputfile_all.mpg ffmpeg -i inputfile_all.mpg -sameq outputfile.avi 上面将 input1.avi input2.avi 合并成outputfile.avi -sameq 表示 相同的质量（可能指的是画面，不太清楚） -r 指频率 =====================================================================下面是wiki 上给的几个例子参数FFmpeg可使用众多参数，参数内容会根据ffmpeg版本而有差异，使用前建议先参考参数及编解码器的叙述。此外，参数明细可用 ffmpeg -h 显示；编解码器名称等明细可用 ffmpeg -formats 显示。 下列为较常使用的参数。 [编辑 ] 主要参数-i 设定输入档名。-f 设定输出格式。-y 若输出档案已存在时则覆盖档案。-fs 超过指定的档案大小时则结束转换。-ss 从指定时间开始转换。-title 设定标题。-timestamp 设定时间戳。-vsync 增减Frame使影音同步。[编辑 ] 影像参数-b 设定影像流量，默认为200Kbit/秒。（ 单位请参照下方注意事项 ）-r 设定FrameRate值，默认为25。-s 设定画面的宽与高。-aspect 设定画面的比例。-vn 不处理影像，于仅针对声音做处理时使用。-vcodec 设定影像影像编解码器，未设定时则使用与输入档案相同之编解码器。[编辑 ] 声音参数-ab 设定每Channel （最近的SVN 版为所有Channel的总合）的流量。（ 单位 请参照下方注意事项 ）-ar 设定采样率。-ac 设定声音的Channel数。-acodec 设定声音编解码器，未设定时与影像相同，使用与输入档案相同之编解码器。-an 不处理声音，于仅针对影像做处理时使用。-vol 设定音量大小，256为标准音量。(要设定成两倍音量时则输入512，依此类推。)[编辑 ] 注意事项以-b及ab参数设定流量时，根据使用的ffmpeg版本，须注意单位会有kbits/sec与bits/sec的不同。（可用ffmpeg -h显示说明来确认单位。）例如，单位为bits/sec的情况时，欲指定流量64kbps时需输入‘ -ab 64k ’；单位为kbits/sec的情况时则需输入‘ -ab 64 ’。以-acodec及-vcodec所指定的编解码器名称，会根据使用的ffmpeg版本而有所不同。例如使用AAC编解码器时，会有输入aac与 libfaac的情况。此外，编解码器有分为仅供解码时使用与仅供编码时使用，因此一定要利用ffmpeg -formats 确 认输入的编解码器是否能运作。[编辑 ] 范例将MPEG-1影片转换成MPEG-4格式之范例ffmpeg -i inputfile.mpg -f mp4 -acodec libfaac -vcodec mpeg4 -b 256k -ab 64k outputfile.mp4 将MP3声音转换成MPEG-4格式之范例ffmpeg -i inputfile.mp3 -f mp4 -acodec libaac -vn -ab 64k outputfile.mp4 将DVD的VOB档转换成VideoCD格式的MPEG-1档之范例ffmpeg -i inputfile.vob -f mpeg -acodec mp2 -vcodec mpeg1video -s 352x240 -b 1152k -ab 128k outputfile.mpg将AVI影片转换成H.264格式的M4V档之范例ffmpeg -i inputfile.avi -f mp4 -acodec libfaac -vcodec libx264 -b 512k -ab 320k outputfile.m4v将任何影片转换成东芝REGZA可辨识的MPEG2格式之范例ffmpeg -i inputfile -target ntsc-svcd -ab 128k -aspect 4:3 -s 720x480 outputfile.mpg连接复数的AVI影片档之范例（在此范例中须一度暂时将AVI档转换成MPEG-1档(MPEG-1, MPEG-2 PSDV格式亦可连接)、ffmpeg -i input1.avi -sameq inputfile_01.mpg ffmpeg -i input2.avi -sameq inputfile_02.mpg cat inputfile_01.mpg inputfile_02.mpg &gt; inputfile_all.mpg ffmpeg -i inputfile_all.mpg -sameq outputfile.avi =============================================================================http://ffmpeg.org/ffmpeg-doc.html http://ubuntuforums.org/showthread.php?t=1392026同时搞明白的一些问题在alsa 体系中声卡（也可能是麦克风，）叫hw:0,0 而在oss 体系中叫/dev/dsp (用词可能不太专业) Linux在安装了声卡后，会有一些设备文件生成。采集数字样本的/dev/dsp文件，针对混音器的/dev/mixer文件，用于音序器的/dev/sequencer，/dev/audio文件一个基于兼容性考虑的声音设备文件。只要向dev/audio中输入wav文件就能发出声音。而对/dev/dsp文件读取就能得到WAV文件格式的声音文件。 a) 通用选项-L license-h 帮助-fromats 显示可用的格式，编解码的，协议的…-f fmt 强迫采用格式fmt-I filename 输入文件-y 覆盖输出文件-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持-title string 设置标题-author string 设置作者-copyright string 设置版权-comment string 设置评论-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置，只需要输入如下的就可以了：ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg-hq 激活高质量设置-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持 b) 视频选项-b bitrate 设置比特率，缺省200kb/s-r fps 设置帧频 缺省25-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777-croptop size 设置顶部切除带大小 像素单位-cropbottom size –cropleft size –cropright size-padtop size 设置顶部补齐的大小 像素单位-padbottom size –padleft size –padright size –padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)-vn 不做视频记录-bt tolerance 设置视频码率容忍度kbit/s-maxrate bitrate设置最大视频码率容忍度-minrate bitreate 设置最小视频码率容忍度-bufsize size 设置码率控制缓冲区大小-vcodec codec 强制使用codec编解码方式。如果用copy表示原始编解码数据必须被拷贝。-sameq 使用同样视频质量作为源（VBR）-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率-passlogfile file 选择两遍的纪录文件名为file c)高级视频选项-g gop_size 设置图像组大小-intra 仅适用帧内编码-qscale q 使用固定的视频量化标度(VBR)-qmin q 最小视频量化标度(VBR)-qmax q 最大视频量化标度(VBR)-qdiff q 量化标度间最大偏差 (VBR)-qblur blur 视频量化标度柔化(VBR)-qcomp compression 视频量化标度压缩(VBR)-rc_init_cplx complexity 一遍编码的初始复杂度-b_qfactor factor 在p和b帧间的qp因子-i_qfactor factor 在p和i帧间的qp因子-b_qoffset offset 在p和b帧间的qp偏差-i_qoffset offset 在p和i帧间的qp偏差-rc_eq equation 设置码率控制方程 默认tex^qComp-rc_override override 特定间隔下的速率控制重载-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full-dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC-idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM-er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)-bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD-4mv 使用4个运动矢量 仅用于mpeg4-part 使用数据划分 仅用于mpeg4-bug param 绕过没有被自动监测到编码器的问题-strict strictness 跟标准的严格性-aic 使能高级帧内编码 h263+-umv 使能无限运动矢量 h263+-deinterlace 不采用交织方法-interlace 强迫交织法编码仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大-psnr 计算压缩帧的psnr-vstats 输出视频编码统计到vstats_hhmmss.log-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开 D)音频选项-ab bitrate 设置音频码率-ar freq 设置音频采样率-ac channels 设置通道 缺省为1-an 不使能音频纪录-acodec codec 使用codec编解码 E)音频/视频捕获选项-vd device 设置视频捕获设备。比如/dev/video0-vc channel 设置视频捕获通道 DV1394专用-tvstd standard 设置电视标准 NTSC PAL(SECAM)-dv1394 设置DV1394捕获-av device 设置音频设备 比如/dev/dsp F)高级选项-map file:stream 设置输入流映射-debug 打印特定调试信息-benchmark 为基准测试加入时间-hex 倾倒每一个输入包-bitexact 仅使用位精确算法 用于编解码测试-ps size 设置包大小，以bits为单位-re 以本地帧频读数据，主要用于模拟捕获设备-loop 循环输入流（只工作于图像流，用于ffserver测试） 转载来自：https://blog.csdn.net/doublefi123/article/details/24324957https://blog.csdn.net/leixiaohua1020/article/details/12751349","categories":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://zhaojiafu.github.io/categories/ffmpeg/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://zhaojiafu.github.io/tags/ffmpeg/"}]},{"title":"python 之os模块学习","slug":"1af959d41a5de25cfc24e362aff7429f","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.700Z","comments":true,"path":"2019/12/02/1af959d41a5de25cfc24e362aff7429f/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/1af959d41a5de25cfc24e362aff7429f/","excerpt":"","text":"# os模块主要学习参考别人记录的，方便日后用到时好找，自己记录作为学习笔记。 一、常用的os.*os.sep:取代操作系统特定的路径分隔符 os.name:指示你正在使用的工作平台。比如对于Windows，它是&apos;nt&apos;，而对于Linux/Unix用户，它是&apos;posix&apos;。 os.getcwd:得到当前工作目录，即当前python脚本工作的目录路径。 os.getenv()和os.putenv:分别用来读取和设置环境变量 os.listdir():返回指定目录下的所有文件和目录名 os.remove(file):删除一个文件 os.stat（file）:获得文件属性 os.chmod(file):修改文件权限和时间戳 os.mkdir(name):创建目录 os.rmdir(name):删除目录 os.removedirs（r“c：\\python”）:删除多个目录 os.system():运行shell命令 os.exit():终止当前进程 os.linesep:给出当前平台的行终止符。例如，Windows使用&apos;\\r\\n&apos;，Linux使用&apos;\\n&apos;而Mac使用&apos;\\r&apos;一.2、新增知识点(os模块的获取路径操作)：import os print os.getcwd()#获得当前工作目录 print os.path.abspath(&apos;.&apos;)#获得当前工作目录 print os.path.abspath(&apos;..&apos;)#获得当前工作目录的父目录 print os.path.abspath(os.curdir)#获得当前工作目录二、常用的os.path.*os.path.split():返回一个路径的目录名和文件名 os.path.isfile()和os.path.isdir()分别检验给出的路径是一个目录还是文件 os.path.existe():检验给出的路径是否真的存在 os.listdir(dirname):列出dirname下的目录和文件 os.getcwd():获得当前工作目录 os.curdir:返回当前目录（&apos;.&apos;） os.chdir(dirname):改变工作目录到dirname os.path.isdir(name):判断name是不是目录，不是目录就返回false os.path.isfile(name):判断name这个文件是否存在，不存在返回false os.path.exists(name):判断是否存在文件或目录name os.path.getsize(name):或得文件大小，如果name是目录返回0L os.path.abspath(name):获得绝对路径 os.path.isabs():判断是否为绝对路径 os.path.normpath(path):规范path字符串形式 os.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在） os.path.splitext():分离文件名和扩展名 os.path.join(path,name):连接目录与文件名或目录 os.path.basename(path):返回文件名 os.path.dirname(path):返回文件路径三、文件的操作：os.mknod(&quot;text.txt&quot;)：创建空文件 fp = open(&quot;text.txt&quot;,w):直接打开一个文件，如果文件不存在就创建文件四、关于open的模式w 写方式a 追加模式打开（从EOF开始，必要时创建新文件）r+ 以读写模式打开w+ 以读写模式打开a+ 以读写模式打开rb 以二进制读模式打开wb 以二进制写模式打开 (参见 w )ab 以二进制追加模式打开 (参见 a )rb+ 以二进制读写模式打开 (参见 r+ )wb+ 以二进制读写模式打开 (参见 w+ )ab+ 以二进制读写模式打开 (参见 a+ ) fp.read([size]) #size为读取的长度，以byte为单位 fp.readline([size]) #读一行，如果定义了size，有可能返回的只是一行的一部分 fp.readlines([size]) #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。 fp.write(str) #把str写到文件中，write()并不会在str后加上一个换行符 fp.writelines(seq) #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。 fp.close() #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。 如果一个文件在关闭后还对其进行操作会产生ValueError fp.flush() #把缓冲区的内容写入硬盘 fp.fileno() #返回一个长整型的”文件标签“ fp.isatty() #文件是否是一个终端设备文件（unix系统中的） fp.tell() #返回文件操作标记的当前位置，以文件的开头为原点 fp.next() #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。 fp.seek(offset[,whence]) #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。 fp.truncate([size]) #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。 目录操作 os.mkdir(&quot;file&quot;) 创建目录 shutil.copyfile(&quot;oldfile&quot;,&quot;newfile&quot;) 复制文件:oldfile和newfile都只能是文件 shutil.copy(&quot;oldfile&quot;,&quot;newfile&quot;) oldfile只能是文件夹，newfile可以是文件，也可以是目标目录 shutil.copytree(&quot;olddir&quot;,&quot;newdir&quot;) 复制文件夹.olddir和newdir都只能是目录，且newdir必须不存在 os.rename(&quot;oldname&quot;,&quot;newname&quot;) 重命名文件（目录）.文件或目录都是使用这条命令 shutil.move(&quot;oldpos&quot;,&quot;newpos&quot;) 移动文件（目录） os.rmdir(&quot;dir&quot;) 只能删除空目录 shutil.rmtree(&quot;dir&quot;) 空目录、有内容的目录都可以删 os.chdir(&quot;path&quot;) 转换目录，换路径转载参考：https://www.cnblogs.com/ginvip/p/6439679.html","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"python 爬虫之报错 requests.exceptions.TooManyRedirects_ Exceeded 30 redirects.","slug":"1d0ed69eb3fafcf862244f1bcb507f48","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.630Z","comments":true,"path":"2019/12/02/1d0ed69eb3fafcf862244f1bcb507f48/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/1d0ed69eb3fafcf862244f1bcb507f48/","excerpt":"","text":"当爬虫时报错：requests.exceptions.TooManyRedirects: Exceeded 30 redirects.可以 request请求时添加allow_redirects=False，默认时allow_redirects=True，所以这样就可以解决我的问题了。 resp = requests.get(url=url, headers=headers,allow_redirects=False)参考：https://www.jianshu.com/p/19f631cbb21a","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"},{"name":"问题解决","slug":"python爬虫/问题解决","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhaojiafu.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"selenium 的一些常用设置","slug":"360f89959f040d4ac0f61aa0478a98ea","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.984Z","comments":true,"path":"2019/12/02/360f89959f040d4ac0f61aa0478a98ea/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/360f89959f040d4ac0f61aa0478a98ea/","excerpt":"","text":"我默认用的是Chrome浏览器 一、安装selenium和配置Chromedriver1、安装selenium,直接使用pip安装 pip install selenium2、chromedriver下载地址：https://sites.google.com/a/chromium.org/chromedriver/downloads （需要翻墙）http://npm.taobao.org/mirrors/chromedriver/（阿里的） 注意事项 ：chromedriver的版本要与你电脑使用的chrome版本对应，对应关系如下： ChromeDriver v74.0.3729.6 (2019-03-14) Supports Chrome v74ChromeDriver v2.46 (2019-02-01) Supports Chrome v71-73ChromeDriver v2.45 (2018-12-10) Supports Chrome v70-72ChromeDriver v2.44 (2018-11-19) Supports Chrome v69-71ChromeDriver v2.43 (2018-10-16) Supports Chrome v69-71ChromeDriver v2.42 (2018-09-13) Supports Chrome v68-70 chromedriver版本 支持的Chrome版本 v2.41 v67-69 v2.40 v66-68 v2.39 v66-68 v2.38 v65-67 v2.37 v64-66 v2.36 v63-65 v2.35 v62-64 v2.34 v61-63 v2.33 v60-62 v2.32 v59-61 v2.31 v58-60 v2.30 v58-60 v2.29 v56-58 v2.28 v55-57 v2.27 v54-56 v2.26 v53-55 v2.25 v53-55 v2.24 v52-54 v2.23 v51-53 v2.22 v49-52 v2.21 v46-50 v2.20 v43-48 v2.19 v43-47 v2.18 v43-46 v2.17 v42-43 v2.13 v42-45 v2.15 v40-43 v2.14 v39-42 v2.13 v38-41 v2.12 v36-40 v2.11 v36-40 v2.10 v33-36 v2.9 v31-34 v2.8 v30-33 v2.7 v30-33 v2.6 v29-32 v2.5 v29-32 v2.4 v29-32 下载完成后：windows 下，新建一个命名为chromedriver文件夹，将解压的chromedriver.exe放进文件夹，再配置进path环境变量Linux下，把下载好的文件放在 /usr/bin 目录下就可以了。 二、浏览器的有界面和无界面设置1、 有界面 opt = webdriver.Chrome()2、使用headless无界面浏览器模式 chrome_options = webdriver.ChromeOptions() chrome_options.add_argument(&apos;--headless&apos;) chrome_options.add_argument(&apos;--disable-gpu&apos;) # 启动浏览器，获取网页源代码 opt = webdriver.Chrome(chrome_options=chrome_options)三、不加载图片设置# 不加载图片设置 options = webdriver.ChromeOptions() prefs = { &apos;profile.default_content_setting_values&apos; : { &apos;images&apos;: 2 } } options.add_experimental_option(&apos;prefs&apos;,prefs) opt = webdriver.Chrome(chrome_options = options)四、selenium定位之iframe中的元素定位1.iFrame有ID 或者 name的情况//进入id=”frame1”的frame中，定位id=”div1”的div和id=”input1”的输入框。dr.switchTo().frame(“frame1”);dr.findElement(By.id(“div1”));dr.findElement(By.id(“input1”)) 2.如果一个iFrame既没有id，也没有name,通用情况// 定位frame位置，并选取frameWebElement frame=driver.findElement(By.xpath( “/html/body/div[2]/div[8]/div[2]/div[3]/div/div[2]/div/iframe” ));driver.switchTo().frame(frame); 3.跳出iFrame//跳出frame,进入default content;重新定位id=”id1”的divdr.switchTo().defaultContent();dr.findElement（By.id(“id１”)） 五、后续补充的整理一些设置集合：1、谷歌：1from selenium import webdriver2import os34# 进入浏览器设置5options = webdriver.ChromeOptions()6# 谷歌无头模式7options.add_argument('--headless')8options.add_argument('--disable-gpu')9# 设置页面大小10options.add_argument('window-size=1200x600')11# 设置中文12options.add_argument('lang=zh_CN.UTF-8')13# 更换头部14options.add_argument('user-agent=\"Mozilla/5.0 (iPod; U; CPU iPhone OS 2_1 like Mac OS X; ja-jp) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.1 Mobile/5F137 Safari/525.20\"')15# 设置代理16options.add_argument('proxy-server=' + proxy)17# 禁止加载图片18chrome_options.add_argument('blink-settings=imagesEnabled=false')19# 不加载图片20options.add_experimental_option('prefs', &#123;\"profile.managed_default_content_settings.images\": 2&#125;)21# 设置下载路径22options.add_experimental_option('prefs', &#123;\"download.default_directory\": os.path.abspath('数据\\\\')&#125;)23# 除去“正受到自动测试软件的控制”24options.add_argument('disable-infobars')25# 打开开发者模式26options.add_experimental_option('excludeSwitches', ['enable-automation'])27# 导入当前py文件目录下的chromedriver28executable_path = os.path.abspath('chromedriver.exe')2930browser = webdriver.Chrome(executable_path=executable_path, chrome_options=options)31url = \"https://httpbin.org/get?show_env=1\"32browser.get(url)33# 设置浏览器窗口大小34browser.set_window_size(1552, 800)35# 删除原来的cookie36browser.delete_all_cookies()37# 添加cookie38browser.add_cookie(&#123;'name':'ABC','value':'DEF'&#125;)39# 刷新当前页面40browser.refresh()41# 通过js新打开一个窗口42page_js='window.open(\"https://www.baidu.com\");'43browser.execute_script(page_js)44# 用js点击元素45button = browser.find_element_by_xpath('//*[@class=\"button\"]')46browser.execute_script(\"$(arguments[0]).click()\",button)47# 用js滑动滑动条48js = \"var q=document.documentElement.scrollTop=\"49for i in range(1, 15):50 browser.execute_script(js + str(i * 100))51# 切换浏览器最新页面窗口52browser.switch_to.window(browser.window_handles[-1])53# 切换浏览器至第一个iframe框架54browser.switch_to.frame(1)55# 切换浏览器的弹出框 并点击同意56self.browser.switch_to.alert.accept()57# 浏览器窗口对象58browser.window_handles: list59# 关闭当前窗口60browser.close()61# 关闭浏览器62browser.quit() 2、火狐浏览器：1from selenium.webdriver.common.proxy import * 2# 代理3myProxy = '202.202.90.20:8080'4# 代理格式5proxy = Proxy(&#123;6 'proxyType': ProxyType.MANUAL, 7 'httpProxy': myProxy, 8 'ftpProxy': myProxy, 9 'sslProxy': myProxy, 10 'noProxy': ''11 &#125;)1213profile = webdriver.FirefoxProfile()14profile = get_firefox_profile_with_proxy_set(profile, proxy)15profile.set_preference(\"general.useragent.override\", user_agent)1617# firefox无头模式18options = webdriver.FirefoxOptions()19options.add_argument('--headless')20options.add_argument('--disable-gpu')21options.add_argument('window-size=1200x600')22executable_path = os.path.abspath('geckodriver.exe')2324driver=webdriver.Firefox(proxy=proxy, profile=profile, 25 options=options, executable_path=executable_path) 26driver.get('https://www.baidu.com') 27driver.quit()2829# 火狐浏览器不加载图片30from selenium import webdriver31options=webdriver.FirefoxProfile()32options.set_preference(‘permissions.default.image’,2)33b=webdriver.Firefox(options)3435# 找到的另外一些设置方法36from selenium import webdriver37# 浏览器选项38firefox_options = webdriver.FirefoxOptions()39# 使用headless无界面浏览器模式40firefox_options.add_argument('--headless')41# 谷歌文档提到需要加上这个属性来规避bug42firefox_options.add_argument('--disable-gpu')43# 设置默认编码为utf-844firefox_options.add_argument('lang=zh_CN.UTF-8')45# 隐藏滚动条, 应对一些特殊页面46firefox_options.add_argument('--hide-scrollbars')47# 禁止加载图片48firefox_options.add_argument('blink-settings=imagesEnabled=false')49# 指定浏览器分辨率50firefox_options.add_argument('window-size=1440x900')51# driver.maximize_window()52# 设置默认请求头53firefox_options.add_argument('user-agent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X)AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\"')54# 设置代理55desired_capabilities = firefox_options.to_capabilities()56desired_capabilities['proxy'] = &#123;57 \"httpProxy\":PROXY,58 \"ftpProxy\":PROXY,59 \"sslProxy\":PROXY,60 \"noProxy\":None,61 \"proxyType\":\"MANUAL\",62 \"class\":\"org.openqa.selenium.Proxy\",63 \"autodetect\":False64&#125;65# 启动浏览器，获取网页源代码66driver = webdriver.Firefox(firefox_options=firefox_options)676869# 另一种设置代理方法：70profile=webdriver.FirefoxOptions()71profile.add_argument('-headless') #设置无头模式72#设置代理服务器73profile.set_preference('network.proxy.type', 1)74profile.set_preference('network.proxy.http',IP)#IP为你的代理服务器地址:如‘127.0.0.0’，字符串类型75profile.set_preference('network.proxy.http_port', PORT) #PORT为代理服务器端口号:如，9999，整数类型76browser=webdriver.Firefox(options=profile) 3、常用操作：1# 清除数据2self.browser.find_element_by_id(\"TPL_username_1\").clear()3# 输入数据4self.browser.find_element_by_id(\"TPL_username_1\").send_keys(f'&#123;i&#125;')5# 点击6self.browser.find_element_by_id(\"J_SubmitStatic\").click()7# xpath获取8self.browser.find_element_by_xpath(f'//*[@id=\"J_QRCodeLogin\"]/div[5]/a[1]').click()9# 鼠标点击10from selenium.webdriver import ActionChains11ac = self.browser.find_element_by_xpath('//*[@id=\"my-page\"]/div/div/div/span[1]')12ActionChains(self.browser).move_to_element(ac).click(ac).perform()13# 动态加载 下拉14self.browser.execute_script(\"window.scrollBy(0,1000)\")15time.sleep(1)16self.browser.execute_script(\"window.scrollBy(0,2000)\")17time.sleep(2)18self.browser.execute_script(\"window.scrollBy(0,3000)\")19time.sleep(0.5)20self.browser.execute_script(\"window.scrollBy(0,4000)\")21time.sleep(0.5)22self.browser.execute_script(\"window.scrollBy(0,5000)\")23time.sleep(0.5)24self.browser.execute_script(\"window.scrollBy(0,6000)\")25# 模拟键盘操作26from selenium.webdriver.common.keys import Keys27self.browser.find_element_by_id(\"TPL_username_1\").send_keys(Keys.NUMPAD5)28Keys.BACK_SPACE # 回退键（BackSpace）29Keys.TAB # 制表键（Tab）30Keys.ENTER # 回车键（Enter）31Keys.SHIFT # 大小写转换键（Shift）32Keys.CONTROL # Control键（Ctrl）33Keys.ALT # ALT键（Alt）34Keys.ESCAPE # 返回键（Esc）35Keys.SPACE # 空格键（Space）36Keys.PAGE_UP # 翻页键上（Page Up）37Keys.PAGE_DOWN # 翻页键下（Page Down）38Keys.END # 行尾键（End）39Keys.HOME # 行首键（Home）40Keys.LEFT # 方向键左（Left）41Keys.UP # 方向键上（Up）42Keys.RIGHT # 方向键右（Right）43Keys.DOWN # 方向键下（Down）44Keys.INSERT # 插入键（Insert）45DELETE # 删除键（Delete）46NUMPAD0 ~ NUMPAD9 # 数字键1-947F1 ~ F12：F1 - F12键 #48(Keys.CONTROL, ‘a’) # 组合键Control+a，全选49(Keys.CONTROL, ‘c’) # 组合键Control+c，复制50(Keys.CONTROL, ‘x’) # 组合键Control+x，剪切51(Keys.CONTROL, ‘v’) # 组合键Control+v，粘贴 参考的网站有：https://www.cnblogs.com/lijuanfei/p/10372651.htmlhttps://www.cnblogs.com/wuhl-89/p/9453885.htmlhttps://blog.csdn.net/yoyocat915/article/details/80580066https://blog.csdn.net/ircszwfcbvdgk234/article/details/78605052https://blog.csdn.net/zin521/article/details/82177874http://blog.sina.com.cn/s/blog_68f262210101mcxp.htmlhttps://blog.csdn.net/weixin_32759777/article/details/84569767https://www.cnblogs.com/yoyo1216/p/10136043.html","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"python 将webp的图片格式转换为jpg格式","slug":"1d87ccdd9c6c0002bbca36ab36953b55","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.573Z","comments":true,"path":"2019/12/02/1d87ccdd9c6c0002bbca36ab36953b55/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/1d87ccdd9c6c0002bbca36ab36953b55/","excerpt":"","text":"需求：主要是因为今天爬取一个网站【漫画柜】，然后图片格式读取字节下载下来不能用画图什么的打开，然后下载后缀为webp可以在浏览器中打开，但是如何下载弄成为jpg或者png格式的呐，然后一顿搜索。。。最终找到了一个博主，参考下写了这个博客。 1、将本地的webp图片转换为jpg from PIL import Image filename = &apos;0bb521255dc1eb1830579959afff9407.webp&apos; im = Image.open(filename) if im.mode == &quot;RGBA&quot;: im.load() # required for png.split() background = Image.new(&quot;RGB&quot;, im.size, (255, 255, 255)) background.paste(im, mask=im.split()[3]) save_name = filename.replace(&apos;webp&apos;, &apos;jpg&apos;) im.save(&apos;{}&apos;.format(save_name), &apos;JPEG&apos;)2、将下载的webp格式图片直接保存为jpgfrom io import BytesIO from PIL import Image import requests # 这里url是你需要下载的图片地址 resp = requests.get(url, headers=headers) byte_stream = BytesIO(resp.content) im = Image.open(byte_stream) # im.show() if im.mode == &quot;RGBA&quot;: im.load() # required for png.split() background = Image.new(&quot;RGB&quot;, im.size, (255, 255, 255)) background.paste(im, mask=im.split()[3]) name = md5_(url) im.save(&apos;./photo2/{}.jpg&apos;.format(name), &apos;JPEG&apos;)参考：https://www.jianshu.com/p/f04a8531b4de","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"正则表达式-匹配中英文、字母和数字","slug":"509550cc8aca4ee13dbacb4ccb58828f","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:53.033Z","comments":true,"path":"2019/12/02/509550cc8aca4ee13dbacb4ccb58828f/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/509550cc8aca4ee13dbacb4ccb58828f/","excerpt":"","text":"最近需要用到正则匹配，上网找了一下，发现这个博客写的不错，想着保留了下载，日后用时就省事了。转载来自：https://blog.csdn.net/jinruoyanxu/article/details/79385815 在做项目的过程中，使用正则表达式来匹配一段文本中的特定种类字符，是比较常用的一种方式，下面是对常用的正则匹配做了一个归纳整理。 匹配中文:[\\u4e00-\\u9fa5] 英文字母:[a-zA-Z] 数字:[0-9] 匹配中文，英文字母和数字及_: ^[\\u4e00-\\u9fa5_a-zA-Z0-9]+$ 同时判断输入长度： [\\u4e00-\\u9fa5_a-zA-Z0-9_]{4,10} ^[\\w\\u4E00-\\u9FA5\\uF900-\\uFA2D]*$ 1、一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾： ^(?!_)(?!.*?_$)[a-zA-Z0-9_\\u4e00-\\u9fa5]+$其中： ^与字符串开始的地方匹配 (?!_) 不能以_开头 (?!.*?_$) 不能以_结尾 [a-zA-Z0-9_\\u4e00-\\u9fa5]+ 至少一个汉字、数字、字母、下划线 $ 与字符串结束的地方匹配 放在程序里前面加@，否则需要\\\\进行转义 &quot;^(?!_)(?!.*?_$)[a-zA-Z0-9_\\u4e00-\\u9fa5]+$&quot; （或者：&quot;^(?!_)\\w*(? 2、只含有汉字、数字、字母、下划线，下划线位置不限： ^[a-zA-Z0-9_\\u4e00-\\u9fa5]+$ 3、由数字、26个英文字母或者下划线组成的字符串 ^\\w+$ 4、2~4个汉字 &quot;^[\\u4E00-\\u9FA5]{2,4}$&quot;; 5、 ^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$ 用：(Abc)+ 来分析：XYZAbcAbcAbcXYZAbcAb XYZAbcAbcAbcXYZAbcAb6、 [^\\u4E00-\\u9FA50-9a-zA-Z_] 34555#5&apos; --&gt;34555#5&apos; publicbool RegexName(string str) { bool flag=Regex.IsMatch(str,@&quot;^[a-zA-Z0-9_\\u4e00-\\u9fa5]+$&quot;); returnflag; } Regex reg=new Regex(&quot;^[a-zA-Z_0-9]+$&quot;); if(reg.IsMatch(s)) { \\\\符合规则 } else { \\\\存在非法字符 } 最长不得超过7个汉字，或14个字节(数字，字母和下划线)正则表达式 ^[\\u4e00-\\u9fa5]{1,7}$|^[\\dA-Za-z_]{1,14}$ 常用正则表达式大全！ （例如：匹配中文、匹配html） 匹配中文字符的正则表达式： [u4e00-u9fa5] 评注：匹配中文还真是个头疼的事，有了这个表达式就好办了 匹配双字节字符(包括汉字在内)：[^x00-xff] 评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 匹配空白行的正则表达式：ns*r 评注：可以用来删除空白行 匹配HTML标记的正则表达式：&lt;(S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; 评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 匹配首尾空白字符的正则表达式：^s*|s*$ 评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 匹配Email地址的正则表达式：^[a-zA-Z0-9][\\w\\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\\w\\.-]*[a-zA-Z0-9]\\.[a-zA-Z][a-zA-Z\\.]*[a-zA-Z]$ 评注：表单验证时很实用 手机号：^((13[0-9])|(14[0-9])|(15[0-9])|(17[0-9])|(18[0-9]))\\d{8}$ 身份证：(^\\d{15}$)|(^\\d{17}([0-9]|X|x)$) 匹配网址URL的正则表达式：[a-zA-z]+://[^s]* 评注：网上流传的版本功能很有限，上面这个基本可以满足需求 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 评注：表单验证时很实用 匹配国内电话号码：d{3}-d{8}|d{4}-d{7} 评注：匹配形式如 0511-4405222 或 021-87888822 匹配腾讯QQ号：[1-9][0-9]{4,} 评注：腾讯QQ号从10000开始 匹配中国邮政编码：[1-9]d{5}(?!d) 评注：中国邮政编码为6位数字 匹配身份证：d{15}|d{18} 评注：中国的身份证为15位或18位 匹配ip地址：d+.d+.d+.d+ 评注：提取ip地址时有用 匹配特定数字： ^[1-9]d*$ //匹配正整数 ^-[1-9]d*$ //匹配负整数 ^-?[1-9]d*$ //匹配整数 ^[1-9]d*|0$ //匹配非负整数（正整数 + 0） ^-[1-9]d*|0$ //匹配非正整数（负整数 + 0） ^[1-9]d*.d*|0.d*[1-9]d*$ //匹配正浮点数 ^-([1-9]d*.d*|0.d*[1-9]d*)$ //匹配负浮点数 ^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$ //匹配浮点数 ^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$ //匹配非负浮点数（正浮点数 + 0） ^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$ //匹配非正浮点数（负浮点数 + 0） 评注：处理大量数据时有用，具体应用时注意修正 匹配特定字符串： ^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 ^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 ^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 ^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 ^w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 在使用RegularExpressionValidator验证控件时的验证功能及其验证表达式介绍如下: 只能输入数字：“^[0-9]*$” 只能输入n位的数字：“^d{n}$” 只能输入至少n位数字：“^d{n,}$” 只能输入m-n位的数字：“^d{m,n}$” 只能输入零和非零开头的数字：“^(0|[1-9][0-9]*)$” 只能输入有两位小数的正实数：“^[0-9]+(.[0-9]{2})?$” 只能输入有1-3位小数的正实数：“^[0-9]+(.[0-9]{1,3})?$” 只能输入非零的正整数：“^+?[1-9][0-9]*$” 只能输入非零的负整数：“^-[1-9][0-9]*$” 只能输入长度为3的字符：“^.{3}$” 只能输入由26个英文字母组成的字符串：“^[A-Za-z]+$” 只能输入由26个大写英文字母组成的字符串：“^[A-Z]+$” 只能输入由26个小写英文字母组成的字符串：“^[a-z]+$” 只能输入由数字和26个英文字母组成的字符串：“^[A-Za-z0-9]+$” 只能输入由数字、26个英文字母或者下划线组成的字符串：“^w+$” 验证用户密码:“^[a-zA-Z]w{5,17}$”正确格式为：以字母开头，长度在6-18之间， 只能包含字符、数字和下划线。 验证是否含有^%&amp;&apos;,;=?$&quot;等字符：“[^%&amp;&apos;,;=?$x22]+” 只能输入汉字：“^[u4e00-u9fa5],{0,}$” 验证Email地址：“^w+[-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$” 验证InternetURL：“^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$” 验证身份证号（15位或18位数字）：“^d{15}|d{}18$” 验证一年的12个月：“^(0?[1-9]|1[0-2])$”正确格式为：“01”-“09”和“1”“12” 验证一个月的31天：“^((0?[1-9])|((1|2)[0-9])|30|31)$” 正确格式为：“01”“09”和“1”“31”。 匹配中文字符的正则表达式： [u4e00-u9fa5] 匹配双字节字符(包括汉字在内)：[^x00-xff] 匹配空行的正则表达式：n[s| ]*r 匹配HTML标记的正则表达式：/&lt;(.*)&gt;.*|&lt;(.*) /&gt;/ 匹配首尾空格的正则表达式：(^s*)|(s*$) 匹配Email地址的正则表达式：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)* 匹配网址URL的正则表达式：http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)? (1)应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） String.prototype.len=function(){return this.replace([^x00-xff]/g,&quot;aa&quot;).length;} (2)应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现 String.prototype.trim = function() { return this.replace(/(^s*)|(s*$)/g, &quot;&quot;); } (3)应用：利用正则表达式分解和转换IP地址 function IP2V(ip) //IP地址转换成对应数值 { re=/(d+).(d+).(d+).(d+)/g //匹配IP地址的正则表达式 if(re.test(ip)) { return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1 } else { throw new Error(&quot;Not a valid IP address!&quot;) } } (4)应用：从URL地址中提取文件名的javascript程序 s=&quot;http://www.juapk.com/forum.php&quot;; s=s.replace(/(.*/){0,}([^.]+).*/ig,&quot;$2&quot;) ;//Page1.htm (5)应用：利用正则表达式限制网页表单里的文本框输入内容 用正则表达式限制只能输入中文：onkeyup=&quot;value=value.replace(/[^u4E00-u9FA5]/g,&apos;) &quot;onbeforepaste=&quot;clipboardData.setData(&apos;text&apos;,clipboardData.getData(&apos;text&apos;).replace(/[^u4E00-u9FA5]/g,&apos;))&quot; 用正则表达式限制只能输入全角字符：onbeforepaste=&quot;clipboardData.setData(&apos;text&apos;,clipboardData.getData(&apos;text&apos;).replace(/[^uFF00-uFFFF]/g,&apos;))&quot; 用正则表达式限制只能输入数字：onkeyup=&quot;value=value.replace(/[^d]/g,&apos;) &quot;onbeforepaste= &quot;clipboardData.setData(&apos;text&apos;,clipboardData.getData(&apos;text&apos;).replace(/[^d]/g,&apos;))&quot; 用正则表达式限制只能输入数字和英文：onkeyup=&quot;value=value.replace(/[W]/g,&apos;) &quot;onbeforepaste=&quot;clipboardData.setData(&apos;text&apos;,clipboardData.getData(&apos;text&apos;).replace(/[^d]/g,&apos;","categories":[{"name":"正则re","slug":"正则re","permalink":"https://zhaojiafu.github.io/categories/%E6%AD%A3%E5%88%99re/"}],"tags":[{"name":"正则re","slug":"正则re","permalink":"https://zhaojiafu.github.io/tags/%E6%AD%A3%E5%88%99re/"}]},{"title":"xpath定位","slug":"2388954dd64ba012c026a6986161f10c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.872Z","comments":true,"path":"2019/12/02/2388954dd64ba012c026a6986161f10c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/2388954dd64ba012c026a6986161f10c/","excerpt":"","text":"xpath定位标签starts-with 顾名思义，匹配一个属性开始位置的关键字 contains 匹配一个属性值中包含的字符串 text()匹配的是显示文本信息，此处也可以用来做定位用 eg: //input[starts-with(@name,&apos;name1&apos;)] 查找name属性中开始位置包含&apos;name1&apos;关键字的页面元素 //input[contains(@name,&apos;na&apos;)] 查找name属性中包含na关键字的页面元素 &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度搜索&lt;/a&gt; xpath写法为 //a[text()=&apos;百度搜索&apos;] 或者 //a[contains(text(),&quot;百度搜索&quot;)] # 选取当前页面的下一页的a # /following-sibling::a[1] 代表当前节点的兄弟节点的下一个a标签 //div[@class=&quot;pages_bar&quot;]//a[@class=&quot;current_page&quot;]/following-sibling::a[1]/@href子节点和孙子节点定位：http://www.w3school.com.cn/xpath/xpath_axes.asp","categories":[{"name":"xpath定位","slug":"xpath定位","permalink":"https://zhaojiafu.github.io/categories/xpath%E5%AE%9A%E4%BD%8D/"}],"tags":[{"name":"xpath定位","slug":"xpath定位","permalink":"https://zhaojiafu.github.io/tags/xpath%E5%AE%9A%E4%BD%8D/"}]},{"title":"shell编程学习笔记之一--学习第六天Linux下使用tar 进行全备份和增量备份）","slug":"33d8d9afe3d414e1db1477175c984faf","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.416Z","comments":true,"path":"2019/12/02/33d8d9afe3d414e1db1477175c984faf/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/33d8d9afe3d414e1db1477175c984faf/","excerpt":"","text":"一、说明：打算从B站学习一下shell编程，从很多的课程视频中，挑选了一个：B站视频地址：打算开始学习着做着笔记：这个需要一些Linux基础，还有vim的，如果不太熟练，可以看下我之前的整理的俩个博客： 1、整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令） 2、Linux下vim/vi 编辑器 命令总结Linux下vim/vi 编辑器 命令总结 3、学习课件：这个地址我直接把B站中评论下方分享的弄出来了，如果失效，可以下方评论，我把我下载的分享给你。下载地址 4、之前的shell学习笔记：shell编程学习笔记之–学习第一天shell编程学习笔记之–学习第二天shell编程学习笔记之–学习第三天shell编程学习笔记之一–学习第四天shell编程学习笔记之一–学习第五天 二、实战演练（全备份和增量备份）这个地方我跟着视频看完了，但是有些地方没有懂，后来自己测试之后才懂，就是使用tar进行全备份和增量备份时候，-g后面跟的参数(可以理解备份文件的指纹信息)不一定放在tmp下，因为tmp和window的temp的目录差不多，就是临时文件，所以我猜想视频的讲解者也是习惯性的放在那个位置，注意后面跟的文件是这种：第二行的一串数字是时间戳和一些其他的内容，应该用来对比的。而且后面跟的文件也可以随意命名，不过一个目录备份要命名一样，主要就是根据命名文件中的时间戳进行增量备份和全备份的。 1GNU tar-1.26-221574926024^@94209664^@0^@1574925940^@517187692^@64769^@2515024^@test1^@N1^@N2^@N3^@N4^@N5^@Ya^@Yb^@Yc^@Yd^@Ye^@^@^@3~ 1、全局备份：第一步：生成一个测试文件创建一个目录和一些文件： 创建目录： 1$mkdir test1 创建5个文件 1$touch test1/&#123;1,2,3,4,5&#125; 查看创建的文件： 1$ll test1/2total 03-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 15:03 14-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 15:03 25-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 15:03 36-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 15:03 47-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 15:03 5 查看目前的文件：（可以看出目前只有一个test1目录） 1$ls2test1 第二步：tar备份压缩1$tar -g abcdefg -czvf backup_full.tar.gz test1/2tar: test1: Directory is new3test1/4test1/15test1/26test1/37test1/48test1/5 这个时候当前目录生成了俩个文件：一个是备份的压缩文件，一个就是我前面说的-g后面的参数文件，用来储存一个时间戳和其他信息的。 1$ls2abcdefg backup_full.tar.gz test1 第三步：查看压缩包里面的内容：1$tar ztf backup_full.tar.gz2test1/3test1/14test1/25test1/36test1/47test1/5 第四步：删除test1目录（模拟数据丢失）并恢复备份：删除，查看： 1$rm -rf test12$ls311backup.sh abcdefg backup_full.tar.gz 解压备份文件： 1$tar -zxvf backup_full.tar.gz2test1/3test1/14test1/25test1/36test1/47test1/5 查看恢复文件： 1$ls211backup.sh abcdefg backup_full.tar.gz test13$ll test1/4total 05-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 16-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 27-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 38-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 49-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 5 2、增量备份（不是接着删除后恢复的步骤）：这个就是在第一个基础上对新增加或者修改的文件进行增量备份（也可以理解为对修改的文件或者新增的文件单独备份），不是接着删除恢复的步骤。记得增量备份的压缩包要和全局备份不能一样，后面的每个全局备份也不能一样。 第一步：新增文件+修改之前的文件，模拟正常工作情况下的数据情况：新增文件： 1$touch test1/&#123;a,b,c,d,e&#125; 查看新增成功： 1$ll test1/2total 03-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 14-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 25-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 36-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 47-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:19 58-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:31 a9-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:31 b10-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:31 c11-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:31 d12-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:31 e 修改文件： 1$echo zhaojiafu &gt; test1/1 查看已经修改成功： 1$cat test1/12zhaojiafu 第二步：增量备份（数据不丢失情况下）：这个有一点需要注意：（如果之前备份的删掉，然后进行重新解压出来的，再次进行备份，会当成全局备份，tar命令会认为没有之前备份，估计和备份目录的文件修改时间戳有关，这个只是我的猜想那个指纹快照和这个需要备份创建的所有目录和文件的最后修改时间有关，感兴趣的可以在多了解了解，如果有人知道增量备份原理，欢迎下方赐教哈） 这个结果模拟数据不丢失情况下的增量备份。 1$tar -g abcdefg -zcvf backup_add1.tar.gz test1/2test1/3test1/14test1/a5test1/b6test1/c7test1/d8test1/e 从结果来看，新增的备份中只有修改的1文件和新增的a-e几个文件，原来的文件没有再次备份，达到了增量备份的效果。 3、如果结果第一步删除然后恢复的操作：如果结果第一步删除然后恢复的操作：会把所有文件再次备份（也就是全部备份，和第一个的全局备份没有什么区别，为什么会这样?我的猜想写道刚刚增量备份里面的第二步里面了，所有我后来又重新创建新的目录和文件，测试数据不丢失的情况下的增量备份。） 4、数据丢失的恢复：（接着第2增量备份）查看当前数据： 1$ls2abcdefg backup_add1.tar.gz backup_full.tar.gz test1 删除test1目录，模拟数据丢失： 1$rm -rf test1/2$ls3abcdefg backup_add1.tar.gz backup_full.tar.gz 准备数据恢复： 数据恢复一定要按时间顺序从早到后进行恢复（具体指先恢复第一次的全部备份，然后增量备份从先到后加压恢复，因为后面的修改文件可以覆盖前面的修改文件）比如我的解压恢复顺序： 解压恢复最初的全部备份 1$tar -zxvf backup_full.tar.gz2test1/3test1/14test1/25test1/36test1/47test1/5 解压后面更多的增量备份 1$tar -zxvf backup_add1.tar.gz2test1/3test1/14test1/a5test1/b6test1/c7test1/d8test1/e 当然实际工作中，肯定是还有更多的backup_add压缩文件，需要更多的tar -zxvf backup_add解压恢复命令。 到这里我也就理解了，为什么要用日期来进行增量备份的文件压缩名称了，这样更能方便根据顺序进行恢复，后续还需要每周或者每月的全局备份。 5、总结下我的理解全部备份和增量备份：第一个难点：（根据指纹信息来进行增量备份还是全部备份）单个周期的全部备份和增量备份，需要的指纹快照，也就是我例子中的-g后面跟的abcdefg文件，是否能够增量也是根据这个进行的。比如：我把abcdefg删除进行测试我的猜想。 先查看数据： 1$ll2total 163-rw-r--r-- 1 wb-zjf497303 users 111 Nov 28 16:58 abcdefg4-rw-r--r-- 1 wb-zjf497303 users 280 Nov 28 16:58 backup_add1.tar.gz5-rw-r--r-- 1 wb-zjf497303 users 231 Nov 28 16:54 backup_full.tar.gz6drwxr-xr-x 2 wb-zjf497303 users 4096 Nov 28 16:55 test1 1$ll test1/2total 43-rw-r--r-- 1 wb-zjf497303 users 10 Nov 28 16:55 14-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:54 25-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:54 36-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:54 47-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:54 58-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:55 a9-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:55 b10-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:55 c11-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:55 d12-rw-r--r-- 1 wb-zjf497303 users 0 Nov 28 16:55 e 1$rm -rf abcdefg 1$tar -g abcdefg -zcvf backup_full2.tar.gz test1/2tar: test1: Directory is new3test1/4test1/15test1/26test1/37test1/48test1/59test1/a10test1/b11test1/c12test1/d13test1/e 可以看出，因为之前的指纹（应该其他称呼，我这里就称之为指纹）被删除，所以这里再次进行压缩备份，就是全局备份，而不是之前的增量备份。这也就是我刚开始看到课件和视频，俩个代码不是一样么？为什么后面的命令就是变成增量备份了呐？直到我的一点点的摸索，发现就是和这个指纹信息有关。 第二个难点：（文件丢失后，解压恢复后的文件，再次进行备份肯定是全局备份）模仿文件丢失，进行删除test1目录时，虽然可以恢复文件都是和原来的一样，但是这时候指纹信息已经更改，所以再次按照增量备份命令，其实这时候已经变成全局备份了，（我的猜想是和每个文件和目录创建的时间还有关，因为恢复解压的文件可是和之前的文件创建时间戳肯定不一样，所以就认为指纹信息不符合所以进行的是全部备份。） 6、每周日进行一个备份，每日进行一个全局备份1、tar: Removing leading `/‘ from member names错误问题：跟着视频会改好代码之后会出现这个错误，然后需要修改参数，主要是tar主要使用相对路径，如果使用绝对路径，需要加个参数P，这个地方很重要。 这个主要问题视频中没有讲解，最终我找到了解决方法： 2、最终我修改可以的代码：记得自己新建一个存放指纹的目录，然后修改。后续的备份也是这个目录，比如我的代码中的设置目录为： 1TARGET_DIR=/home/temp/backup sh文件代码：我把我看懂的都讲解放到代码中了，如果有问题欢迎沟通一起讨论哈。 1#!/bin/bash2#Automatic Backup Linux System Files3#by Author zhaojiafu 2019-11-284#Define Variable567#1、需要备份的目录8SOURCE_DIR=(9$*10)11#2、备份到目标地址12TARGET_DIR=/home/temp/backup13#3、年14YEAR=`date +%Y`15#4、月16MONTH=`date +%m`17#5、日18DAY=`date +%d`19#6、周几20WEEK=`date +%u`21#7、时分 字符串 用来创建备份名称22A_NAME=`date +%H%M`23FILES=system_backup.tgz24CODE=$?2526#判断是否输入需要备份的目录地址参数27if [ -z \"$*\" ];then28 echo -e \"\\033[32mUsage:\\nPlease Enter Your Backup Files or Directories\\n--------------------------------------------\\n29 \\nUsage: &#123; $0 /boot /etc&#125;\\033[0m\"30 exit31fi3233#判断是否含有备份 年/月/日的文件夹，没有会创建34#Determine Whether the Target Directory Exists35if [ ! -d $TARGET_DIR/$YEAR/$MONTH/$DAY ];then36 mkdir -p $TARGET_DIR/$YEAR/$MONTH/$DAY37 echo -e \"\\033[32mThe $TARGET_DIR Created Successfully !\\033[0m\"38fi394041#全部备份（每周日）42#EXEC Full_Backup Function Command43Full_Backup()&#123;44 # 判断是否是周日，如果是周日，进行一个将之前的指纹信息删除，然后进入今天的目录下，创建新的全部备份45 if [ \"$WEEK\" -eq \"7\" ];then46 rm -rf $TARGET_DIR/snapshot47 cd $TARGET_DIR/$YEAR/$MONTH/$DAY ;48 tar -g $TARGET_DIR/snapshot -czvPf $FILES $&#123;SOURCE_DIR[@]&#125;49 [ \"$CODE\" == \"0\" ]&amp;&amp;echo -e \"--------------------------------------------\\n\\033[32mThese Full_Backup System Files Backup Successfully !\\033[0m\"5051 fi52&#125;535455#每天的增量备份56#Perform incremental BACKUP Function Command57Add_Backup()&#123;58 #判断是否是周日，如果不是周日就直接进入今天（系统tr日期的今天）的目录，进行一个增量备份（这个没有删除指纹操作）59 echo $WEEK60 if [ $WEEK -ne \"7\" ];then61 cd $TARGET_DIR/$YEAR/$MONTH/$DAY62 tar -g $TARGET_DIR/snapshot -czvPf $A_NAME$FILES $&#123;SOURCE_DIR[@]&#125;63 [ \"$CODE\" == \"0\" ] &amp;&amp; echo -e \"-----------------------------------------\\n\\033[32mThese Add_Backup System Files $TARGET_DIR/$YEAR/$MONTH/$DAY/$&#123;YEAR&#125;_$A_NAME$FILES Backup Successfully !\\033[0m\"64 fi65&#125;66sleep 367Full_Backup;Add_Backup 最终运行来个简单示例： 比如第一次备份，全局备份 1$sh 11backup.sh /home/zjf/shell_study/day01/243tar: /home/zjf/shell_study/day01: Directory is new4/home/zjf/shell_study/day01/5/home/zjf/shell_study/day01/first_shell.sh6/home/zjf/shell_study/day01/first_shell2.sh7/home/zjf/shell_study/day01/if_is_dir.sh8/home/zjf/shell_study/day01/if_text.sh9/home/zjf/shell_study/day01/is_file.sh10/home/zjf/shell_study/day01/score.sh11/home/zjf/shell_study/day01/test.txt12/home/zjf/shell_study/day01/var.sh13/home/zjf/shell_study/day01/var2.sh14-----------------------------------------15These Add_Backup System Files /home/zjf/temp/backup/2019/11/28/2019_1853system_backup.tgz Backup Successfully ! 新增加入几个文件 1$touch ../day01/&#123;1,2,3&#125; 再次备份效果 1$sh 11backup.sh /home/zjf/shell_study/day01/243/home/zjf/shell_study/day01/4/home/zjf/shell_study/day01/15/home/zjf/shell_study/day01/26/home/zjf/shell_study/day01/37-----------------------------------------8These Add_Backup System Files /home/zjf/temp/backup/2019/11/28/2019_1854system_backup.tgz Backup Successfully ! 好了，完美结束，虽然今天就学习了这一个知识点，虽说学的不多，但是我觉得学会才是第一位，不聪明就多努力吧，加油！！！","categories":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/categories/shell%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/tags/shell%E7%BC%96%E7%A8%8B/"}]},{"title":"正则匹配文本时几个很重要的用法","slug":"23cc1f4e231565a91732a7296a1f8188","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.183Z","comments":true,"path":"2019/12/02/23cc1f4e231565a91732a7296a1f8188/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/23cc1f4e231565a91732a7296a1f8188/","excerpt":"","text":"1、除了：比如，除了数字都匹配： 1'[^\\d]' 解释，\\d代表数字，前面带个^就是代表除了后面的字符。 2、中文：这个能匹配任意一个中文汉字 1'[\\u4e00-\\u9fa5]' 使用场所，如果需要提取一个文本中的汉字，可以使用。 3、匹配中文和中文标点符号：能匹配任意一个中文汉字或者标点符号。 1'[^\\x00-\\xff]' 如果需要匹配一个文章，我只要中文和中文标点符号，可以使用。","categories":[{"name":"正则re","slug":"正则re","permalink":"https://zhaojiafu.github.io/categories/%E6%AD%A3%E5%88%99re/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/tags/python/"},{"name":"正则re","slug":"正则re","permalink":"https://zhaojiafu.github.io/tags/%E6%AD%A3%E5%88%99re/"}]},{"title":"requests模块之InsecureRequestWarning警告","slug":"26c4c37f17e557963f4fdcfa553d7d93","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.960Z","comments":true,"path":"2019/12/02/26c4c37f17e557963f4fdcfa553d7d93/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/26c4c37f17e557963f4fdcfa553d7d93/","excerpt":"","text":"## 解决问题：requests请求出现警告：InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. 解决步骤：1、加入verify=False参数：具体如： response = requests.get(url=url,headers=headers, proxies=proxies,verify=False)2、关闭安全警告：这个可以防止代码的前面 from requests.packages.urllib3.exceptions import InsecureRequestWarning #关闭安全请求警告 requests.packages.urllib3.disable_warnings(InsecureRequestWarning)","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"python requests","slug":"python-requests","permalink":"https://zhaojiafu.github.io/tags/python-requests/"}]},{"title":"python selenium Chrome 添加代理ip最全俩种方式(无密码+有秘密)","slug":"3330d17b38a99c686c71848c8c11c17c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.897Z","comments":true,"path":"2019/12/02/3330d17b38a99c686c71848c8c11c17c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/3330d17b38a99c686c71848c8c11c17c/","excerpt":"","text":"说明：今天需要使用selenium测试一下携带含有账号+密码的代理ip，以为和无密码一样简单，但是弄了好久（将近3个小时吧。。。）最后看了很多博客，谷歌百度什么都搜索，最终找到了比较好用的方法，所以呀，有时间遇到问题真的是需要耐心的去找资源，不会就学嘛，肯定有人会，不会搜索，慢慢搜，肯定能找到，如果你正好需要，并且看到我的这个，恭喜你，不用再折磨自己了，我找的都快看了二三十个博客了。。。。 1、无密码（ip+port）：这个是我很久之前看到的，这个添加代理ip,比较简单，一起整理写出来吧，直接把代码复制过来，需要的可以直接复制，改下代理ip就可以用了。 import time from selenium import webdriver chromeOptions = webdriver.ChromeOptions() # 设置代理 chromeOptions.add_argument(&quot;--proxy-server=http://ip:port&quot;) # 一定要注意，=两边不能有空格，不能是这样--proxy-server = http://202.20.16.82:10152 browser = webdriver.Chrome(chrome_options=chromeOptions) # 查看本机ip，查看代理是否起作用 browser.get(&quot;https://www.baidu.com/&quot;) time.sleep(20) print(browser.page_source) # 退出，清除浏览器缓存 browser.quit()2、有账号和密码的代理ip(这个就是我花了几个小时找到一个不错的)直接把代理复制过来吧，需要的自己拿去用吧 import string import zipfile from selenium import webdriver # 代理服务器（ip+port） proxyHost = &quot;ip&quot; proxyPort = &quot;port&quot; # 代理隧道验证信息（账号+密码） proxyUser = &quot;user&quot; proxyPass = &quot;password&quot; def create_proxy_auth_extension(proxy_host, proxy_port, proxy_username, proxy_password, scheme=&apos;http&apos;, plugin_path=None): if plugin_path is None: plugin_path = r&apos;{}_{}@http-dyn.dobel.com_9020.zip&apos;.format(proxy_username, proxy_password) manifest_json = &quot;&quot;&quot; { &quot;version&quot;: &quot;1.0.0&quot;, &quot;manifest_version&quot;: 2, &quot;name&quot;: &quot;Dobel Proxy&quot;, &quot;permissions&quot;: [ &quot;proxy&quot;, &quot;tabs&quot;, &quot;unlimitedStorage&quot;, &quot;storage&quot;, &quot;&lt;all_urls&gt;&quot;, &quot;webRequest&quot;, &quot;webRequestBlocking&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [&quot;background.js&quot;] }, &quot;minimum_chrome_version&quot;:&quot;22.0.0&quot; } &quot;&quot;&quot; background_js = string.Template( &quot;&quot;&quot; var config = { mode: &quot;fixed_servers&quot;, rules: { singleProxy: { scheme: &quot;${scheme}&quot;, host: &quot;${host}&quot;, port: parseInt(${port}) }, bypassList: [&quot;foobar.com&quot;] } }; chrome.proxy.settings.set({value: config, scope: &quot;regular&quot;}, function() {}); function callbackFn(details) { return { authCredentials: { username: &quot;${username}&quot;, password: &quot;${password}&quot; } }; } chrome.webRequest.onAuthRequired.addListener( callbackFn, {urls: [&quot;&lt;all_urls&gt;&quot;]}, [&apos;blocking&apos;] ); &quot;&quot;&quot; ).substitute( host=proxy_host, port=proxy_port, username=proxy_username, password=proxy_password, scheme=scheme, ) with zipfile.ZipFile(plugin_path, &apos;w&apos;) as zp: zp.writestr(&quot;manifest.json&quot;, manifest_json) zp.writestr(&quot;background.js&quot;, background_js) return plugin_path proxy_auth_plugin_path = create_proxy_auth_extension( proxy_host=proxyHost, proxy_port=proxyPort, proxy_username=proxyUser, proxy_password=proxyPass) option = webdriver.ChromeOptions() # option.add_argument(&apos;--no-sandbox&apos;) # option.add_argument(&apos;--disable-gpu&apos;) # option.add_argument(&quot;--start-maximized&quot;) option.add_extension(proxy_auth_plugin_path) # drive = webdriver.Chrome(executable_path=&quot;../../config/chromedriver_mac&quot;,chrome_options=option) drive = webdriver.Chrome(chrome_options=option) # drive.get(&quot;http://httpbin.org/ip&quot;) drive.get(&quot;https://www.baidu.com/&quot;) print(drive.page_source) # drive.close()注意：substitute方法其实就是字符串拼接的方法，甚至你换成format方法拼接都可以的。 3、对2需要进行了小小的优化（推荐直接使用）：import string import zipfile from selenium import webdriver def create_proxy_auth_extension(proxy_host, proxy_port, proxy_username, proxy_password, scheme=&apos;http&apos;, plugin_path=None): if plugin_path is None: plugin_path = r&apos;{}_{}@http-dyn.dobel.com_9020.zip&apos;.format(proxy_username, proxy_password) manifest_json = &quot;&quot;&quot; { &quot;version&quot;: &quot;1.0.0&quot;, &quot;manifest_version&quot;: 2, &quot;name&quot;: &quot;Dobel Proxy&quot;, &quot;permissions&quot;: [ &quot;proxy&quot;, &quot;tabs&quot;, &quot;unlimitedStorage&quot;, &quot;storage&quot;, &quot;&lt;all_urls&gt;&quot;, &quot;webRequest&quot;, &quot;webRequestBlocking&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [&quot;background.js&quot;] }, &quot;minimum_chrome_version&quot;:&quot;22.0.0&quot; } &quot;&quot;&quot; background_js = string.Template( &quot;&quot;&quot; var config = { mode: &quot;fixed_servers&quot;, rules: { singleProxy: { scheme: &quot;${scheme}&quot;, host: &quot;${host}&quot;, port: parseInt(${port}) }, bypassList: [&quot;foobar.com&quot;] } }; chrome.proxy.settings.set({value: config, scope: &quot;regular&quot;}, function() {}); function callbackFn(details) { return { authCredentials: { username: &quot;${username}&quot;, password: &quot;${password}&quot; } }; } chrome.webRequest.onAuthRequired.addListener( callbackFn, {urls: [&quot;&lt;all_urls&gt;&quot;]}, [&apos;blocking&apos;] ); &quot;&quot;&quot; ).substitute( host=proxy_host, port=proxy_port, username=proxy_username, password=proxy_password, scheme=scheme, ) with zipfile.ZipFile(plugin_path, &apos;w&apos;) as zp: zp.writestr(&quot;manifest.json&quot;, manifest_json) zp.writestr(&quot;background.js&quot;, background_js) return plugin_path def from_proxy_get_daili(proxy): # proxy是这种格式 user:pass@ip:port user_pass_str, ip_port_str = proxy.split(&apos;@&apos;) proxyHost, proxyPort = ip_port_str.split(&apos;:&apos;) proxyUser, proxyPass = user_pass_str.split(&apos;:&apos;) return proxyHost, proxyPort, proxyUser, proxyPass def get_driver(proxy): proxyHost, proxyPort, proxyUser, proxyPass = from_proxy_get_daili(proxy) proxy_auth_plugin_path = create_proxy_auth_extension( proxy_host=proxyHost, proxy_port=proxyPort, proxy_username=proxyUser, proxy_password=proxyPass) option = webdriver.ChromeOptions() option.add_extension(proxy_auth_plugin_path) drive = webdriver.Chrome(chrome_options=option) return drive if __name__ == &apos;__main__&apos;: # 代理服务器 proxy = &apos;user:pass@ip:port&apos; drive = get_driver(proxy) # drive.get(&quot;http://httpbin.org/ip&quot;) print(drive.page_source)改进之后，直接传入一个正常的有密码的代理proxy （格式： ‘user:pass@ip:port’），这个样返回一个浏览器对象driver，直接使用即可，不用再把代理一个一个进行分开复制使用。 找资源真的很累人，感觉这个博主。有秘密的原博客：https://blog.csdn.net/ywdhzxf/article/details/83211631","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"},{"name":"代理ip","slug":"代理ip","permalink":"https://zhaojiafu.github.io/tags/%E4%BB%A3%E7%90%86ip/"}]},{"title":"分享一些珍藏和网上搜集的一些接码平台","slug":"22d06195deff01b416993b503696c160","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:53.007Z","comments":true,"path":"2019/12/02/22d06195deff01b416993b503696c160/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/22d06195deff01b416993b503696c160/","excerpt":"","text":"1、国内在线短信接码平台 网站名称 网址 简单描述 云短信 https://sms.cm/ 国家非常多，有 8 个中国号码，还有美、英、法、加拿大、瑞典、菲律宾、西班牙、以色列、罗马尼亚、克罗地亚、南非、俄罗斯、马里 云短信 https://www.pdflibr.com/ 应该是最早做国内手机在线短信接收的，最初只有中国号码，现在拥有中国（24 个）、美国（2个）、英国和菲律宾各一个号码 免费接收短信 http://www.smszk.com/ 有 12 个国内电话 在线接收短信 https://www.becmd.com/ 有 11 个国内电话和 3 个美国电话 在线短信接收 http://www.114sim.com 有十几个国内电话，几个美国电话和一个英国电话 来读取 https://www.laiduqu.com 有十几个国内电话，变成了游客短信 游客短信 https://www.visitorsms.com 号码挺多，有3 个英国，3 个罗马尼亚，3 个法国，和 8 个国内号码 成米短信 http://35cm.com/sms 目前只有一个国内号码，凉了 云短信 https://yunduanxin.net/ 中、美、加、英、法、德、比利时、奥地利、瑞典、波兰、菲律宾 Z-SMS https://www.z-sms.com 有十几个中国号码，还有美国，缅甸，5 个爱沙尼亚 2、国外(国际)在线短信接码平台 网站名称 网址 简单描述 SMSReceiveFree https://smsreceivefree.com/ 需要邮箱注册账号，提供非常多的美国和加拿大电话号码，号码每月刷新一次，接收到的短信七天后删除 Receive SMS Online for FREE https://www.receive-sms-online.info/ 国家很多，提供美、英、法、罗马尼亚、以色列、奥地利、荷兰、俄罗斯、南非、西班牙、波兰、德国、克罗地亚等国号码，基本上每个国家一个号码 Receive a SMS Online https://receive-a-sms.com 提供美、英、法、德、加拿大、瑞典、巴西、比利时、西班牙、捷克、马来西亚、以色列、澳大利亚、波兰等过电话号码 Free SMS Numbers Online https://smsnumbersonline.com 经常更新号码，提供美、英、法、加拿大、比利时、波兰等地号码，部分号码可以接收语音 FREESMSCODE https://freesmscode.com 和上面的应该是同一家，部分号码可以接收语音 CatchSMS https://catchsms.com 和上面的应该是同一家，部分号码可以接收语音 SMS Receive https://smsreceiveonline.com 和上面的应该是同一家，部分号码可以接收语音 SMS Listen https://smslisten.com 和上面的应该是同一家，部分号码可以接收语音 Free SMS Code https://freesmscode.com 和上面的应该是同一家，部分号码可以接收语音 SMSTibo https://smstibo.com 和上面的应该是同一家，部分号码可以接收语音 Receive SMS online for Free https://sms-online.co/receive-free-sms 提供美、英、法、加拿大、波多黎各、马来西亚、印度尼西亚、瑞典等国号码 Receive-SMS https://receive-sms.com 提供四个美国电话，可以订阅邮件，在号码更新时收到通知 Receive FREE SMS online http://receivefreesms.com 提供美、英、法、加拿大、瑞士、巴西、俄罗斯、瑞典、印度尼西亚、德国、以色列、澳大利亚、香港等地区号码 RECEIVE SMS ONLINE https://www.receivesmsonline.net 提供美、英、加共 5 个号码 Free Online Phone https://www.freeonlinephone.org 提供美、英、加、瑞典共 6 个号码，和上面的是同一家 mytrashmobile https://zh.mytrashmobile.com 全中文，提供美、英、加、南非、意大利、香港等地区共 6 个号码 FreePhoneNum https://ch.freephonenum.com 中文，提供 10 个美国和 2 个加拿大号码，每天可以免费发送 10 条短信！ Receive SMS Online http://receive-sms-online.com 提供英国、南斯拉夫等地共 8 个号码 Receive Online SMS http://receiveonlinesms.com 提供美、英、挪威、西班牙等地共 6 个号码 ReceiveSMS https://www.receivesms.co 提供来自美、奥地利、比利时、加拿大、瑞士、丹麦、西班牙、法国、意大利、拉脱维亚、波兰、葡萄牙、瑞典等 14 个国家 56 个号码 Receive SMS Online Free Verification http://receivesmsverification.com 提供美、英、比利时等地共 4 个号码 Receive Online SMS http://receiveonlinesms.biz 提供美、英、瑞典、西班牙、澳大利亚等地共 5 个号码 Receive Free SMS http://receivefreesms.net 提供美、英、加、瑞典等地共 6 个号码 Receive SMS Online http://receivesmsonline.in 提供美、英、加、瑞典等地共 7 个号码 Receive-SMS-Now http://www.receive-sms-now.com 提供美、英、荷兰等地共 5 个号码 SMS-Receive https://sms-receive.net 提供德国、俄罗斯、英国、罗马尼亚、法国、西班牙等国共 10 个号码 ReceiveSMS https://www.receivesms.net 提供 2 个俄罗斯号码 Receive Free SMS &amp; Text Online http://www.freesmsverifications.com 提供美、英、法、波多黎各、印度尼西亚、波兰、韩国共 12 个号码 SELLAITE http://sms.sellaite.com/ 提供爱沙尼亚的 6 个号码，部分可以接语音 3、其他地方搜集的接码和打平台TW平台注册http://thewolf.dk827.com/芒果平台:http://www.mangopt.com:9000/reg.html吸皇码注册http://www.ximahuang.com/register壹号平台:http://120.79.72.149:9000/oszc.html多米平台:http://t.cn/E7Q6VV3速码:http://www.eobzzcom鲨鱼平台:http://120.78.91.0/oszc.html星辰:http://xingchenma.com:9000/云享平台:http://www.yzh-soft.com:9000/oszc.html蚂蚁平台:http://www.66yzm.com/火云平台:http://47.94.137.238/download.php神话平台:http://115.28.184.182:8000/号码短租注册http://121.41.61.159:8888/极速平台:http://www.js-yzm.com:9000/oszc.html极安打码:http://35.236.167.165/register极验打码:http://jiyan.c2567.com/index.php/login/index.html极速打码:http://www.sou.cn/99滑块平台:http://www.99dama.vip:66/console.php 4、再次提醒不用用来注册和验证重要信息 在使用前，你应该知晓上面的接码平台的所有短信内容任何人都可以查看。请不要用这些电话号码接收重要内容，应当只用于注册一些网站，防止被骚扰！他人可以通过此电话号码找回密码，所以注册时应注意个人信息。 如果不想因为注册网站账号而被骚扰，可以使用备用号码，或者类似与蚂蚁小号等虚拟号，如果注册时有个人隐私，也可以使用一些付费接码平台；对于注册国外网站，拥有一个 Google Voice 是一个非常好的建议。","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}]},{"title":"爬虫InsecureRequestWarning警告处理","slug":"281afe57e3281529e9e2702c69d854e0","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.662Z","comments":true,"path":"2019/12/02/281afe57e3281529e9e2702c69d854e0/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/281afe57e3281529e9e2702c69d854e0/","excerpt":"","text":"将request请求设置verify=False时，如下面，会出现下面的警告错误，response = requests.get(url=url, headers=headers, verify=False) InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings InsecureRequestWarning)解决方法：在导入模块的前面设置下面俩句就解决这个警告了。 from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning)可以参考下面链接看看具体原因，我没有很研究这个。https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"俩文件夹去重","slug":"27a2394982d87dfbe373b3bf8307e2c3","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.594Z","comments":true,"path":"2019/12/02/27a2394982d87dfbe373b3bf8307e2c3/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/27a2394982d87dfbe373b3bf8307e2c3/","excerpt":"","text":"# 俩文件夹去重（根据一个文件夹对另一个文件夹含有这个文件夹中的文件进行去重）我的需要是将另一个文件夹中重复的进行删除。因为量大，合并较慢，所以用python代码写一个进行去重。 代码：import os import time def remove_repetition(old_path,new_path): print(1) print(os.getcwd()) os.chdir(old_path) print(2, os.getcwd()) same_key = [] print(&apos;\\n&apos;) print(os.listdir()) # print(type(os.listdir()),len(os.listdir())) # 获取已经存在的key key_list = iter(os.listdir()) # 切换到需要检查的是否重复的key目录： os.chdir(new_path) # 去重 for key in key_list: is_exist = os.path.isfile(key) print(is_exist) if is_exist: same_key.append(key) os.remove(key) # 输出去重的命名 print(&apos;over&apos;, same_key) print(&apos;same_key&apos;, len(same_key)) if __name__ == &apos;__main__&apos;: start_time = time.time() # 已经保存的文件文件夹 old_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\百度isbn-json-非selenium4&apos; # 未保存（需要去重的文件） new_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\百度isbn-json-非selenium5&apos; remove_repetition(old_path=old_path,new_path=new_path) end_time = time.time() print(end_time-start_time, &apos;秒&apos;)有更好的方法，提高效率的还请不吝赐教哈。","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"俩文件夹去重","slug":"俩文件夹去重","permalink":"https://zhaojiafu.github.io/tags/%E4%BF%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8E%BB%E9%87%8D/"}]},{"title":"Python base64加密解密","slug":"296a58f67162878c886a9ad01a149bf6","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.623Z","comments":true,"path":"2019/12/02/296a58f67162878c886a9ad01a149bf6/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/296a58f67162878c886a9ad01a149bf6/","excerpt":"","text":"简单应用下，日后需要再完善。简单例子： import base64 # base64加密 str_a = &apos;Python base64模块&apos; b = base64.b64encode(str_a.encode()) # 传入的是字节，需要encode（）编码，不然报错TypeError: a bytes-like object is required, not &apos;str&apos; print(b,type(b)) print(b.decode()) # base64解密 c= base64.b64decode(b) print(c,type(c)) print(c.decode())","categories":[{"name":"python base64","slug":"python-base64","permalink":"https://zhaojiafu.github.io/categories/python-base64/"}],"tags":[{"name":"python base64","slug":"python-base64","permalink":"https://zhaojiafu.github.io/tags/python-base64/"}]},{"title":"python的copy模块之deepcopy（深拷贝）和copy（也称之为shallow copy浅拷贝）","slug":"615ebf68260a8b564bb0fd673ab7aea6","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.906Z","comments":true,"path":"2019/12/02/615ebf68260a8b564bb0fd673ab7aea6/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/615ebf68260a8b564bb0fd673ab7aea6/","excerpt":"","text":"说明：今天看到一个小题，然后就好奇的做了一下。 问题： 有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？ 问题解决：代码： 我这里使用的是copy，但是发现使用copy和deepcopy，num_list2 的改变，num_list1都不会改变，结果都是一样的。所以我就好奇，为什么会这样？我记得好像浅copy下，num_list1浅会随着num_list2 的改变而改变；深copy不会改变，而是复制一份，现在怎么都是像复制一份？我带着心中的疑惑，接着往下尝试，测试 1import copy23num_result_list = []4num_list1 = [1, 2, 3, 4]5for i in num_list1:6 # num_list2 = copy.copy(num_list1)7 num_list2 = copy.deepcopy(num_list1)8 num_list2.remove(i)9 print(\"copy\",num_list2,num_list1)10 for j in num_list2:11 num_list3 = copy.deepcopy(num_list2)12 num_list3.remove(j)13 # print(i,j)14 for k in num_list3:15 num_result = i * 100 + j * 10 + k16 print('num_result',num_result)17 num_result_list.append(num_result)1819print(\"num_result_list\",len(num_result_list)) 1、num_list1列表中为不可变元素：测试深浅拷贝的区别： 仔细测试一下，二者的区别： 1import copy2num_list1 = [1, 2, 3, 4]34# num_list2 = copy.deepcopy(num_list1)5num_list2 = copy.copy(num_list1)6num_list1[2] = 117num_list2.append([1,2])8num_list1.append([55])9num_list2[2] = 2210print(num_list2, num_list1)11print(id(num_list2),id(num_list1))12# deepcopy13# [1, 2, 22, 4, [1, 2]] [1, 2, 11, 4, [55]]14# 1858350757192 185835075725615# copy16# [1, 2, 22, 4, [1, 2]] [1, 2, 11, 4, [55]]17# 2650286536008 2650286536072 最后如果num_list1 的元素都是不可变类型情况下，copy和deepcopy是一样的。 2、num_list1列表中有可变元素：num_list1中还有一个可变的元素设为list，然后测试copy和deepcopy的区别： 12import copy34num_list1 = [1, 2, 3, 4,[5,6]]5# num_list2 = copy.deepcopy(num_list1)6num_list2 = copy.copy(num_list1)7num_list1[4][0] = 118num_list2.append([1,2])9num_list2[4][0] = 2210num_list1.append([55])11print(num_list2,num_list1)12print(id(num_list2),id(num_list1))1314# deepcopy15# [1, 2, 3, 4, [22, 6], [1, 2]] [1, 2, 3, 4, [11, 6], [55]]16# 1872840451720 187284043911217# copy18# [1, 2, 3, 4, [22, 6], [1, 2]] [1, 2, 3, 4, [22, 6], [55]]19# 1517600138824 1517600126280 3、总结 深拷贝deepcopy相当于复制一份，浅拷贝copy相当于引用，但是id都不相同。 如果改变的是第一层不可变元素，则赋值的（num_list2）和被赋值的（num_list1）俩者改变都不会影响另一个结果。 如果改变的除第一层可变元素中的其他元素（大于第一层）：深拷贝下，则赋值的（num_list2）和被赋值的（num_list1）俩者改变都不会影响另一个结果；浅拷贝下，则赋值的（num_list2）和被赋值的（num_list1）俩者改变都会影响另一个结果，都会改变最终的结果。","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"深拷贝浅拷贝","slug":"深拷贝浅拷贝","permalink":"https://zhaojiafu.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"}]},{"title":"Linux 系统查看磁盘与文件夹大小命令","slug":"f86f35dece6d7496e6cbc13b7dfa1549","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.118Z","comments":true,"path":"2019/12/02/f86f35dece6d7496e6cbc13b7dfa1549/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/f86f35dece6d7496e6cbc13b7dfa1549/","excerpt":"","text":"两个命令df 、du结合比较直观 df -h 查看整台服务器的硬盘使用情况 cd / 进入根目录 du -sh * 查看每个文件夹的大小 du -h * 查看每个文件夹的大小 du -h “文件名” 查看这个“文件名”的大小 du -lh –max-depth=1 : 查看当前目录下一级子文件和子目录占用的磁盘容量。 这样的组合可以快速定位大文件和分区满了 可以参考：https://blog.csdn.net/matrix_laboratory/article/details/47007501","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"HTML对于一些特殊转义字符&#x的去脏处理。","slug":"341a3f2bb65f6520121e55017d1cf338","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.860Z","comments":true,"path":"2019/12/02/341a3f2bb65f6520121e55017d1cf338/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/341a3f2bb65f6520121e55017d1cf338/","excerpt":"","text":"问题：爬取一些网站的时候，有时候我们会遇到一些比较特殊的字符，比如我这次遇到了很多&amp;#x0A;，折些可有直接进行替换为空，但是有时候会有影响，查找他的准备定义，原来就是换成符，可以直接替换为python的\\n,这样就不会会好很多了。 一些&amp;#开头的特殊符号：找到的一些特殊转义字符，记下来方便后续需要使用。 1空格 (&amp;#x20;)2Tab (&amp;#x09;)3回车 (&amp;#x0D;)4换行 (&amp;#x0A;)5单撇号 (&amp;apos;)还要加上双引号才能生效“&amp;apos;”6省略号 \"&amp;#8230;\"7双引号\\\" 内容 \\\" 处理：比如我的这些是这种的。： 1str = \" 十一没有去凑热闹感觉亏待了家里的小朋友，十一后和闺蜜结伴一起溜娃拉&amp;#x0A;&amp;#x0A;网红溜娃圣地，怕订不到房间，提前一个月通过某APP预定了。一共入住了2天，一天入住的豪园景房，第二天是亲子别墅，房间基本都是独立的，出入都需要短驳车，很有世外桃源的感觉~~房间里的设施很齐全，也比较干净，有任何问题找前台基本能够快速得到反馈并解决~十月份的天气还好小虫子已经不是特别多了~真的是环境优美空气新鲜的好地方~三天两夜过的超级惬意。特别要说的是早餐~品种很多很多，有专门的儿童区，虽然地方挺大但是还算井然有序。&amp;#x0A;&amp;#x0A;溜娃设施也很多，定的2个套餐，第一天去了幻想岛，真的是太大太大的游乐场了，在上海还没看到过这么大的游乐场，从小宝宝玩的到大孩子玩的设施应有尽有，去的时候人比较少，娃玩的非常尽兴，要是卫生情况能做的更好就更加分了。&amp;#x0A;&amp;#x0A;第二天去了水上世界，10月的天气室外已经不开放了，室内是恒温30度，没有觉得很冷哦~对于我们2岁的娃来说也已经很够玩了，毕竟很多设施都上不去，在泳池里戏戏水就满开心哒&amp;#x0A;&amp;#x0A;芙拉花园里有勇敢者道路，滑滑梯，喂羊驼，度假村内还有游戏机房，而且还蛮适合小朋友的，还有很多很多小心思的亲子设施,假期里价格真心蛮贵的，推荐大家周中连周末去~真的是炒鸡亲子的度假村了。\" 直接进行替换即可，如果含有多种特殊转移字符，可以整理的列表遍历替换即可。 1str = str.replace(\"&amp;#x0A;\",\"\\n\")","categories":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/tags/python/"}]},{"title":"全球60个线上学习资源网站分享！","slug":"f7d23ae6d6ae4617cf5a46e1b6180074","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.762Z","comments":true,"path":"2019/12/02/f7d23ae6d6ae4617cf5a46e1b6180074/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/f7d23ae6d6ae4617cf5a46e1b6180074/","excerpt":"","text":"说明，这个我没有把网站都复制出来，自己可以谷歌搜索，基本上第一个结果出来就是的。我看到这个觉得不错，就整理一下分享到博客里面，觉得需要的可以看看，日后自己需要也方便寻找。觉得有帮助，可以给我点个赞O(∩_∩)O哈哈~ 如果你不能访问谷歌的话，可以使用下面俩个搜索引擎网站，这俩个也是我经常用的，分享出来。镜像网站(推荐收藏)谷歌镜像2(推荐收藏)秘籍搜索：(推荐收藏) 1、网页设计类HOW Design University — 主要提供图像与交互设计的学习。 HTML Dog — 学习 HTML, CSS 和 JavaScript 编程技能。 Skillcrush — 提供职业网页设计与开发课程。 Hack Design — 全球顶级设计师教你网页/app设计，完全免费。2、软件开发类Udacity — 职业编程学习的不二之选，提供微学位。 Apple Developer Site — 学习开发 IOS、Mac OS、Safari 环境下的app. Google Code — 学习开发安卓app. Code.org — 编程一小时活动的大本营。想学编程？就从这里起步吧。 Mozilla Developer Network — 不要被名字骗了，不是教你开发火狐插件。你可以学习 HTML, CSS 和JavaScript。 Learnable — 也是学编程，超过5000个视频。 Pluralsight — 学编程（技术盲分不出这些网站有什么区别和特色已经哭了） CodeHS — 在学校、在家学编程！ Aquent Gymnasium — 学编程。3、 语言类Duolingo - 中文名「多邻国」，据说学习方式非常有效。我感觉它的app设计得不错。主要推荐英语和别的欧洲语言。 沪江 - 中国学习者最熟悉的网站应该就是沪江啦。沪江上有丰富的语言学习资源，包括教材、电影、电视剧、新闻阅读、电子书等，对主要语言考试的介绍也很齐全。 Memrise - Memrise 的教程由许多简短的课程组成，比如日语五十音、德语基础、SAT备考等。用游戏化的概念学习语言。 Busuu - Busuu 主要通过记常用词汇和常用语来学习，有一些简单的填空练习，课程设置比较合理。 Lingua.ly - Lingua.ly 的主要功能就是阅读文章、学习词汇和练习。 lernu.net - 在多邻国的世界语课程出来之前，这应该是学习世界语最好的网站了吧。不过，它除了课程以外还有一个挺好玩的社区，和一些阅读材料。 Lingvist - 号称在200小时内让你学会一门语言。 vocabulary.com - 用例句和游戏化背单词。(应用商店有对应的APP)4、大学课程类edX — 免费学习来自全球顶尖大学（包括MIT和哈佛大学）的课程，提供付费的认证证书。 Coursera — 免费学习来自全球20多个国家100多所顶尖大学的课程，有提供认证证书的专项课程，由浅入深系统学习一个领域。 MIT Open Courseware — 创建于2002年，免费提供几乎所有MIT课程的完整材料。 Open Yale Courses — 提供耶鲁大学的课程，既有传统的网络公开课，也有MOOC。 Open Learning Initiative—卡耐基梅隆大学的一个开放学习计划。 Khan Academy — 可汗学院，最早的线上学习网站之一，内容丰富，适合任何年纪的学习者。 MIT Video — 提供超过12,000 个讲座/视频，涵盖数学、建筑、艺术、化学、生物、人文社科、物理等领域。 Stanford Online — 斯坦福大学的线上学习平台。 Harvard Extension School: Open Learning Initiative — 哈佛大学的线上课程视频精选。 Canvas Network — 又一个MOOC平台。 Quantum Physics Made Relatively Simple — 理论物理学家Hans Bethe向你介绍量子物理学。 Open UW — 华盛顿大学的线上课程资源。 UC San Diego Podcast Lectures — 圣地亚哥大学的视频、音频资源。 University of the People — 这是一间免学费的线上大学。 NovoEd — 学习NovoEd的课程，成为未来的领袖！5、艺术与音乐类Dave Conservatoire — 一个完全免费的音乐学习网站，口号是“让每一个人都可以接受世界级的音乐教育”，有视频，有练习。 Drawspace — 如果你想学习绘画，或者提高自己的绘画技能，就来Drawspace吧。 Justin Guitar — 超过800节免费的吉他课程，有自己的app，还有电子书、DVD等实用内容。 # 6、数学，数据科学与工程 Codecademy — Codecademy还用多介绍吗？学编程，来Codeacademy就对了。 Stanford Engineering Everywhere — 有很多免费的工程类课程资源。 Big Data University — 教你如何做大数据分析。 Better Explained — 从整体图景着手，通过图像向你解释抽象的数学（还有其他领域）概念。7、综合类MOOC学院—各种实用课程（职业技能，心理学，生命科学等等），演讲等 Scratch – Imagine, Program, Share — 为小孩子设计，通过游戏学编程。 Udemy — 通过教学视频教你生活和工作中的实用技能，需要付费。 E-learning for kids — 向5-12岁的儿童提供小学程度基础课程。 Ed2go — 又一个学习技能的线上课程网站，主要面向成年人。 GCF Learn Free — 由 Goodwill Community Foundation 和 Goodwill Industries 创办，教授实用技能。 Stack Exchange — 嘿！一个类似果壳问答的超赞的问答网站，回答质量都超级高。 HippoCampus — 主要面向中学生。 Howcast — 通过视频学习日常生活小技能。 Memrise — 用游戏化的概念学习语言。 SchoolTube — 面向中小学生，称有50万视频。。 Instructables — 一个DIY网站。 creativeLIVE — 教你摄影、音乐、设计等技能，要付费。 Do It Yourself — 教你成为家居改造达人。 Adafruit Learning System — 提供免费电子设备DIY教程。 Grovo — 学习如何使用上百种网站应用，提高自己的工作效率。 网易云课堂&amp;网易公开课—各种职业技能培训课程，大学公开课，TED演讲","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}]},{"title":"python logging的使用","slug":"34ef79447576ebd454fd5437bc9aa4f1","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.958Z","comments":true,"path":"2019/12/02/34ef79447576ebd454fd5437bc9aa4f1/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/34ef79447576ebd454fd5437bc9aa4f1/","excerpt":"","text":"因为每次需要查找麻烦，所以把找到几个不错的别文档链接自己留下来，方便日后需要查找。参考：1、https://blog.csdn.net/liuchunming033/article/details/390804572、官方文档https://docs.python.org/3/library/logging.html3、更详细的汉语讲解：https://blog.csdn.net/zyz511919766/article/details/25136485","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python logging","slug":"python-logging","permalink":"https://zhaojiafu.github.io/tags/python-logging/"}]},{"title":"python 多进程报错：TypeError_ can't pickle _thread.lock objects","slug":"f7c8714db856d3031d1fd8755224c131","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.740Z","comments":true,"path":"2019/12/02/f7c8714db856d3031d1fd8755224c131/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/f7c8714db856d3031d1fd8755224c131/","excerpt":"","text":"# 介绍：写这个随笔主要是为了日后再遇见这个问题，而不用百度一直找原因，耽误时间，我用多进程进行爬虫时，使用下面这个process_one.start(),一直报错说这个地方，百度谷歌搜索了好一会，也没有找到可靠的解决方法，后来找了好一会没找到，主要还是以前看到进程学习的使用，start(),就是调用run()方法，想着直接调用run()试试，结果还就可以了。 process_one = Process(target=baidu.run, args=(key,)) process_one.start()1、报错：Traceback (most recent call last): File &quot;D:/zjf_workspace/自己测试用的/030、网站图片/1、360/5、360_进程_many_thread_many_keys.py&quot;, line 103, in &lt;module&gt; process_one.start() File &quot;D:\\tools\\Python3.6\\lib\\multiprocessing\\process.py&quot;, line 105, in start self._popen = self._Popen(self) File &quot;D:\\tools\\Python3.6\\lib\\multiprocessing\\context.py&quot;, line 223, in _Popen return _default_context.get_context().Process._Popen(process_obj) File &quot;D:\\tools\\Python3.6\\lib\\multiprocessing\\context.py&quot;, line 322, in _Popen return Popen(process_obj) File &quot;D:\\tools\\Python3.6\\lib\\multiprocessing\\popen_spawn_win32.py&quot;, line 65, in __init__ reduction.dump(process_obj, to_child) File &quot;D:\\tools\\Python3.6\\lib\\multiprocessing\\reduction.py&quot;, line 60, in dump ForkingPickler(file, protocol).dump(obj) TypeError: can&apos;t pickle _thread.lock objects2、解决很简单：主要还是以前看到进程学习的使用，start(),就是调用run()方法，想着直接调用run()试试，结果还就可以了。 process_one = Process(target=baidu.run, args=(key,)) # process_one.start() process_one.run()3、产生新的错误AssertionError: can only join a started process for process_i in process_list: process_i.join()然后 百度找了好久，找到一个解释，说join()不能用于等待.run()方法， 解释参考：https://www.cnblogs.com/YZL2333/p/10445981.html 4、直接去掉jion()测试测试中。。。 等待。。。如果能爬取到7300以上的图片，跑完没有报错，说明成功。这个跑到7000，感觉没有单个程序爬的多，不过快一点，后续如果有更好的解决再来补充吧。","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"深度学习问题1：ValueError_ Expected 2D array, got 1D array instead_","slug":"f56ed72af5683ca2e0187ec20683eca9","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.474Z","comments":true,"path":"2019/12/02/f56ed72af5683ca2e0187ec20683eca9/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/f56ed72af5683ca2e0187ec20683eca9/","excerpt":"","text":"当运行python多元回归，进行预测时报错：ValueError: Expected 2D array, got 1D array instead: 代码： from numpy import genfromtxt from sklearn import linear_model datapath=r&quot;Delivery_Dummy.csv&quot; data = genfromtxt(datapath,delimiter=&quot;,&quot;,encoding=&apos;utf-8&apos;) x = data[1:,:-1] y = data[1:,-1] print(x) print(y) mlr = linear_model.LinearRegression() mlr.fit(x, y) print(mlr) print(&quot;coef:&quot;) print(mlr.coef_) print(&quot;intercept&quot;) print(mlr.intercept_) xPredict = [90,2,0,0,1] yPredict = mlr.predict(xPredict) print(&quot;predict:&quot;) print(yPredict)定位到是： yPredict = mlr.predict(xPredict)预测这一行代码报错，意思是需要2维数据，却给了一个1维的，再数据价格中括号即可： xPredict = [[90,2,0,0,1]] yPredict = mlr.predict(xPredict)","categories":[{"name":"numpy","slug":"numpy","permalink":"https://zhaojiafu.github.io/categories/numpy/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"numpy","slug":"numpy","permalink":"https://zhaojiafu.github.io/tags/numpy/"}]},{"title":"pycharm 报错内存不足： There is not enough memory to perform the requested operation。。。","slug":"f02cf2bcf94b333149b12bf76e37e412","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.590Z","comments":true,"path":"2019/12/02/f02cf2bcf94b333149b12bf76e37e412/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/f02cf2bcf94b333149b12bf76e37e412/","excerpt":"","text":"1、问题我的pycharm第二天早上刚到公司发现报错： pycharm There is not enough memory to perform the requested operation.Please increase Xmx’ setting and restart the IDE for change to take effect. 然后谷歌开始搜索查找原因：最后搜到一个，里面可以有人解决问题https://stackoverflow.com/questions/36137671/pycharm-running-out-of-memory 2、中文解决步骤：对pycharm单击菜单上的帮助 1、点击Help -&gt; Edit custom VM options出现提示时创建文件。 2、更改内容将设置更改为以下内容或使用以下内容替换文件的整个内容：下面这个是我的更改之后的内容，然后问题就解决了，你也可以先把你的保留一份复制到你自己记住的地方，然后全部更改为我的试试，如果可以，备份那一份就不要了，如果不能解决，还能更改回来，更改之后保存，然后重启pycharm就应该可以了。 -Xms512m -Xmx2040m -XX:ReservedCodeCacheSize=2040m -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -XX:MaxMetaspaceSize=3500m第三步，彻底删除缓存数据(这个方法我经常用，时不时会删除过多内存，刚刚解决上面问题时我一看我的数据缓存快3G了，所以果断的删除了) 重要提示，经过我多次测试，这个缓存数据，一旦删除，就是你现在更改的代码除了没有crtl + Z 的撤销功能，其他我没有发现大的影响，所以我也时不时看看大小，及时删除，因为撤销功能对我来说影响不大，如果撤销功能对你有影响，请先保存好文件，再删除，删除之前要先关闭pycharm （因为pycharm在使用数据，所以和电脑删除不掉正在打开的文件一样的道理） 1、查找数据缓存位置先找到你安装pycharm软件的文件夹，然后找到下面的bin里面的idea.properties文件，这个时pycharm的设置数据储存位置的目录， 我的bin目录： D:\\tools\\pycharm\\PyCharm Community Edition 2018.1.3\\bin我的idea文件位置： D:\\tools\\pycharm\\PyCharm Community Edition 2018.1.3\\bin\\idea.properties用电脑记事本打开文件：找到这一句，意思就是默认安装在C盘的用户目录下面的.PyCharmCE目录下面的system， idea.system.path=${user.home}/.PyCharmCE/system然后缓存数据就在system下面的caches目录下面的content.dat.storageData文件，这个如果你的很大，应该pycharm的使用，如果感觉跑程序很卡，可以进行删除（删除之前你可以先剪切到其他备用位置，以防万一，记得先退出pycharm，然后再剪切） # caches文件夹目录 .PyCharmCE\\system\\caches # 数据缓存文件 .PyCharmCE\\system\\caches\\content.dat.storageData给你个福利你看到这个地方是否想到，文件这么大，我为何不修改下位置呐，这样C盘只放系统多好，省的电脑卡，如果想更改位置，可以参考下我之前的一个博客。 里面有更改pycharm缓存的地方，（偷偷告诉你，我第一次更改位置时，我的缓存数据达到了15G，电脑C盘本来30G的空间占满了，也有一部分是电脑临时文件，也可以直接删除，具体如果想弄看博客把，如果觉得有帮助，期待给我点个赞哈） 我的博客连接：https://blog.csdn.net/weixin_42081389/article/details/86630515","categories":[{"name":"pycharm","slug":"pycharm","permalink":"https://zhaojiafu.github.io/categories/pycharm/"}],"tags":[{"name":"pycharm","slug":"pycharm","permalink":"https://zhaojiafu.github.io/tags/pycharm/"}]},{"title":"window系统下python 与MySQL交互的增删改查","slug":"405f9b3e4bf062a59a20afa86d0d2802","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.840Z","comments":true,"path":"2019/12/02/405f9b3e4bf062a59a20afa86d0d2802/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/405f9b3e4bf062a59a20afa86d0d2802/","excerpt":"","text":"前提、sql命令–基本的增删改查MySQL的一些常用命令可以参考我之前的博客：https://blog.csdn.net/weixin_42081389/article/details/93788977 1、创建表create table student( id int auto_increment primary key, name varchar(100) not null, sex char(1) not null, address varchar(100) default &apos;郑州&apos;, phone varchar(11), birthday date );2、插入（增）insert into student(name,sex,address,phone,birthday) values(&apos;老王&apos;,&apos;男&apos;,&apos;开封&apos;,&apos;11111111111&apos;,&apos;1998-2-2&apos;);3、删除（删）delete from student where id = 3; 4、更新（改）update student set address=&apos;开封&apos; where id = 5; update student set sex=&apos;女&apos;,address=&apos;曼谷&apos; where id = 5; UPDATE student SET sex=&apos;女&apos;,address=&apos;曼谷&apos; WHERE id = 5;5、查找（查）select * from student; select name,phone from student; select name 姓名,phone 电话 from student;1、安装pymysqlpip install pymysql2、python与MySQL交互连接# !/usr/bin/python3 import pymysql # 打开数据库连接 db = pymysql.connect( host=&apos;127.0.0.1&apos;, # ip地址 # host=&apos;localhost&apos;, # ip地址 port=3306, # 端口号 user=&apos;root&apos;, # 用户名 passwd=&apos;123456&apos;, # 密码 db=&apos;demo&apos;, # 库名 charset=&apos;utf8&apos;) # 链接字符集 # 使用 cursor() 方法创建一个游标对象 cursor cursor = db.cursor() # 使用 execute() 方法执行 SQL，如果表存在则删除 cursor.execute(&quot;drop table if exists student&quot;) # 使用预处理语句创建表 sql = &apos;&apos;&apos; create table student( id int auto_increment primary key, name varchar(100) not null, passward varchar(100) not null );&apos;&apos;&apos; cursor.execute(sql) # 关闭数据库连接 db.close()3、python与MySQL交互–（增）import pymysql # 1.插入操作 db = pymysql.connect(host=&quot;localhost&quot;, user=&quot;root&quot;, password=&quot;123456&quot;, db=&quot;demo&quot;, port=3306) # 创建表命令 &apos;&apos;&apos; create table student( id int auto_increment primary key, name varchar(100) not null, passward varchar(100) not null );&apos;&apos;&apos; # 使用cursor()方法获取操作游标 cur = db.cursor() sql_insert = &quot;&quot;&quot;insert into student(name,passward) values(&apos;小王&apos;,&apos;123456&apos;)&quot;&quot;&quot; try: cur.execute(sql_insert) # 提交 db.commit() except Exception as e: # 错误回滚 print(&quot;异常&quot;,e) db.rollback() finally: db.close()4、python与MySQL交互–（删）import pymysql # 2.删除操作 db = pymysql.connect(host=&quot;localhost&quot;, user=&quot;root&quot;, password=&quot;123456&quot;, db=&quot;demo&quot;, port=3306) # 使用cursor()方法获取操作游标 cur = db.cursor() sql_delete = &quot;delete from student where id = {}&quot; try: cur.execute(sql_delete.format(3)) # 像sql语句传递参数 # 提交 db.commit() except Exception as e: # 错误回滚 print(&quot;异常&quot;, e) db.rollback() finally: db.close()5、python与MySQL交互–（改）import pymysql # 3.更新操作 db = pymysql.connect(host=&quot;localhost&quot;, user=&quot;root&quot;,password=&quot;123456&quot;, db=&quot;demo&quot;, port=3306) # 使用cursor()方法获取操作游标 cur = db.cursor() # 俩种字符串拼接方法 # sql_update = &quot;update student set name = &apos;%s&apos; where id = %d&quot; sql_update = &quot;update student set name = &apos;{}&apos; where id = {}&quot; try: # sql_str = sql_update % (&quot;小红&quot;, 2) sql_str = sql_update.format(&quot;王姐&quot;, 2) print(&apos;sql_str&apos;,sql_str) cur.execute(sql_str) # 像sql语句传递参数 # cur.execute(sql_update.format(&quot;小红&quot;, 2)) # 像sql语句传递参数 # 提交 db.commit() except Exception as e: # 错误回滚 print(&quot;异常&quot;, e) db.rollback() finally: db.close()6、python与MySQL交互–（查）import pymysql # 导入 pymysql # 打开数据库连接 db = pymysql.connect(host=&quot;localhost&quot;, user=&quot;root&quot;, password=&quot;123456&quot;, db=&quot;demo&quot;, port=3306) # 使用cursor()方法获取操作游标 cur = db.cursor() # 4.查询操作 # 编写sql 查询语句 user 对应我的表名 sql = &quot;select * from student&quot; try: cur.execute(sql) # 执行sql语句 results = cur.fetchall() # 获取查询的所有记录 print(&quot;id&quot;, &quot;name&quot;, &quot;password&quot;) # 遍历结果 for row in results: id = row[0] name = row[1] password = row[2] print(id, name, password) except Exception as e: print(&quot;异常&quot;, e) finally: db.close() # 关闭连接","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://zhaojiafu.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://zhaojiafu.github.io/tags/MySQL/"}]},{"title":"python之 requests下载大文件","slug":"40dd91b5f260e23fd6e0b5f36e72304e","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.684Z","comments":true,"path":"2019/12/02/40dd91b5f260e23fd6e0b5f36e72304e/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/40dd91b5f260e23fd6e0b5f36e72304e/","excerpt":"","text":"需求：下载一个4G的大视频，所以肯定不能直接使用response.content功能，需要使用一块一块读取的功能，相当于一个生成器，这样保证能下载而且速度还会提高，url我就不提供出来了。 主要代码： name = url_video[url_video.rindex(&apos;=&apos;) + 1:] # response = requests.get(url=url_video,headers=headers) r = requests.get(url_video, stream=True, headers=headers) f = open(r&quot;E:\\003_video\\003aiqiyi\\{}.mp4&quot;.format(name), &quot;wb&quot;) print(&apos;开始下载视频：&apos;) for chunk in r.iter_content(chunk_size=5120):# 每次下载5120，因为我的大点，我选择每次稍大一点，这个自己根据需要选择。 if chunk: f.write(chunk) print(&apos;视频下载完成！！！&apos;)","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"RequestsDependencyWarning_ urllib3 (1.25.2) or chardet (3.0.4) doesn't match a supported version!","slug":"41e1a7cf313f3a02db2d60686e1395c7","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.791Z","comments":true,"path":"2019/12/02/41e1a7cf313f3a02db2d60686e1395c7/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/41e1a7cf313f3a02db2d60686e1395c7/","excerpt":"","text":"用requests模块爬虫时出现这个警告，意思urllib3模块和chardet模块俩个不一致，支持不太好，所以需要将这俩个卸载，然后，将requests模块更新，或者将requests模块卸载重新安装即可： pip uninstall urllib3 pip uninstall chardet pip install --upgrade requests","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"推荐几个测试能接受邮件的临时邮箱","slug":"43414575f515f46bf5612a7ab783aa6f","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.311Z","comments":true,"path":"2019/12/02/43414575f515f46bf5612a7ab783aa6f/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/43414575f515f46bf5612a7ab783aa6f/","excerpt":"","text":"这个是我收藏使用的几个临时邮箱地址，直接浏览器访问就可以使用，有些网站不限制临时邮箱，就可以用来注册账号。1、http://www.yopmail.com/zh/email-generator.php2、https://temp-mail.org/zh/3、http://24mail.chacuo.net/4、https://www.linshiyouxiang.net/5、https://10minutemail.net/readmail.html?mid=jUpbJu6、https://www.guerrillamail.com/inbox","categories":[{"name":"临时邮箱","slug":"临时邮箱","permalink":"https://zhaojiafu.github.io/categories/%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1/"}],"tags":[{"name":"临时邮箱","slug":"临时邮箱","permalink":"https://zhaojiafu.github.io/tags/%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1/"}]},{"title":"python Unicode字符与数值转换","slug":"ec62b23c152c05cac955157240ae0fe2","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.424Z","comments":true,"path":"2019/12/02/ec62b23c152c05cac955157240ae0fe2/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/ec62b23c152c05cac955157240ae0fe2/","excerpt":"","text":"本文组要记录学习的俩个python内置函数chr和ord 1、Python ord() 函数描述ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。 语法以下是 ord() 方法的语法: ord(c)参数c – 字符。返回值返回值是对应的十进制整数。 示例： # ord 将字符转化为Unicode编码数值 ret_str = &quot;HELLO&quot; for ret in ret_str: ret_unicode = ord(ret) print(ret,ret_unicode) 结果： H 72 E 69 L 76 L 76 O 792、Python chr() 函数描述chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。 语法以下是 chr() 方法的语法: chr(i)参数i – 可以是10进制也可以是16进制的形式的数字。返回值返回值是当前整数对应的 ASCII 字符。 示例： # chr 将Unicode编码数值转换为字符 for i in range(68,75): print(i,chr(i)) 结果： 68 D 69 E 70 F 71 G 72 H 73 I 74 J","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"selenium之等待页面（或者特定元素）加载完成","slug":"e5f3bd71219f5f561c21f6d1c3882d02","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.334Z","comments":true,"path":"2019/12/02/e5f3bd71219f5f561c21f6d1c3882d02/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/e5f3bd71219f5f561c21f6d1c3882d02/","excerpt":"","text":"需求：有时候，我们使用selenium用来获取一些元素时，需要等待页面将某些元素加载网站才能够获取我们需要的数据，所以，这时候我们就需要等待页面的功能。 1、显示等待（推荐）显式等待是你在代码中定义等待一定条件发生后再进一步执行你的代码。 最糟糕的案例是使用time.sleep()，它将条件设置为等待一个确切的时间段。 这里有一些方便的方法让你只等待需要的时间。WebDriverWait结合ExpectedCondition 是实现的一种方式。需要的元素发现就会继续执行 from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC driver = webdriver.Chrome() driver.get(&quot;https://www.baidu.com/&quot;) try: element = WebDriverWait(driver, 10).until( EC.presence_of_element_located((By.XPATH, &apos;//*[@id=&quot;su&quot;]&apos;)) ) text = driver.page_source print(&quot;text&quot;, text) finally: driver.quit()2、隐式等待（也不错）如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素。 默认等待时间是0秒，一旦设置该值，隐式等待是设置该WebDriver的实例的生命周期。 from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(10) # seconds driver.get(&quot;https://www.baidu.com/&quot;) myDynamicElement = driver.find_element_by_xpath(&apos;//*[@id=&quot;su&quot;]&apos;) text = driver.page_source print(&quot;text&quot;, text)3、time.sleep(一般不推荐)就是使用time模块的time.sleep()设置等待时间（一般不推荐这个，时间要么多等才会获取到我们需要的数据元素） from selenium import webdriver import time driver = webdriver.Chrome() # driver.implicitly_wait(10) # 这个单位是秒 driver.get(&quot;https://www.baidu.com/&quot;) time.sleep(2) text = driver.page_source print(&quot;text&quot;, text)","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"bat脚本对文件目录的复制和移动","slug":"e5b8e142063a8c402dcf6c09ad1a5e98","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.637Z","comments":true,"path":"2019/12/02/e5b8e142063a8c402dcf6c09ad1a5e98/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/e5b8e142063a8c402dcf6c09ad1a5e98/","excerpt":"","text":"# 一、复制： FOR /F %%I IN (&apos;DIR /B /S &quot;E:\\save_photo_from_video\\*.*&quot;&apos;) DO (COPY %%I &quot;E:\\004-dangdang&quot;)其中，E:\\save_photo_from_video是需要复制的文件夹，下面的多级文件都会被复制到指定目录E:\\004-dangdang下面。 二、移动：FOR /F %%I IN (&apos;DIR /B /S &quot;E:\\save_photo_from_video\\*.*&quot;&apos;) DO (MOVE %%I &quot;E:\\004-dangdang&quot;)其中，（E:\\save_photo_from_video）是需要被移动的文件夹，下面的多级文件都会被移动到指定目录（E:\\004-dangdang）下面。 只需要把上面的代码复制到window的文本文件中，然后另存为.bat格式的文件，点击另存为的文件即可。","categories":[{"name":"bat","slug":"bat","permalink":"https://zhaojiafu.github.io/categories/bat/"}],"tags":[{"name":"bat","slug":"bat","permalink":"https://zhaojiafu.github.io/tags/bat/"}]},{"title":"python3 hashlib的sha1和md5加密","slug":"e4b85e60637cef80c6f02142d16b407f","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.012Z","comments":true,"path":"2019/12/02/e4b85e60637cef80c6f02142d16b407f/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/e4b85e60637cef80c6f02142d16b407f/","excerpt":"","text":"# 一，md5加密 # 由于MD5模块在python3中被移除 # 在python3中使用hashlib模块进行md5操作 import hashlib # 待加密信息 str = &quot;4CbLXeGSDxg&quot; # 创建md5对象 m = hashlib.md5() # Tips # 此处必须encode # 若写法为m.update(str) 报错为： Unicode-objects must be encoded before hashing # 因为python3里默认的str是unicode # 或者 b = bytes(str, encoding=&apos;utf-8&apos;)，作用相同，都是encode为bytes b = str.encode(encoding=&apos;utf-8&apos;) m.update(b) str_md5 = m.hexdigest() print(&apos;MD5加密前为 ：&apos; + str) print(&apos;MD5加密后为 ：&apos; + str_md5)二、sha1加密import hashlib sha1 = hashlib.sha1() key =&apos;how to use sha1 in &apos;.encode(&apos;utf-8&apos;) # key =&apos;how to use sha1 in &apos; # TypeError: Unicode-objects must be encoded before hashing sha1.update(key) print(sha1.hexdigest())","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"hashlib","slug":"hashlib","permalink":"https://zhaojiafu.github.io/tags/hashlib/"}]},{"title":"pip 国内源","slug":"487191994db8eea33ffca7c87d3001fe","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.978Z","comments":true,"path":"2019/12/02/487191994db8eea33ffca7c87d3001fe/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/487191994db8eea33ffca7c87d3001fe/","excerpt":"","text":"PyPI使用国内源通过几次 pip 的使用，对于默认的 pip 源的速度实在无法忍受，从国外下载很慢，于是便搜集了一些国内的pip源，如下： 阿里云 http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 豆瓣(douban) http://pypi.douban.com/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 使用方式： pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ scrapy-redis","categories":[{"name":"pip 国内源","slug":"pip-国内源","permalink":"https://zhaojiafu.github.io/categories/pip-%E5%9B%BD%E5%86%85%E6%BA%90/"}],"tags":[{"name":"pip","slug":"pip","permalink":"https://zhaojiafu.github.io/tags/pip/"}]},{"title":"爬虫Max retries exceeded with url和403错误","slug":"df62afd0d2f0ad4e898ee88f201c7283","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.689Z","comments":true,"path":"2019/12/02/df62afd0d2f0ad4e898ee88f201c7283/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/df62afd0d2f0ad4e898ee88f201c7283/","excerpt":"","text":"一、Max retries exceeded with url方法1、出现这个错误可能跟爬取速度过快而且没有关闭每次的请求有关，导致出错。requests使用了urllib3库，默认的http connection是keep-alive的，requests设置False关闭。 可以，每次请求的内容保存到其他变量后关闭请求。比如我的：我把response响应的结果赋值给deps之后就把response关闭，这样就好了。 response=requests.get(depurl,allow_redirects=False) deps=json.loads(response.text) response.close()方法2网上找到还有一种方法：第一步：增加重试连接次数第二步：关闭多余链接，其实和我那样应该是一样的。我没有测试这个。 requests.adapters.DEFAULT_RETRIES = 5 s = requests.session() s.keep_alive = False二、403错误我的主要还有出现403错误，所以，这个就需要代理ip，因为报错的这个url，我用浏览器也不能访问了，才知道是ip被禁用了，这个时候需要找代理ip，可以搜一下免费代理ip网站，找一些，如果经常爬虫可以没事多爬取一些，留着备用。可以写个代码测试代理ip是否可用。如果需要测试代理ip是否高匿或者可用，可以参考下我之前写的检测是否高匿的而代理ip，https://mp.csdn.net/mdeditor/88528285#注意一点： 使用代理ip时自己可以先测试一下http可以访问还是https可以，这个是我自己走过的路吃过的亏，因为我之前爬的网站有的需要http才能访问有的却是https，你测试一个高匿的，用俩个方法测试一下就知道了。","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"Scrapy爬虫错误","slug":"ddd3d2831bc288b0e637654fc94c09a1","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.564Z","comments":true,"path":"2019/12/02/ddd3d2831bc288b0e637654fc94c09a1/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/ddd3d2831bc288b0e637654fc94c09a1/","excerpt":"","text":"Scrapy爬虫一个页面也爬取不到报错：[scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min) 解决方法俩种： 方法1，在settings.py中添加用户代理：USER_AGENT = &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.54 Safari/536.5&apos; 方法1，在def start_requests(self):中添加headers：USER_AGENT = &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.54 Safari/536.5&apos;","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"用python os模块完成查询一个目录下当前的文件总数，和文件个数，俩者之差为文件夹个数","slug":"4e4ecb6ed5d63865ab06b4fae834bb1d","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.533Z","comments":true,"path":"2019/12/02/4e4ecb6ed5d63865ab06b4fae834bb1d/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/4e4ecb6ed5d63865ab06b4fae834bb1d/","excerpt":"","text":"首先这个只能用递归的方式进行统计和计算，计算的数为全局变量 import os def get_file_num(path): global num_total, file_num # path = r&quot;E:\\004_kongfuz_selenium70_120W&quot; os.chdir(path) ret = os.listdir() # os.getcwd() print(ret) print(os.getcwd()) current_path = os.getcwd() for i in ret: path1 = os.path.join(current_path,i) a = os.path.isdir(path1) if a: get_file_num(path1) else: file_num += 1 num_total += len(ret) if __name__ == &apos;__main__&apos;: num_total = 0 file_num = 0 path = r&quot;E:\\004_kongfuz_selenium70_120W&quot; get_file_num(path) print(num_total,file_num)","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"JavaScript 实现的几种加密方式（后续持续更新中。。。）","slug":"5337277cfc36984fcaa62344ecf3e10b","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.125Z","comments":true,"path":"2019/12/02/5337277cfc36984fcaa62344ecf3e10b/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/5337277cfc36984fcaa62344ecf3e10b/","excerpt":"","text":"@[toc] 说明：这个是我js破解时遇到的，然后把代码抠出来了，现在整理一下，日后遇到其他加密，也会更新保留在博客里面。如果有需要可以参考，如果有转载，请标明作者和链接，违者必究。如果觉得不错，可以给我点个赞，如果有更好的加密方法，欢迎评论分享哈，Thanks♪(･ω･)ﾉ 1、JavaScript实现md5加密这个我直接上代码吧，可以运行出来，我这个是之前弄的，具体网站忘了，需要的可以直接测试。 function v(n) { return function(n) { return h(a(d(n), 8 * n.length)) }(l(n)) } function h(n) { var r, t = &quot;&quot; for (r = 0; r &lt; 32 * n.length; r += 8) t += String.fromCharCode(n[r &gt;&gt; 5] &gt;&gt;&gt; r % 32 &amp; 255) return t } function l(n) { return unescape(encodeURIComponent(n)) } function d(n) { var r, t = [] for (t[(n.length &gt;&gt; 2) - 1] = void 0, r = 0; r &lt; t.length; r += 1) t[r] = 0 for (r = 0; r &lt; 8 * n.length; r += 8) t[r &gt;&gt; 5] |= (255 &amp; n.charCodeAt(r / 8)) &lt;&lt; r % 32 return t } function a(n, r) { n[r &gt;&gt; 5] |= 128 &lt;&lt; r % 32, n[14 + (r + 64 &gt;&gt;&gt; 9 &lt;&lt; 4)] = r var t, u, a, h, d, g = 1732584193, l = -271733879, v = -1732584194, s = 271733878 for (t = 0; t &lt; n.length; t += 16) u = g, a = l, h = v, d = s, l = i(l = i(l = i(l = i(l = f(l = f(l = f(l = f(l = c(l = c(l = c(l = c(l = o(l = o(l = o(l = o(l, v = o(v, s = o(s, g = o(g, l, v, s, n[t], 7, -680876936), l, v, n[t + 1], 12, -389564586), g, l, n[t + 2], 17, 606105819), s, g, n[t + 3], 22, -1044525330), v = o(v, s = o(s, g = o(g, l, v, s, n[t + 4], 7, -176418897), l, v, n[t + 5], 12, 1200080426), g, l, n[t + 6], 17, -1473231341), s, g, n[t + 7], 22, -45705983), v = o(v, s = o(s, g = o(g, l, v, s, n[t + 8], 7, 1770035416), l, v, n[t + 9], 12, -1958414417), g, l, n[t + 10], 17, -42063), s, g, n[t + 11], 22, -1990404162), v = o(v, s = o(s, g = o(g, l, v, s, n[t + 12], 7, 1804603682), l, v, n[t + 13], 12, -40341101), g, l, n[t + 14], 17, -1502002290), s, g, n[t + 15], 22, 1236535329), v = c(v, s = c(s, g = c(g, l, v, s, n[t + 1], 5, -165796510), l, v, n[t + 6], 9, -1069501632), g, l, n[t + 11], 14, 643717713), s, g, n[t], 20, -373897302), v = c(v, s = c(s, g = c(g, l, v, s, n[t + 5], 5, -701558691), l, v, n[t + 10], 9, 38016083), g, l, n[t + 15], 14, -660478335), s, g, n[t + 4], 20, -405537848), v = c(v, s = c(s, g = c(g, l, v, s, n[t + 9], 5, 568446438), l, v, n[t + 14], 9, -1019803690), g, l, n[t + 3], 14, -187363961), s, g, n[t + 8], 20, 1163531501), v = c(v, s = c(s, g = c(g, l, v, s, n[t + 13], 5, -1444681467), l, v, n[t + 2], 9, -51403784), g, l, n[t + 7], 14, 1735328473), s, g, n[t + 12], 20, -1926607734), v = f(v, s = f(s, g = f(g, l, v, s, n[t + 5], 4, -378558), l, v, n[t + 8], 11, -2022574463), g, l, n[t + 11], 16, 1839030562), s, g, n[t + 14], 23, -35309556), v = f(v, s = f(s, g = f(g, l, v, s, n[t + 1], 4, -1530992060), l, v, n[t + 4], 11, 1272893353), g, l, n[t + 7], 16, -155497632), s, g, n[t + 10], 23, -1094730640), v = f(v, s = f(s, g = f(g, l, v, s, n[t + 13], 4, 681279174), l, v, n[t], 11, -358537222), g, l, n[t + 3], 16, -722521979), s, g, n[t + 6], 23, 76029189), v = f(v, s = f(s, g = f(g, l, v, s, n[t + 9], 4, -640364487), l, v, n[t + 12], 11, -421815835), g, l, n[t + 15], 16, 530742520), s, g, n[t + 2], 23, -995338651), v = i(v, s = i(s, g = i(g, l, v, s, n[t], 6, -198630844), l, v, n[t + 7], 10, 1126891415), g, l, n[t + 14], 15, -1416354905), s, g, n[t + 5], 21, -57434055), v = i(v, s = i(s, g = i(g, l, v, s, n[t + 12], 6, 1700485571), l, v, n[t + 3], 10, -1894986606), g, l, n[t + 10], 15, -1051523), s, g, n[t + 1], 21, -2054922799), v = i(v, s = i(s, g = i(g, l, v, s, n[t + 8], 6, 1873313359), l, v, n[t + 15], 10, -30611744), g, l, n[t + 6], 15, -1560198380), s, g, n[t + 13], 21, 1309151649), v = i(v, s = i(s, g = i(g, l, v, s, n[t + 4], 6, -145523070), l, v, n[t + 11], 10, -1120210379), g, l, n[t + 2], 15, 718787259), s, g, n[t + 9], 21, -343485551), g = e(g, u), l = e(l, a), v = e(v, h), s = e(s, d) return [g, l, v, s] } function u(n, r, t, u, o, c) { return e(function(n, r) { return n &lt;&lt; r | n &gt;&gt;&gt; 32 - r }(e(e(r, n), e(u, c)), o), t) } function o(n, r, t, e, o, c, f) { return u(r &amp; t | ~r &amp; e, n, r, o, c, f) } function e(n, r) { var t = (65535 &amp; n) + (65535 &amp; r) return (n &gt;&gt; 16) + (r &gt;&gt; 16) + (t &gt;&gt; 16) &lt;&lt; 16 | 65535 &amp; t } function c(n, r, t, e, o, c, f) { return u(r &amp; e | t &amp; ~e, n, r, o, c, f) } function f(n, r, t, e, o, c, f) { return u(r ^ t ^ e, n, r, o, c, f) } function i(n, r, t, e, o, c, f) { return u(t ^ (r | ~e), n, r, o, c, f) } // console.log(v(&quot;wen字加密&quot;)) // var new_pwd = function g(n) { var r, t, e = &quot;&quot; for (t = 0; t &lt; n.length; t += 1) r = n.charCodeAt(t), e += &quot;0123456789abcdef&quot;.charAt(r &gt;&gt;&gt; 4 &amp; 15) + &quot;0123456789abcdef&quot;.charAt(15 &amp; r) return e } console.log(g(v(&quot;wen字加密&quot;)))2、base64我另一个博客中有相关base64 的。https://blog.csdn.net/weixin_42081389/article/details/93884080","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhaojiafu.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhaojiafu.github.io/tags/JavaScript/"}]},{"title":"Python拼接字符串的7种方法","slug":"dca4df860e060adc999558a81856a431","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.210Z","comments":true,"path":"2019/12/02/dca4df860e060adc999558a81856a431/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/dca4df860e060adc999558a81856a431/","excerpt":"","text":"@[toc] 说明：今天突然看到一种好像是字符串的拼接方法substitute，但是不确定，于是就百度搜索了一下，然后搜到一个博客，写的不错，虽然他写的7中方法，除了这个substitute和第5种我不知道，其他的5种都知道，也都用过，今天也是学习俩种方法，Thanks♪(･ω･)ﾉ 1、直接通过+操作：s = &apos;Python&apos;+&apos;，&apos;+&apos;你好&apos;+&apos;！&apos; print(s) 打印结果： Python，你好！2、通过join()方法拼接：将列表转换成字符串 strlist=[&apos;Python&apos;, &apos;，&apos;, &apos;你好&apos;, &apos;！&apos;] print(&apos;&apos;.join(strlist)) 打印结果： Python，你好！3、通过format()方法拼接：字符串中{}的数量要与format()方法中的参数数量一致 s = &apos;{}，{}！&apos;.format(&apos;Python&apos;, &apos;你好&apos;) print(s) 打印结果： Python，你好！4、通过%拼接：s = &apos;%s，%s！&apos; % (&apos;Python&apos;, &apos;你好&apos;) print(s) 打印结果： Python，你好！5、通过()多行拼接：当Python遇到未闭合的小括号，会自动将多行拼接成一行 s = ( &apos;Python&apos; &apos;，&apos; &apos;你好&apos; &apos;！&apos; ) print(s) 打印结果： Python，你好！6、通过string模块中的Template对象拼接：from string import Template s = Template(&apos;${s1}，${s2}！&apos;) # Template的实现方式是首先通过Template初始化一个字符串 # 这些字符串中包含了一个个key # print(s.safe_substitute(s1=&apos;Python&apos;, s2=&apos;你好&apos;)) print(s.substitute(s1=&apos;Python&apos;, s2=&apos;你好&apos;)) # 通过调用substitute或safe_subsititute # 将key值与方法中传递过来的参数对应上 # 从而实现在指定的位置导入字符串 打印结果： Python，你好！7、通过F-strings（字符串插值）拼接：s1 = &apos;Python&apos; s2 = &apos;你好&apos; print(f&apos;{s1}，{s2}！&apos;) 打印结果： Python，你好！感谢原博主，Thanks♪(･ω･)ﾉ原博客：https://www.cnblogs.com/yjlch1016/p/9497123.html","categories":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/tags/python/"}]},{"title":"python 对列表排序之高级模块natsort","slug":"d8dfc9cc8b0602641bc652716e23346f","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.662Z","comments":true,"path":"2019/12/02/d8dfc9cc8b0602641bc652716e23346f/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/d8dfc9cc8b0602641bc652716e23346f/","excerpt":"","text":"说明工作中有时候总会遇到一些功能，比如排序，要么就自己写一个排序函数，这时候如果这个模块就可以使用了，可以大大的提高你的效率，节省你的时间。比如需要合并视频时，或者对文件夹下面的文件进行操作需要进行排序时。。。等 这个模块对英文和数字都有很好的效果。 一、安装pip install natsortnatsort模块官网地址：https://pypi.org/project/natsort/ 如果是window系统直接cmd中，直接命令安装就行 pip install natsort二、简单使用1（数字类型的字符串排序）1、不用模块方法这种使用python list的sort 方法，也能达到对数字排序的效果。 ret1 = [&apos;1&apos;, &apos;1000&apos;, &apos;10660&apos;, &apos;1000&apos;, &apos;11&apos;, &apos;102&apos;, &apos;10039999&apos;, ] ret2 = [int(i) for i in ret1] ret2.sort() ret3 = [str(i) for i in ret2] print(ret3) # [&apos;1&apos;, &apos;11&apos;, &apos;102&apos;, &apos;1000&apos;, &apos;1000&apos;, &apos;10660&apos;, &apos;10039999&apos;]2、使用模块方法：方法1： from natsort import natsort_keygen ret = [&apos;1&apos;, &apos;1000&apos;, &apos;10660&apos;, &apos;1000&apos;, &apos;11&apos;, &apos;102&apos;, &apos;10039999&apos;, ] natsort_key = natsort_keygen() ret_list = sorted(ret, key=natsort_key) print(&quot;ret_list&quot;,ret_list) # ret_list [&apos;1&apos;, &apos;11&apos;, &apos;102&apos;, &apos;1000&apos;, &apos;1000&apos;, &apos;10660&apos;, &apos;10039999&apos;]方法2 from natsort import natsorted ret1 = [&apos;1&apos;, &apos;1000&apos;, &apos;10660&apos;, &apos;1000&apos;, &apos;11&apos;, &apos;102&apos;, &apos;10039999&apos;, ] ret2 = natsorted(ret1) print(ret2)三、英文小写（单个大写也一样）+ 数字from natsort import natsort_keygen,natsorted a = [&apos;2 ft 7 in&apos;, &apos;1 ft 5 in&apos;, &apos;10 ft 2 in&apos;, &apos;2 ft 11 in&apos;, &apos;7 ft 6 in&apos;] natsort_key = natsort_keygen() ret_list = sorted(a, key=natsort_key) print(&quot;ret_list2&quot;,ret_list) ret_list = natsorted(a) print(&quot;ret_list3&quot;,ret_list) # 结果 # ret_list2 [&apos;1 ft 5 in&apos;, &apos;2 ft 7 in&apos;, &apos;2 ft 11 in&apos;, &apos;7 ft 6 in&apos;, &apos;10 ft 2 in&apos;] # ret_list3 [&apos;1 ft 5 in&apos;, &apos;2 ft 7 in&apos;, &apos;2 ft 11 in&apos;, &apos;7 ft 6 in&apos;, &apos;10 ft 2 in&apos;]三、英文大小写 +数字通过下面的代码和结果对比可以发现，如果想在排序不区分英文大小写，需要在natsorted模块函数里面加个参数alg=ns.REAL | ns.LOCALE | ns.IGNORECASE，默认情况下是区分大小写进行排序的。 from natsort import natsorted,ns a = [&apos;Apple&apos;, &apos;apple15&apos;, &apos;Banana&apos;, &apos;apple14,689&apos;, &apos;banana&apos;] ret2a = natsorted(a) print(&quot;ret2a1&quot;,ret2a) ret3 = natsorted(a, alg=ns.REAL | ns.LOCALE | ns.IGNORECASE) print(&quot;ret3&quot;,ret3) # 结果： # ret2a1 [&apos;Apple&apos;, &apos;Banana&apos;, &apos;apple14,689&apos;, &apos;apple15&apos;, &apos;banana&apos;] # ret3 [&apos;Apple&apos;, &apos;apple15&apos;, &apos;apple14,689&apos;, &apos;Banana&apos;, &apos;banana&apos;]如果还想了解更多，可以参考官方文档。https://pypi.org/project/natsort/","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"python3之time模块的时间戳转换（日期格式转为时间戳、时间戳转化为日期格式字符串）","slug":"d6b9eec4a7cc1477dd601f14acda112c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:17.990Z","comments":true,"path":"2019/12/02/d6b9eec4a7cc1477dd601f14acda112c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/d6b9eec4a7cc1477dd601f14acda112c/","excerpt":"","text":"1、日期格式转为时间戳import time # 将如上的时间2019-05-20 5:21:00转换成时间戳，具体的操作过程为： # 利用strptime()函数将时间转换成时间数组 # 利用mktime()函数将时间数组转换成时间戳 dt = &quot;2019-05-20 5:21:00&quot; #转换成时间数组 timeArray = time.strptime(dt, &quot;%Y-%m-%d %H:%M:%S&quot;) #转换成时间戳 t = time.mktime(timeArray) print(t)2、时间戳转化为日期格式字符串import time # 在时间戳转换成时间中，首先需要将时间戳转换成localtime，再转换成时间的具体格式：# # 利用localtime()函数将时间戳转化成localtime的格式 # 利用strftime()函数重新格式化时间 timestamp = 1558300860 #转换成localtime time_local = time.localtime(timestamp) #转换成新的时间格式(2016-05-05 20:28:54) data = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,time_local) print(data)","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"Windows下安装和使用scrapy-redis","slug":"d2e12be46ca671b5b6ec3669ab3b118e","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.545Z","comments":true,"path":"2019/12/02/d2e12be46ca671b5b6ec3669ab3b118e/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/d2e12be46ca671b5b6ec3669ab3b118e/","excerpt":"","text":"1、Windows下安装Redis服务下载Windows的安装包地址：https://github.com/microsoftarchive/redis/releases/download/win-3.0.504/Redis-x64-3.0.504.msi redis可视化工具软件包：https://github.com/uglide/RedisDesktopManager/releases/download/0.9.3/redis-desktop-manager-0.9.3.817.exe 安装不懂和配置步骤也可以参考：推荐参考下面第一个博客，很详细的安装和配置：https://www.cnblogs.com/jaign/articles/7920588.html https://jingyan.baidu.com/article/0f5fb099045b056d8334ea97.html 2、Windows下scrapy-redis的安装与配置2.1、安装：pip install scrapy-redis2.2、setting配置：1、是否遵守robot协议：一般选择不遵守 ROBOTSTXT_OBEY = False 2、显示log设置： _LEVEL = &apos;DEBUG&apos; LOG_LEVEL = &quot;WARNING&quot; 3、scrapy-redis设置： # redis DUPEFILTER_CLASS = &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot; SCHEDULER = &quot;scrapy_redis.scheduler.Scheduler&quot; SCHEDULER_PERSIST = True DOWNLOAD_DELAY = 3 REDIS_URL = &apos;redis://192.168.12.209:6379/8&apos; # redis数据库没有密码情况 # REDIS_URL = &apos;redis://30.6.252.40:6379/1&apos; # redis数据库有密码情况 REDIS_HOST = &apos;30.6.252.40&apos; REDIS_PORT = 6379 REDIS_PARAMS = { &apos;password&apos;: &apos;123456&apos;, } # 另一种有密码情况 Windows账户名 REDIS_URL = &apos;redis://Windows账户名:123456@127.0.0.1:6379/10&apos; # item存放在redis中的配置 ITEM_PIPELINES = { &apos;ddbooks.pipelines.InfoPipeline&apos;: 100, &apos;ddbooks.pipelines.DdbooksPipeline&apos;: 300, # &apos;scrapy_redis.pipelines.RedisPipeline&apos;: 400, }3、scrapy-redis三个模板可以去参考：官方文档：https://scrapy-redis.readthedocs.io/en/stable/源码位置：https://github.com/rmax/scrapy-redis 一、CrawlSpider的继承与设置：from scrapy.linkextractors import LinkExtractor from scrapy.spiders import CrawlSpider, Rule class DmozSpider(CrawlSpider): name = &apos;dmoz&apos; allowed_domains = [&apos;dmoztools.net&apos;] start_urls = [&apos;http://www.dmoztools.net/&apos;] rules = [ Rule(LinkExtractor(restrict_xpaths=(“”)), callback=&apos;parse_directory&apos;, follow=True), ]二、RedisSpider的继承与设置：from scrapy_redis.spiders import RedisSpider class MySpider(RedisSpider): name = &apos;myspider_redis&apos; redis_key = &apos;myspider:start_urls&apos;三、RedisCrawlSpider的继承与设置：from scrapy.spiders import Rule from scrapy.linkextractors import LinkExtractor from scrapy_redis.spiders import RedisCrawlSpider class MyCrawler(RedisCrawlSpider): name = &apos;mycrawler_redis&apos; redis_key = &apos;mycrawler:start_urls&apos; rules = ( Rule(LinkExtractor(restrict_xpaths=(“”)), callback=&apos;parse_page&apos;, follow=True), )","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"使用python os模块复制文件到指定文件夹","slug":"5de1dc66d6edf42256fd25988094ee2a","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.788Z","comments":true,"path":"2019/12/02/5de1dc66d6edf42256fd25988094ee2a/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/5de1dc66d6edf42256fd25988094ee2a/","excerpt":"","text":"# 复制一个文件夹的文件到指定目录下 import os import shutil import time start_time = time.time() # 需要被复制的文件夹 old_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\json1&apos; new_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\json&apos; all_list = os.listdir(old_path) for i in all_list: print(i) name, suffix = i.rsplit(&apos;.json&apos;) name = name.replace(&apos;.&apos;,&apos;&apos;) old_name = old_path + &apos;\\\\&apos; + i new_name = new_path + &apos;\\\\&apos; + name + &quot;.json&quot; shutil.copyfile(old_name, new_name) print(len(all_list)) print(all_list) end_time = time.time() print(end_time-start_time,&apos;秒&apos;)优化速度：import gevent from gevent import monkey monkey.patch_all() import os import shutil import time def copy_file(i): global num num += 1 print(i,num) old_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\baidu_isbn5\\新建文件夹\\txt&apos; new_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\百度isbn-json-非selenium5&apos; name, suffix = i.split(&apos;.json&apos;) name = name.replace(&apos;.&apos;, &apos;&apos;) old_name = old_path + &apos;\\\\&apos; + i new_name = new_path + &apos;\\\\&apos; + name + &quot;.json&quot; shutil.copyfile(old_name, new_name) if __name__ == &apos;__main__&apos;: start_time = time.time() # 需要被复制的文件夹 old_path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\baidu_isbn5\\新建文件夹\\txt&apos; all_list = os.listdir(old_path) gevent_list = [] num = 1 key_num = 0 for i in all_list: key_num += 1 if key_num &gt;= 1500: gevent.joinall(gevent_list) gevent.killall(gevent_list) gevent_list = [] key_num = 0 gevent_list.append(gevent.spawn(copy_file, i)) # print(i) print(len(all_list)) # print(all_list) gevent.joinall(gevent_list) end_time = time.time() print(end_time - start_time, &apos;秒&apos;)","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"使用python发送QQ邮件","slug":"d26c548ac16e7588a2796d7917ca1a2c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.285Z","comments":true,"path":"2019/12/02/d26c548ac16e7588a2796d7917ca1a2c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/d26c548ac16e7588a2796d7917ca1a2c/","excerpt":"","text":"这个邮件发送弄了好一会，后来才发现是我的163邮箱有点问题，后来换成QQ邮箱就好了。记录下自己的，方便日后有用。 import smtplib from email.mime.text import MIMEText from email.header import Header # 第三方 SMTP 服务 mail_host = &quot;smtp.qq.com&quot; # 设置服务器 mail_user = &quot;发送QQ邮箱账号&quot; # 用户名 mail_pass = &quot;自己的口令&quot; # 口令 sender = &apos;发送QQ邮箱账号&apos; receivers = [邮箱1&quot;,&quot;邮箱2&quot;] # 接收邮件，可设置为你的QQ邮箱或者其他邮箱，可以多个，逗号分开 message = MIMEText(&apos;你好&apos;, &apos;plain&apos;, &apos;utf-8&apos;) message[&apos;From&apos;] = Header(&quot;hello——530519174&quot;, &apos;utf-8&apos;) message[&apos;To&apos;] = Header(&quot;title_me&quot;, &apos;utf-8&apos;) subject = &apos;在么在么&apos; # 标题不要含有test等标志 message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;) smtpObj = smtplib.SMTP() smtpObj.connect(mail_host, 25) # 25 为 SMTP 端口号 smtpObj.login(mail_user, mail_pass) smtpObj.sendmail(sender, receivers, message.as_string()) print(&quot;邮件发送成功&quot;)参考：https://www.runoob.com/python/python-email.html","categories":[{"name":"发邮件","slug":"发邮件","permalink":"https://zhaojiafu.github.io/categories/%E5%8F%91%E9%82%AE%E4%BB%B6/"}],"tags":[{"name":"发邮件","slug":"发邮件","permalink":"https://zhaojiafu.github.io/tags/%E5%8F%91%E9%82%AE%E4%BB%B6/"}]},{"title":"爬虫出现301","slug":"ccb52c00ee7d5e1f192cbf9d134a00e9","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.234Z","comments":true,"path":"2019/12/02/ccb52c00ee7d5e1f192cbf9d134a00e9/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/ccb52c00ee7d5e1f192cbf9d134a00e9/","excerpt":"","text":"记录一下我爬虫遇到的一个简单问题，为了不试爬虫过多的出现转向问题，我加了一个allow_redirects=False，默认它是为True的，后来跑着跑着就出现301的问，偶然测试我把allow_redirects=False去掉，就出现响应码正常了。为了防止跳转问题，每次运行完，我把resp.close(),手动关闭连接。 resp = requests.get(url=url, headers=headers,allow_redirects=False)","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"python爬虫","slug":"问题解决/python爬虫","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"selenium之添加cookies模拟登录","slug":"637be4acaec34c2f515a935da5d9d501","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.200Z","comments":true,"path":"2019/12/02/637be4acaec34c2f515a935da5d9d501/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/637be4acaec34c2f515a935da5d9d501/","excerpt":"","text":"我的是Google浏览器，测试好了好久，网上也找了不少博客来看，最终还是弄好了。 cookie_1 = { &apos;name&apos;:&apos;JSESSIONID&apos;, &apos;value&apos;:&apos;改为你需要自己的&apos;, &quot;domain&quot;: &quot;passport.lagou.com&quot;, &quot;expires&quot;: &quot;&quot;, &apos;path&apos;: &apos;/&apos;, &apos;httpOnly&apos;: False, &apos;HostOnly&apos;: False, &apos;Secure&apos;: False, } cookie_2 = { &apos;name&apos;:&apos;ticketGrantingTicketId&apos;, &apos;value&apos;:&apos;改为你自己的&apos;, &quot;domain&quot;: &quot;passport.lagou.com&quot;, &quot;expires&quot;: &quot;&quot;, &apos;path&apos;: &apos;/&apos;, &apos;httpOnly&apos;: False, &apos;HostOnly&apos;: False, &apos;Secure&apos;: False, } driver.get(url=detai_url) driver.add_cookie(cookie_1) driver.add_cookie(cookie_2)注意点：我踩到的一个坑，需要先 driver.get(url=detai_url)，才可以添加cookie_dict，不然一直报错。我刚开始就想着先添加，在访问不少就可以了，结果一直报错，所以注意我踩到的坑，也顺便记录下来，日后需要自己用也更方便。","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"FutureWarning_ Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version","slug":"cc5a14390d75b02017bddc833115adf1","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.263Z","comments":true,"path":"2019/12/02/cc5a14390d75b02017bddc833115adf1/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/cc5a14390d75b02017bddc833115adf1/","excerpt":"","text":"今天测试了一个大牛的去除图片马赛克的代码除了不少的错误，这个十个警告，能完成去重的效果，但是看着警告感觉不爽，所以接着寻找解决办法： 问题：FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. Using TensorFlow backend. D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:516: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_qint8 = np.dtype([(&quot;qint8&quot;, np.int8, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:517: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_quint8 = np.dtype([(&quot;quint8&quot;, np.uint8, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:518: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_qint16 = np.dtype([(&quot;qint16&quot;, np.int16, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:519: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_quint16 = np.dtype([(&quot;quint16&quot;, np.uint16, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:520: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_qint32 = np.dtype([(&quot;qint32&quot;, np.int32, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:525: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. np_resource = np.dtype([(&quot;resource&quot;, np.ubyte, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:541: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_qint8 = np.dtype([(&quot;qint8&quot;, np.int8, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:542: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_quint8 = np.dtype([(&quot;quint8&quot;, np.uint8, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:543: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_qint16 = np.dtype([(&quot;qint16&quot;, np.int16, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:544: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_quint16 = np.dtype([(&quot;quint16&quot;, np.uint16, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:545: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. _np_qint32 = np.dtype([(&quot;qint32&quot;, np.int32, 1)]) D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:550: FutureWarning: Passing (type, 1) or &apos;1type&apos; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &apos;(1,)type&apos;. np_resource = np.dtype([(&quot;resource&quot;, np.ubyte, 1)])解决方法：谷歌搜索找到了俩个问题连接：https://github.com/tensorflow/tensorflow/issues/30427https://github.com/tensorflow/tensorflow/issues/31249想看可以去看看，不想看可以直接执行下面代码： 这个问题意思就是numpy 的版本过低或者过高都会出现警告，只需要先卸载重新指定的1.16.4版本的numpy即可解决此问题，建议把需要执行的这个项目建个虚拟环境测试，以免影响其他代码或者项目 pip uninstall numpy pip install numpy==1.16.4","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"shutil实现对文件或者文件夹的复制，移动","slug":"65149ac30601414fbd3123171a7b1221","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.388Z","comments":true,"path":"2019/12/02/65149ac30601414fbd3123171a7b1221/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/65149ac30601414fbd3123171a7b1221/","excerpt":"","text":"官方文档：https://docs.python.org/3.6/library/shutil.html 复制文件：shutil.copyfile(“oldfile”,”newfile”) #oldfile和newfile都只能是文件shutil.copy(“oldfile”,”newfile”) #oldfile只能是文件夹，newfile可以是文件，也可以是目标目录 复制文件夹：shutil.copytree(“olddir”,”newdir”) #olddir和newdir都只能是目录，且newdir必须不存在 重命名文件（目录）os.rename(“oldname”,”newname”) #文件或目录都是使用这条命令 移动文件（目录）shutil.move(“oldpos”,”newpos”) 其中目的的文件夹可以不存在shutil.move(“D:/知乎日报/latest/一张优惠券，换你的通讯录信息，你愿意吗？.pdf”, “D:/知乎日报/past/“) 移动和删除（rmtree）shutil.rmtree(path[, ignore_errors[, onerror]])删除整个目录树； path 必须指向一个文件夹，但不能是一个指向文件夹的符号链接。 如果 ignore_errors 值为真， 则删除失败时的信息将会被忽略。如果值为假或省略，那么这些错误将通过 onerror 指定的 handler 进行处理； 如果 onerror 被省略，则会 raise 一个异常。 如果指定了 onerror，则必须是包含三个参数： function, path 和 excinfo的 callable 。 第一个参数 function ， 该函数用于 raise 异常；该函数可以是 os.path.islink(), os.listdir(), os.remove(), os.rmdir()。 第二个参数 path 为传递给第一个参数的路径。 第三个参数 excinfo 为 sys.exc_info()返回的异常信息。 通过 onerror raise 的异常不会被捕捉。 shutil.copy() 模块具体用法 shutil.copy(source, destination)（这种复制形式使用的前提是必须要有 os.chdir(你要处理的路径)） source/destination 都是字符串形式的路劲，其中destination是： 1、可以是一个文件的名称，则将source文件复制为新名称的destination 2、可以是一个文件夹，则将source文件复制到destination中 3、若这个文件夹不存在，则将source目标文件内的内容复制到destination中 shutil.copytree() 模块具体用法 shutil.copytree(source, destination)（这种复制形式无需 os.chdir() 便可操作） source 、 destination 可以是不同的文件夹、不同的硬盘空间， 可以更为方便的实现文件的备份","categories":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"lxml模块对xpath定位的元素进行转HTML源码","slug":"cbb467b2802079ffbe86ff2ee57648cc","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.380Z","comments":true,"path":"2019/12/02/cbb467b2802079ffbe86ff2ee57648cc/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/cbb467b2802079ffbe86ff2ee57648cc/","excerpt":"","text":"需求：如何将xpath定位到的元素进行转为HTML源码 方法1：使用from lxml.html import tostring的tostring方法功能from lxml.html import tostring from lxml import etree html_get = etree.HTML(resp_text) div_ok = html_get.xpath(&apos;//div[@id=&quot;mw-content-text&quot;]&apos;)[0] div_content = tostring(div_ok).decode(&apos;utf-8&apos;)方法2（推荐使用，经过我效率测试，使用etree返回的html使用xpath定位到的元素，还使用etree转换为HTML源码效率更快）：from lxml import etree html_get = etree.HTML(resp_text) div_ok = html_get.xpath(&apos;//div[@id=&quot;mw-content-text&quot;]&apos;)[0] print(div_ok,type(div_ok)) div_content = etree.tostring(div_ok, pretty_print=True, method=&apos;html&apos;).decode(&apos;utf-8&apos;) # 转为字符串","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"lxml","slug":"lxml","permalink":"https://zhaojiafu.github.io/tags/lxml/"}]},{"title":"win32api之python自动化模拟键盘和selenium模拟鼠标","slug":"c6f5df7224ad0ad8fb63a2c9fdde4e71","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.936Z","comments":true,"path":"2019/12/02/c6f5df7224ad0ad8fb63a2c9fdde4e71/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/c6f5df7224ad0ad8fb63a2c9fdde4e71/","excerpt":"","text":"# 1、win32api模拟键盘 import win32api import win32con # 输入V键 win32api.keybd_event(86, 0, 0, 0) # enter win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0) time.sleep(2) # 输入img img = [73, 77, 71] for i in img: win32api.keybd_event(i, 0, 0, 0) # enter time.sleep(0.5) win32api.keybd_event(i, 0, win32con.KEYEVENTF_KEYUP, 0) # 释放按键 time.sleep(1) # enter,enter,Y,enter final = [13, 13, 37, 13] for i in final: win32api.keybd_event(i, 0, 0, 0) # enter time.sleep(0.5) win32api.keybd_event(i, 0, win32con.KEYEVENTF_KEYUP, 0) # 释放按键2、模拟鼠标操作建议学习参考：https://www.cnblogs.com/kongzhagen/p/6600113.htmlhttps://www.jb51.net/article/92682.htm 链式写法 ActionChains(driver).click(clk_btn).context_click(right_btn).perform() 分步写法 # 补全化action actions = ActionChains(driver) # 装载单击动作 actions.click() # 装载右击动作 actions.context_click() # 执行所有被装载的动作 actions.perform()方法列表 perform(self): ---执行链中的所有动作 reset_actions(self): ---清除存储在远端的动作 click(self, on_element=None): ---鼠标左键单击 click_and_hold(self, on_element=None): --鼠标左键单击，不松开 context_click(self, on_element=None): ---鼠标右键单击 double_click(self, on_element=None): ---鼠标左键双击 drag_and_drop(self, source, target): ---拖拽到某个元素后松开 drag_and_drop_by_offset(self, source, xoffset, yoffset): ---拖拽到某个坐标后松开 key_down(self, value, element=None): ---某个键盘键被按下 key_up(self, value, element=None): ---松开某个键 move_by_offset(self, xoffset, yoffset): ---鼠标移动到某个坐标 move_to_element(self, to_element): ---鼠标移动到某个元素 move_to_element_with_offset(self, to_element, xoffset, yoffset): ---移动到距某个元素（左上角）多少的位置 release(self, on_element=None): ---在某元素上松开鼠标 send_keys(self, *keys_to_send): ---发送某些值到当前焦点元素 send_keys_to_element(self, element, *keys_to_send): ---发送某些值到指定元素","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"2019各个省会城市全新DNS大全一","slug":"6db3d143093797cb4ca8caa3b1f5f5f5","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.409Z","comments":true,"path":"2019/12/02/6db3d143093797cb4ca8caa3b1f5f5f5/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/6db3d143093797cb4ca8caa3b1f5f5f5/","excerpt":"","text":"114.114.114.114 和 114.114.115.115114.114.114.114/114.114.115.115114.114.114.119 和 114.114.115.119114.114.114.110 和 114.114.115.110谷歌DNS服务器8.8.8.8/8.8.4.4IBM的DNS服务器9.9.9.91.1.1.1168.95.192.1168.126.63.1中国互联网络中心：1.2.4.8、210.2.4.8、101.226.4.6（电信及移动）、123.125.81.6（联通）阿里DNS：223.5.5.5、223.6.6.6googleDNS：8.8.8.8、8.8.4.4openDNS：208.67.222.222 、208.67.220.220 、208.67.222.220 、208.67.220.222腾讯 119.29.29.29百度 180.76.76.76 首选：119.29.29.29备选：182.254.116.116 首选：114.114.114.114备选：114.114.114.115 首选：223.5.5.5备选：223.6.6.6 您好！通常默认的dns最快，但也最垃圾(比如冷门网站解析失败)。可以用114.114.114.114这个，或者180.76.76.76。经常上国外网站就8.8.8.8 2019各个省会城市全新DNS大全一3392次阅读分享2019全新各个省会城市DNS大全，主要是为挂机赚钱的朋友查看。 有哪几个电脑挂机赚钱项目需要IP和DNS一致？ 听云电脑挂机赚钱和博睿电脑挂机赚钱。 如果IP所在地和DNS不匹配，挂机软件不会自动执行任务。 直接CTRL＋F ，输入你所在的城市来查找相应的DNS。 没找着？2019各大省会城市全新DNS大全二杭州网通的DNS : 202.96.96.68, 202.96.103.36 从左到右依次为：省-市-运营商-首选DNS-备用DNS 北京市 中国移动DNS：221.130.33.60，221.130.33.52 北京市 中国铁通DNS：61.233.9.9，211.98.2.4 北京市 中国联通DNS：202.106.46.151，202.106.195.68 北京市 中国电信DNS：219.141.136.10，218.30.26.68 北京市 世纪互联DNS：59.151.60.10，223.5.5.5 北京市 电信通DNS：211.167.230.100，211.167.230.200 上海市 中国移动DNS：211.136.150.66，211.136.112.50 上海市 中国联通DNS：210.22.70.3，210.22.84.3 上海市 中国电信DNS：180.168.255.118，116.228.111.18 上海市 长城宽带DNS：211.161.192.73，211.161.192.1 上海市 宽带通DNS：101.44.0.101，101.44.0.198 上海市 中国铁通DNS：222.44.10.48，211.98.2.4 天津市 中国移动DNS：211.137.160.5，211.137.160.185 天津市 中国联通DNS：202.99.96.68，202.99.104.68 天津市 中国电信DNS：219.150.32.132，123.150.150.150 重庆市 中国移动DNS：218.201.4.3，218.201.17.2 重庆市 中国联通DNS：221.7.92.98，221.5.203.98 重庆市 中国电信DNS：61.128.128.68，61.128.192.68 河北省 石家庄市 中国移动DNS：111.11.1.1，111.11.11.1 河北省 石家庄市 中国联通DNS：202.99.160.68，202.99.166.4 河北省 石家庄市 中国电信DNS：222.222.222.222，222.222.202.202 吉林省 长春市 中国移动DNS：211.141.0.99，211.141.16.99 吉林省 长春市 中国铁通DNS：222.34.19.100，222.34.19.99 吉林省 长春市 中国联通DNS：202.98.0.68，202.98.5.68 吉林省 长春市 中国电信DNS：219.149.194.55，219.149.194.56 黑龙江省 哈尔滨市 中国移动DNS：218.203.59.116，218.203.59.216 黑龙江省 哈尔滨市 中国联通DNS：202.97.224.68，202.97.224.69 黑龙江省 哈尔滨市 中国电信DNS：118.118.118.51，112.100.100.100 辽宁省 沈阳市 中国移动DNS：211.137.32.178，211.140.197.58 辽宁省 沈阳市 中国联通DNS：202.96.64.68，202.96.69.38 辽宁省 沈阳市 中国电信DNS：219.148.204.66，219.149.6.99 辽宁省 大连市 中国联通DNS：202.96.69.38 ，202.96.64.68 内蒙古 呼和浩特市 中国移动DNS：211.138.91.1，211.138.91.2 内蒙古 呼和浩特市 中国联通DNS：202.99.224.8，202.99.224.68 内蒙古 呼和浩特市 中国电信DNS：222.74.1.200，222.74.126.230 新疆 乌鲁木齐市 中国移动DNS：218.202.152.130，218.202.152.131 新疆 乌鲁木齐市 中国联通DNS：221.7.1.20，221.7.1.21 新疆 乌鲁木齐市 中国电信DNS：61.128.114.134，61.128.114.167 西藏 拉萨市 中国移动DNS：211.139.73.50，211.139.73.42 西藏 拉萨市 中国联通DNS：221.13.65.35，221.13.65.56 西藏 拉萨市 中国电信DNS：202.98.226.71，202.98.224.71 山西省 太原市 中国移动DNS：211.138.106.2，211.138.106.7 山西省 太原市 中国联通DNS：202.99.192.66，202.99.192.68 山西省 太原市 中国电信DNS：59.49.49.49，118.118.118.53 江苏省 南京市 中国移动DNS：221.131.143.69，112.0.4.55 江苏省 南京市 中国联通DNS：221.6.4.66，58.240.57.33 江苏省 南京市 中国电信DNS：218.2.135.1，61.147.37.1 江苏省 无锡市 中国电信DNS：221.228.255.1，218.2.135.1 浙江省 杭州市 中国移动DNS：211.140.13.188，211.140.188.188 浙江省 杭州市 中国联通DNS：221.12.1.227，221.12.33.227 浙江省 杭州市 华数网通DNS：218.108.248.245，218.108.248.228 浙江省 杭州市 中国电信DNS：202.101.172.35，202.101.172.47 浙江省 温州市 中国电信DNS：61.153.177.196，61.153.177.197 浙江省 温州市 中国移动DNS：211.140.13.188，211.140.188.188 安徽省 合肥市 中国移动DNS：211.138.180.2，211.138.180.3 安徽省 合肥市 中国联通DNS：218.104.78.2，58.242.2.2 安徽省 合肥市 中国电信DNS：61.132.163.68，202.102.213.68 参考网站：https://www.jb51.net/network/638994.htmlhttp://www.lehezhuan.com/102.htmlhttp://www.lehezhuan.com/103.html","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"},{"name":"DNS","slug":"DNS","permalink":"https://zhaojiafu.github.io/tags/DNS/"}]},{"title":"python之查询window系统文件夹下的文件数量","slug":"c242e7787d33334b21d5d4f05be6b4a8","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:37.136Z","comments":true,"path":"2019/12/02/c242e7787d33334b21d5d4f05be6b4a8/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/c242e7787d33334b21d5d4f05be6b4a8/","excerpt":"","text":"# python之查询window系统文件夹下的文件数量 import os path = r&apos;E:\\008-baokong\\006_renqunjuji&apos; os.chdir(path) key_list = os.listdir() print(len(key_list))","categories":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/categories/python/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/tags/python/"}]},{"title":"分享一下我收藏很久的一些代替百度的搜索引擎网站","slug":"71bb575e4de932962c74aa877e9745bd","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.837Z","comments":true,"path":"2019/12/02/71bb575e4de932962c74aa877e9745bd/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/71bb575e4de932962c74aa877e9745bd/","excerpt":"","text":"# 说明：如果看到的时间和我分享时间有差别，估计会有些网站打不开，不过用肯定够用得了。身为一个程序员，怎么能没有几个不错的网站，这也是我自己之前收藏很久的网站，分享给大家。 其他搜索引擎列表联想国外英文:https://start.lenovo.com 以谷歌搜索作为数据驱动巴西搜索引擎:https://busca.uol.com.br 以谷歌搜索作为数据驱动 阉割版谷歌:http://caup.cn 萌搜网址 https://mengso.com内测邀请码：meng 注重隐私保护的搜索引擎:https://www.hotbot.com (美国)热衷于公益搜索引擎:https://www.ecosia.org （德国）其他国家的:https://www.qwant.com (法国)https://yandex.ru (俄罗斯) 谷歌镜像（推荐，笔者自己也使用，如果都不能使用，可以评论联系我，我会在找些更新博客）目前还能用的谷歌镜像，不错的热心人士搭建的谷歌镜像(在此非常感谢) 镜像网站1(推荐收藏)谷歌镜像2(推荐收藏)谷歌镜像3(推荐收藏)秘籍搜索：(推荐收藏)","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}]},{"title":"selenium之常见异常","slug":"be2ac9bdaed28635983f7e1d18f7ea11","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.823Z","comments":true,"path":"2019/12/02/be2ac9bdaed28635983f7e1d18f7ea11/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/be2ac9bdaed28635983f7e1d18f7ea11/","excerpt":"","text":"# selenium的常见异常 Exceptions（异常）Python 自带的异常，所有异常的基类。 异常： selenium.common.exceptions.ElementNotSelectableException(msg=None, screen=None, stacktrace=None) 依据： selenium.common.exceptions.InvalidElementStateException 当尝试选择一个未能选中的元素时，异常会抛出 异常： selenium.common.exceptions.ElementNotVisibleException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.InvalidElementStateException 虽然当一个元素呈现在DOM，但它是不可见的，因此不能够以进行交互，异常将抛出 异常： selenium.common.exceptions.ErrorInResponseException(response, msg)依据: selenium.common.exceptions.WebDriverException 服务器端有错误时，异常将抛出（这个原因可能是因为Firefox插件或者远程server） 异常： selenium.common.exceptions.ImeActivationFailedException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 激活输入法失败时异常会抛出。异常： selenium.common.exceptions.ImeNotAvailableException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 当输入法不支持的时候异常将抛出。异常： selenium.common.exceptions.InvalidCookieDomainException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 试图在不同的domain而不是目前的URL中添加一个cookie时抛出异常异常： selenium.common.exceptions.InvalidElementStateException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 无效的元素状态异常： selenium.common.exceptions.InvalidSelectorException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.NoSuchElementException 当选择器没有返回一个web元素时，异常抛出。异常： selenium.common.exceptions.InvalidSwitchToTargetException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 当切换的窗口或者框架不存在的时候，异常将抛出。异常： selenium.common.exceptions.MoveTargetOutOfBoundsException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 提供给ActionChainsmovable()方法的目标无效时，异常将抛出，例如：超出文件外异常： selenium.common.exceptions.NoAlertPresentException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 切换到没有呈现的警示时抛出异常 异常： selenium.common.exceptions.NoSuchAttributeException(msg=None, screen=None, stacktrace=None)依据： selenium.common.exceptions.WebDriverException 当元素的属性不能被发现时异常抛出 异常： selenium.common.exceptions.NoSuchElementException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 元素不能被找到时异常抛出异常： selenium.common.exceptions.NoSuchFrameException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.InvalidSwitchToTargetException 需要切换的目标框架不存在时，异常抛出异常： selenium.common.exceptions.NoSuchWindowException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.InvalidSwitchToTargetException 需要切换的目标窗口不存在时，异常抛出异常： selenium.common.exceptions.RemoteDriverServerException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 异常： selenium.common.exceptions.StaleElementReferenceException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 一个参考的元素现在是“过时”时抛出异常。 “过时”是指这个元素不再出现在页面的Dom中。异常： selenium.common.exceptions.TimeoutException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 一条命令在足够的时间内没有完成则会抛出异常异常： selenium.common.exceptions.UnableToSetCookieException(msg=None, screen=None, stacktrace=None)依据: selenium.common.exceptions.WebDriverException 当一个驱动程序无法设置cookie时抛出异常。 异常： selenium.common.exceptions.UnexpectedAlertPresentException(msg=None, screen=None, stacktrace=None)依据： selenium.common.exceptions.WebDriverException 当一个意外的警告出现时将抛出异常。 异常： selenium.common.exceptions.UnexpectedTagNameException(msg=None, screen=None, stacktrace=None)依据： selenium.common.exceptions.WebDriverException 辅助类没有获取到期待的web元素时，会抛出异常 异常： selenium.common.exceptions.WebDriverException(msg=None, screen=None, stacktrace=None)依据： exceptions.Exception WebDriver基础的异常类 参考：https://blog.csdn.net/u010983763/article/details/77196619https://www.cnblogs.com/z-x-y/p/9197339.html","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"python 对Windows进行关机_重启","slug":"bbb4f9eabb7d27167f505dd9937067fa","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.775Z","comments":true,"path":"2019/12/02/bbb4f9eabb7d27167f505dd9937067fa/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/bbb4f9eabb7d27167f505dd9937067fa/","excerpt":"","text":"用CMD命令进行关机/重启步骤： 1.win+R，换出输入框 2.在输入框输入命令，如关机：shutdown -s -t 20，该命令是20秒后关机。 命令说明 -s 关机 -r 重启 -t 时间，后面是数字是你要设置的秒数 -a 取消命令，如果要取消定时命令可以 shutdown -a python中实现：import os from os import system # 关机 # os.system(&quot;shutdown -s -t 60 &quot;) # 重启 system(&quot;shutdown -r -t 100&quot;)","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"cv2.matchTemplate模板匹配和cv2.minMaxLoc()函数","slug":"75f539f52656e98d665183960dcaa299","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.937Z","comments":true,"path":"2019/12/02/75f539f52656e98d665183960dcaa299/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/75f539f52656e98d665183960dcaa299/","excerpt":"","text":"# 一、模板匹配函数中文说明安装cv2： pip install opencv-python1、目标匹配函数：cv2.matchTemplate(image, templ, method, result=None, mask=None)image：待搜索图像templ：模板图像result：匹配结果method：计算匹配程度的方法 2、匹配方法关于匹配方法，使用不同的方法产生的结果的意义可能不太一样，有些返回的值越大表示匹配程度越好，而有些方法返回的值越小表示匹配程度越好。 关于参数 method：CV_TM_SQDIFF 平方差匹配法：该方法采用平方差来进行匹配；最好的匹配值为0；匹配越差，匹配值越大。CV_TM_CCORR 相关匹配法：该方法采用乘法操作；数值越大表明匹配程度越好。CV_TM_CCOEFF 相关系数匹配法：1表示完美的匹配；-1表示最差的匹配。CV_TM_SQDIFF_NORMED 归一化平方差匹配法 CV_TM_CCORR_NORMED 归一化相关匹配法 CV_TM_CCOEFF_NORMED 归一化相关系数匹配法 3、通过cvMinMaxLoc获取最后的最佳匹配结果二、python_opencv中cv2.minMaxLoc()函数的使用cv2.minMaxLoc(src, mask=None)src是一个矩阵。 函数功能：假设有一个矩阵a,现在需要求这个矩阵的最小值，最大值，并得到最大值，最小值的索引。咋一看感觉很复杂，但使用这个cv2.minMaxLoc()函数就可全部解决。函数返回的四个值就是上述所要得到的。 具体看个例子: import numpy as np import cv2 a=np.array([[2,3,4,5],[5,67,8,9],[1,3,4,5]]) print(a) min_val,max_val,min_indx,max_indx=cv2.minMaxLoc(a) print(min_val,max_val,min_indx,max_indx)输出结果：[[ 2 3 4 5] [ 5 67 8 9] [ 1 3 4 5]]1.0 67.0 (0, 2) (1, 1)说明这个矩阵a的最小值为1.0，索引为（0，2），最大值为67.0索引为（1，1） 三、应用到图片匹配中，获取缺口信息：1、详细版： import cv2 import numpy as np import matplotlib.pyplot as plt img = cv2.imread(&apos;img_all.jpg&apos;, 0) img2 = img.copy() template = cv2.imread(&apos;img_splice.png&apos;, 0) # cv2.imshow(&apos;messi&apos;, img) # cv2.imshow(&apos;face&apos;, template) # cv2.waitKey(0) # cv2.destroyAllWindows() w, h = template.shape[::-1] # All the 6 methods for comparison in a list # methods = [&apos;cv2.TM_CCOEFF&apos;, &apos;cv2.TM_CCOEFF_NORMED&apos;, &apos;cv2.TM_CCORR&apos;, # &apos;cv2.TM_CCORR_NORMED&apos;, &apos;cv2.TM_SQDIFF&apos;, &apos;cv2.TM_SQDIFF_NORMED&apos;] meth = &apos;cv2.TM_CCOEFF&apos; img = img2.copy() &apos;&apos;&apos; exec可以用来执行储存在字符串货文件中的python语句 例如可以在运行时生成一个包含python代码的字符串 然后使用exec语句执行这些语句 eval语句用来计算存储在字符串中的有效python表达式 &apos;&apos;&apos; method = eval(meth) # 匹配应用 res = cv2.matchTemplate(img, template, method) mn_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res) # print(&apos;mn_val&apos;,mn_val) # print(&apos;max_val&apos;,max_val) # print(&apos;min_loc&apos;,min_loc) # print(&apos;max_loc&apos;,max_loc) # 使用不同的方法，对结果的解释不同 # 方法判断 # if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]: # top_left = min_loc # else: # top_left = max_loc top_left = max_loc print(&apos;偏移像素&apos;,top_left[0]) bottom_right = (top_left[0] + w, top_left[1] + h) cv2.rectangle(img, top_left, bottom_right, 255, 2) plt.subplot(121), plt.imshow(res, cmap=&apos;gray&apos;) plt.title(&apos;Matching Result&apos;), plt.xticks([]), plt.yticks([]) plt.subplot(122), plt.imshow(img, cmap=&apos;gray&apos;) plt.title(&apos;Detected Point&apos;), plt.xticks([]), plt.yticks([]) plt.suptitle(&apos;method: &apos; + meth) plt.show()2、我破解验证码需要的简化版 import cv2 img = cv2.imread(&apos;img_all.jpg&apos;, 0) img2 = img.copy() template = cv2.imread(&apos;img_splice.png&apos;, 0) w, h = template.shape[::-1] # methods = [&apos;cv2.TM_CCOEFF&apos;, &apos;cv2.TM_CCOEFF_NORMED&apos;, &apos;cv2.TM_CCORR&apos;,&apos;cv2.TM_CCORR_NORMED&apos;, &apos;cv2.TM_SQDIFF&apos;, &apos;cv2.TM_SQDIFF_NORMED&apos;] meth = &apos;cv2.TM_CCOEFF&apos; img = img2.copy() &apos;&apos;&apos; exec可以用来执行储存在字符串货文件中的python语句 例如可以在运行时生成一个包含python代码的字符串 然后使用exec语句执行这些语句 eval语句用来计算存储在字符串中的有效python表达式 &apos;&apos;&apos; method = eval(meth) # 匹配应用 res = cv2.matchTemplate(img, template, method) mn_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res) top_left = max_loc[0] print(&apos;偏移像素&apos;,top_left)参考博客：https://blog.csdn.net/jacky_ponder/article/details/69396909https://blog.csdn.net/qq_29023939/article/details/81023062","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"opencv","slug":"opencv","permalink":"https://zhaojiafu.github.io/tags/opencv/"}]},{"title":"python3之url编码互转","slug":"729467bc0fa4969c6c2a740972f5dc03","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.820Z","comments":true,"path":"2019/12/02/729467bc0fa4969c6c2a740972f5dc03/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/729467bc0fa4969c6c2a740972f5dc03/","excerpt":"","text":"# 1、url编码 #先引入模块 from urllib.request import quote ff = &apos;摄像头&apos; ff = quote(ff) print(ff)2、url解码# 解码是另一个模块 from urllib import parse aa = &apos;%E6%91%84%E5%83%8F%E5%A4%B4&apos; ret = parse.unquote(aa) print(ret)","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"电脑的记事本如何显示行数","slug":"b992323025a09dcfcdd97df16f27b538","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.911Z","comments":true,"path":"2019/12/02/b992323025a09dcfcdd97df16f27b538/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/b992323025a09dcfcdd97df16f27b538/","excerpt":"","text":"1、选择菜单中的“格式”选项卡，把“自动换行”前面的对号去掉2、选择菜单中的“查看”选项卡，把“状态栏”前面的对号选上这样看记事本的状态栏就可以显示当前光标的行和列了。","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"python SyntaxError_ Non-UTF-8 code starting with '_xb9'","slug":"7385a1df18ec0db0e8a6d08efca90303","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.544Z","comments":true,"path":"2019/12/02/7385a1df18ec0db0e8a6d08efca90303/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/7385a1df18ec0db0e8a6d08efca90303/","excerpt":"","text":"## 问题 原错误： SyntaxError: Non-UTF-8 code starting with &apos;\\xb9&apos; in file D:/zjf_workspace/自己测试用的/027、百家号/demo-1、get_baijiahao.py on line 8, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details我的python文件执行报错，这个我也知道是编码问题，但是刚开始不知道如何解决，就百度了一下，SyntaxError: Non-UTF-8 code starting with ‘\\xb9’ 解决：在py文件导入模块之前加入# coding=gbk即可：反正我的问题就这样解决了。 # coding=gbk参考博客：https://blog.csdn.net/wyb_hardworking/article/details/19562971","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"scrapy 爬虫之添加代理IP俩种方式","slug":"89e66e5883aa1ee62b18fcb16a95c86d","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.480Z","comments":true,"path":"2019/12/02/89e66e5883aa1ee62b18fcb16a95c86d/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/89e66e5883aa1ee62b18fcb16a95c86d/","excerpt":"","text":"# 方式一： 一.重写start_request方法 def start_requests(self):中写入 yield scrapy.Request(url=url, meta={‘proxy’: ‘http://117.90.2.212:9000&#39;}, callback=self.parse) 方式二二、在中间件中加入代理IP，在把中间的类名加入setting中。 1.在middlewares.py中增加一个类，取名：ProxyMiddleware即代理中间件： 2、在 def process_request(self, request, spider)方法中加入 request.meta[&quot;proxy&quot;] = &apos;http://117.90.2.212:9000&apos; 3、在setting中加入这个中间件的类 DOWNLOADER_MIDDLEWARES = { &apos;middlewares.ProxyMiddleware&apos;: 90, }","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"},{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"使用python base64模块实现 base64与图片的转换","slug":"b4f0a6fa884af3cc71178037adb6fed6","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:37.395Z","comments":true,"path":"2019/12/02/b4f0a6fa884af3cc71178037adb6fed6/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/b4f0a6fa884af3cc71178037adb6fed6/","excerpt":"","text":"需求：有时候，图片需要储存到数据库时，可以进行base64，进行先转换再进行保存到数据库，然后取出来时在使用base64，解码转换： base64与图片互转直接上代码，需要的可以参考。 import base64 # 图片转base64 def from_photo_to_base64(path): with open(path, &quot;rb&quot;) as file_photo: # 转为二进制格式 ret = file_photo.read() base64_data = base64.b64encode(ret) # 使用base64进行加密 print(base64_data) with open(&apos;base64.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;) as file_w_base64: # 写成文本格式 file_w_base64.write(base64_data.decode(&apos;utf-8&apos;)) # base64转图片 def from_base64_to_photo(path): with open(path, &quot;r&quot;) as file_read_base64: base64_str = file_read_base64.read() imgdata = base64.b64decode(base64_str) with open(&apos;美女2.jpg&apos;, &apos;wb&apos;) as file_w_photo: file_w_photo.write(imgdata) if __name__ == &apos;__main__&apos;: path = &quot;美女.jpg&quot; from_photo_to_base64(path) path2 = &apos;base64.txt&apos; from_base64_to_photo(path2)","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"},{"name":"base64与图片的转换","slug":"base64与图片的转换","permalink":"https://zhaojiafu.github.io/tags/base64%E4%B8%8E%E5%9B%BE%E7%89%87%E7%9A%84%E8%BD%AC%E6%8D%A2/"}]},{"title":"python 使用selenium 批量获取url的cookies","slug":"acbe5bb1443aaafc1acd73cf97c0dbc3","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:37.256Z","comments":true,"path":"2019/12/02/acbe5bb1443aaafc1acd73cf97c0dbc3/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/acbe5bb1443aaafc1acd73cf97c0dbc3/","excerpt":"","text":"需求：有时候有些网站的反爬对cookies有限制，比如亚马逊会结合cookies+ip+user-agent,进行反爬，然后这时候需要找代理ip,然后每次随机一个代理ip,user_agent也要每次随机一个，代理ip高匿性和user-agent，我之前写过，不会的可以参考下面，这次博客主要写我使用selenium批量搜集cookies的方法； 这个是我之前写的user-agent博客，里面有好多我搜集去重之后的，够你用的https://blog.csdn.net/weixin_42081389/article/details/90291488 ip高匿性进行判断，可以参考我之前的博客，高匿性参考我推荐的方法（判断高匿代理ip的另外俩个方法（刚找到的，推荐这个））https://blog.csdn.net/weixin_42081389/article/details/88528285 批量获取cookies代码本人不喜欢说废话，直接上代码，需要的可以copy走，如果觉得不错或者对你有帮助，给我点个赞哈 (#^.^#) from selenium import webdriver def get_driver(): chromeOptions = webdriver.ChromeOptions() # 设置代理 # ip = &apos;137.59.50.78:8080&apos; chromeOptions.add_argument(&quot;--proxy-server=http://137.59.50.78:8080&quot;) # 不加载图片设置 prefs = {&apos;profile.default_content_setting_values&apos;: {&apos;images&apos;: 2}} chromeOptions.add_experimental_option(&apos;prefs&apos;, prefs) # 配置参数 browser = webdriver.Chrome(chrome_options=chromeOptions) browser.implicitly_wait(20) # 查看本机ip，查看代理是否起作用 return browser def get_cookies(cookie_dict): cookie_list = [] # cookie_dict = [{&apos;domain&apos;: &apos;www.amazon.com&apos;, &apos;expiry&apos;: 1624241135, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;csm-hit&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;tb:s-83ZY0YEFA6K823JDFZ0R|1563761128250&amp;t:1563761135902&amp;adb:adblk_no&apos;}, {&apos;domain&apos;: &apos;.amazon.com&apos;, &apos;expiry&apos;: 2082787201.750852, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;session-token&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;T0RzE0GdgQ7YaoWEZ4BPcs+ac6CstOzAtvEyACFtAYxPyufPdXVEMcC5dYURLBaEv7LIKnyTQWMc6ldHQDH6kPosJkV/Vj7UOEqoYXKOA0U4NVqnvz063mhC6hTDRmhLxbMNRsiqAJo9ql1KMokVNlUtHiJUlYkrS4madKNxZeTfCYmNsxg37FVPyOC1roI6&apos;}, {&apos;domain&apos;: &apos;.amazon.com&apos;, &apos;expiry&apos;: 2082787201.580912, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;session-id&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;140-6940904-2207954&apos;}, {&apos;domain&apos;: &apos;.amazon.com&apos;, &apos;expiry&apos;: 2082787201.580891, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;session-id-time&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;2082787201l&apos;}, {&apos;domain&apos;: &apos;.amazon.com&apos;, &apos;expiry&apos;: 2082787201.678984, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;x-wl-uid&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1s3BYPM0IPZSIlnsFHdNB2u2u7Iose7A6GR5udQ/qsfwlZHiKok7togAiSq4EnuJQEETkIH4kmBU=&apos;}, {&apos;domain&apos;: &apos;.amazon.com&apos;, &apos;expiry&apos;: 2082787201.580857, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;ubid-main&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;135-4849511-5650047&apos;}, {&apos;domain&apos;: &apos;.amazon.com&apos;, &apos;expiry&apos;: 2082787201.982547, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;i18n-prefs&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;USD&apos;}] for i in cookie_dict: name = i[&apos;name&apos;] value = i[&apos;value&apos;] cookie_split = &quot;{}={}&quot;.format(name, value) cookie_list.append(cookie_split) cookie = &apos;;&apos;.join(cookie_list) return cookie def run(url_list): browser = get_driver() for url in url_list: browser.get(url) cookie_dict = browser.get_cookies() cookie = get_cookies(cookie_dict) with open(&apos;cookies.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) as file_write_cookie: file_write_cookie.write(cookie + &apos;\\n&apos;) print(cookie) if __name__ == &apos;__main__&apos;: with open(&apos;detail_url.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;) as file_read_url: ret = file_read_url.readlines() url_list = (i.strip() for i in ret) run(url_list)使用说明：主要你要对于你需要批量获取cookies的网址多个url搜集，我自己找了100多个地址吧，放到detail_url.txt文件里面，你把这个替换成你需要的而地址，就可以直接用代码了。如果有帮助，可有给我点个赞哈?","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"Python爬虫之windows10安装scrapy","slug":"ac4709166c2060ebb9cdcea4fd534e50","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.730Z","comments":true,"path":"2019/12/02/ac4709166c2060ebb9cdcea4fd534e50/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/ac4709166c2060ebb9cdcea4fd534e50/","excerpt":"","text":"@[toc] Python爬虫之windows10安装scrapy一、scrapy的配置第一次写博客，既可以分享学习，也可以记录下自己学习时遇到的问题，如果日后再需要也方便自己使用，当做补充，上网搜了好多类似的分享，总算可以弄成功了。有点小紧张，嘻嘻，加油，希望对我们学习都用帮助！（我的是win10 64位，如果不是可以搜索相关的设置，我没有尝试，我在已经装好Python3.5版本下，如果没有安装Python，请先安装Python再进行下面可以参考：https://www.cnblogs.com/Alier/p/6362652.html） 1、配置lxml模块国内源参考：https://www.cnblogs.com/sunnydou/p/5801760.htmlpip install lxml -i http://mirrors.aliyun.com/pypi/simple/2、配置cryptography模块pip install cryptography -i http://mirrors.aliyun.com/pypi/simple/3、配置pywin32模块pip install pywin32 -i http://mirrors.aliyun.com/pypi/simple/4、 配置setuptools模块pip install setuptools -i http://mirrors.aliyun.com/pypi/simple/5、 配置Twisted模块这个我当时需要下载安装，出现报错缺VC++ 14.0解决措施，类似：https://blog.csdn.net/weixin_42117682/article/details/81412257你可以先尝试安装试试： pip install Twisted -i http://mirrors.aliyun.com/pypi/simple/报错再去下载网址：https://www.lfd.uci.edu/~gohlke/pythonlibs/ 6、配置pyOpenSSL模块pip install pyOpenSSL -i http://mirrors.aliyun.com/pypi/simple/7、配置scrapy模块pip install scrapy -i http://mirrors.aliyun.com/pypi/simple/剩下就可以去爬取网站测试了！！！参考学习博客链接： 1、超简单Windows安装Scrapy (仅需一步)https://www.cnblogs.com/lfoder/p/6565088.html2、Twisted-18.7.0-cp37-cp37m-win_amd64.whl下载，以及安装Scrapy时，报错缺VC++ 14.0解决措施https://blog.csdn.net/weixin_42117682/article/details/814122573、下载Twisted网址https://www.lfd.uci.edu/~gohlke/pythonlibs/4、安装下载的Twistedhttps://www.cnblogs.com/zfquan/p/8093297.html","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"windows pip升级模块","slug":"a44bb5a274cfcf851123946c7307f0dc","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:37.072Z","comments":true,"path":"2019/12/02/a44bb5a274cfcf851123946c7307f0dc/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/a44bb5a274cfcf851123946c7307f0dc/","excerpt":"","text":"# 一、使用pip批量更新 查看可更新包： pip list --outdated --format=columns 批量下载并更新： pip install pip-review pip-review --local --interactive二、升级一个模块pip install --upgrade requests // mac,linux,unix 在命令前加 sudo -H安装指定版本： pip install tensorflow==1.11.0三、Linux中升级$ pip freeze --local | grep -v &apos;^-e&apos; | cut -d = -f 1 | xargs -n1 pip install -U pip list -o --format legacy|awk &apos;{print $1}&apos;` ; do pip install --upgrade $i; done参考学习网址：https://blog.csdn.net/sunqiande88/article/details/80155587https://blog.csdn.net/kl28978113/article/details/77980778 四、python 模块的批量导出和批量安装批量导入模块内容 pip freeze &gt; requirements.txt批量安装C:\\Users\\Administrator\\requirements.txt 指的是安装模块requirements.txt的绝对路径。 pip install -r C:\\Users\\Administrator\\requirements.txt","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"Linux系统tar、rar、7z、zip压缩解压缩命令使用","slug":"0051363feac8bb4fe4ea63c8aa44d13c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.466Z","comments":true,"path":"2019/12/02/0051363feac8bb4fe4ea63c8aa44d13c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/0051363feac8bb4fe4ea63c8aa44d13c/","excerpt":"","text":"# 1.tar压缩解压缩 tar命令常见参数：必须的参数：（3个参数不能共存）-c ：创建压缩文件c代表create。-x ：解压缩文件-t ：查看压缩包里面的文件辅助参数：-z ：用 gzip 压缩/解压缩-j ：用 bzip2 压缩/解压缩-v ：显示压缩/解压缩的进度条-f ：使用档名（注意：f后面不要接参数，也就是说-zxfv是不对的，要写成-zxvf） 打包：tar -cvf [目标文件名].tar [原文件名/目录名]解包：tar -xvf [原文件名].tar 实例：解压一个文件：tar -zxvf filename.tar.bz2（解压缩filename.tar.bz2）创建压缩文件：tar -zcvf filename.tar.bz2 file1.txt file2.txt（把file1.txt和file2.txt压缩成filename.tar.bz2）——————————————————————————————— 2.rar压缩解压缩安装： sudo apt-get install rar unrar 或者可从http://www.rarsoft.com/download.htm下载 RAR for Linux 编译安装 # tar -xzpvf rarlinux-3.8.0.tar.gz # cd rar # make这样就安装好了，安装之后就有了rar和unrar这两个程序，rar是压缩程序，unrar是解压程序。它们的参数选项很多，可用命令rar -help和unrar -help查看。 压缩：rar a [目标文件名].rar [原文件名/目录名]解压：unrar e [原文件名].rar实例：将test.jpg和test.png压缩成一个rar包：rar a test.rar test.jpg test.png将所有.jpg的文件压缩成一个rar包：rar a test.rar *.jpg将文件夹test压缩成一个rar包：rar a test.rar test将test.rar中的所有文件解压出来：unrar e test.rar ——————————————————————————————————– 3.7z压缩解压缩参数含义：x 代表解压缩文件，并且是按原始目录树解压-r 表示递归解压缩所有的子文件夹-o 是指定解压到的目录，-o后是没有空格的，直接接目录。这一点需要注意。a 代表添加文件／文件夹到压缩包-t 是指定压缩类型，这里定为7z，可不指定，因为7za默认压缩类型就是7z。-r 表示递归所有的子文件夹 压缩：7z a [目标文件名].7z [原文件名/目录名]解压：7z x [原文件名].7z实例：指定当前目录文件夹demo下7za x chrysanthemum_test_images.7z -r -o./demo将filename.7z解压到当前目录：7z x filename.7z -r -o./将当前目录下的所有文件压缩成test.7z文件：7z a -t7z -r test.7z ./*———————————————————————————— 4.zip压缩解压缩linux下提供了zip和unzip程序，zip是压缩程序，unzip是解压程序。它们的参数选项很多，可用命令zip -help和unzip -help查看，这里只做简单介绍。 压缩： zip -r [目标文件名].zip [原文件/目录名]解压： unzip [原文件名].zip 实例：实例：将test.jpg和test.png压缩成一个zip包：zip test.zip test.jpg test.png将所有.jpg的文件压缩成一个zip包：zip test.zip *.jpg将文件夹test压缩成一个zip包：zip -r test.zip test将test.zip中的所有文件解压出来：unzip test.zip将/home目录下面的mydata目录压缩为mydata.zip：zip -r mydata.zip mydata? #压缩mydata目录将/home目录下面的mydata.zip解压到mydatabak目录里面：unzip mydata.zip -d mydatabak 5、7za2016-01-09 11:50:307z，全称7-Zip，是一款开源软件，目前公认压缩比例最大的压缩解压软件。 centos安装，yum -y install p7zip 或者编译安装： wget http://nchc.dl.sourceforge.net/sourceforge/p7zip/p7zip_4.65_src_all.tar.bz2tar -xjvf p7zip_4.65_src_all.tar.bz2cd p7zip_4.65makemake install 主要特征： 全新的LZMA算法，加大7z压缩比 支持格式：压缩：7z，XZ,BZIP2,GZIP,TAR,ZIP 解压：ARJ,CAB,CHM,CPIO,DEB,DMG,FAT,HFS,ISO,LZH,LZMA,MBR,MSI,NAIS,NTFS,RAR,RPM,UDF,VHD,WIM,XAR,Z 退出代码： 0 正常 1 告警，没有致命错误。例如某些文件正在被使用，没有被压缩 2 致命问题 7 命令行错误 8 没有足够内存 255 用户停止操作 使用： 然后说命令 最简单实用的 7za a /home/web.7z /home/wwwroot将/home/wwwroot 打包压缩为 web.7z 放在home目录里面 解压缩的话 7za e src_file command操作命令： a 添加到压缩文件b 基准测试，测试7z当前性能d 从压缩文件中删除e 从压缩文件中解压缩，但不包含目录结构（即所有各级文件都解压到一个目录里）l 列出压缩文件的内容t 测试压缩文件u 更新文件到压缩文件x 从压缩文件中解压缩，包含目录结构 可见，最常用的指令是a, l和x. 压缩a.txt和b.txt到c.7z:7za a c.7z a.txt b.txt （命令a后的第一个为目标压缩文档名，然后是文件列表）压缩a.txt和b.txt到/home/www/c.7z:7za a /home/www/c.7z a.txt b.txt （目录名包含空格，用引号）列出c.7z的内容：7za l c.7z解压缩c.7z到/home/www:7za x c.7z -o/home/www” （-o表示输出目录，其与目录路径之间没有空格）这样解压包含下级目录名，但不会在/home/www下新建一个c文件夹，如果需要，就把输出目录设为/home/www/c，这样会自动创建文件夹c。如果要生成zip压缩包，可以直接将目标压缩包名设为c.zip，则它会自动使用zip算法压缩。 原文：https://blog.csdn.net/gengkui9897/article/details/83956507","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"pycharm执行py文件时报错SyntaxError","slug":"a45a2c3091376c88010499ad008dd504","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.658Z","comments":true,"path":"2019/12/02/a45a2c3091376c88010499ad008dd504/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/a45a2c3091376c88010499ad008dd504/","excerpt":"","text":"我的报错：SyntaxError: Non-UTF-8 code starting with ‘\\xe6’ in file这个我刚开始以为有问题，找了好久没有找到原因，还一直定位我的一个数据地方，后我直接CTRL + alt + L 格式化，然后就好了。 原来一行数据太长时运行时也会报错，所以如果过长，直接快捷键格式化就好了。或者手动换行。","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python json格式化保错的另一种处理方式","slug":"80ba463604699633b81e3ba55afc5b4c","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.261Z","comments":true,"path":"2019/12/02/80ba463604699633b81e3ba55afc5b4c/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/80ba463604699633b81e3ba55afc5b4c/","excerpt":"","text":"1、找到报错的原因一般是有些字符或者编码无法识别，这时候需要保存成txt文件进行查找分析，具体在哪个位置。找到相关字符进行分析。 2、使用正则替换掉不需要的字符比如我的是借助python的正则表达式，匹配的字符串中，我只要含有中文，英文、数字、还有:&quot;&#39;&lt;&gt;\\/-,{} 这些字符需要，其他的我都认为是json报错的字符，替换为空。然后在正则里面[]前面加个^使得匹配除这些之外的字符，都匹配成功。这样保证我的json.loads(text),不会报错了。 正则不太懂的可以参考菜鸟教程，里面有些知识点写个还是比较细的：https://www.runoob.com/python/python-reg-expressions.html text_last2 = re.sub(r&quot;[^\\w\\s[\\u4e00-\\u9fa5]:\\&quot;\\&apos;&lt;&gt;\\\\/-,{}&apos;]+&quot;,&apos;&apos;,text)","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python 使用cv2模块将图片合并生成视频","slug":"981a774586eeebefaa04d0db7fc98337","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.509Z","comments":true,"path":"2019/12/02/981a774586eeebefaa04d0db7fc98337/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/981a774586eeebefaa04d0db7fc98337/","excerpt":"","text":"配置：window10 64位系统 python3.6 cv2模块安装 pip install opencv-python1、需求之前使用cv2模块进行过视频截帧，但是现在试试将截帧的图片进行一个合并。 2、代码1、注意事项1、图片的大小必须都是一样的尺寸，和代码中的size一样2、地址我的代码图片设置位jpg格式图片了，如图需要其他图片，请自己修改代码3、视频我默认保存到图片的目录下了。 2、之际上代码：import os import cv2 def makeVideo(path, size): filelist = os.listdir(path) filelist2 = [os.path.join(path, i) for i in filelist] print(filelist2) fps = 1 # 我设定位视频每秒1帧，可以自行修改 # size = (1920, 1080) # 需要转为视频的图片的尺寸，这里必须和图片尺寸一致 video = cv2.VideoWriter(path + &quot;\\\\Video.avi&quot;, cv2.VideoWriter_fourcc(&apos;M&apos;, &apos;J&apos;, &apos;P&apos;, &apos;G&apos;), fps, size) for item in filelist2: print(item) if item.endswith(&apos;.jpg&apos;): print(item) img = cv2.imread(item) video.write(img) video.release() cv2.destroyAllWindows() print(&apos;视频合成生成完成啦&apos;) if __name__ == &apos;__main__&apos;: path = r&apos;E:\\000photo\\photo&apos; # 需要转为视频的图片的尺寸,必须所有图片大小一样，不然无法合并成功 size = (1920, 1080) makeVideo(path, size)","categories":[{"name":"opencv","slug":"opencv","permalink":"https://zhaojiafu.github.io/categories/opencv/"},{"name":"python模块","slug":"opencv/python模块","permalink":"https://zhaojiafu.github.io/categories/opencv/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"opencv","slug":"opencv","permalink":"https://zhaojiafu.github.io/tags/opencv/"}]},{"title":"SyntaxError_ Non-UTF-8 code starting with '_xd7' in file","slug":"a1e142f604f70776e38bd2b6beda9a34","date":"2019-12-02T03:34:32.000Z","updated":"2019-12-02T07:00:36.891Z","comments":true,"path":"2019/12/02/a1e142f604f70776e38bd2b6beda9a34/","link":"","permalink":"https://zhaojiafu.github.io/2019/12/02/a1e142f604f70776e38bd2b6beda9a34/","excerpt":"","text":"1、问题：今天突然在家里遇到一个问题，然后出现这个问题： 源错误： SyntaxError: Non-UTF-8 code starting with &apos;\\xd7&apos; in file G:/002、家里敲代码/2、做音乐视频字幕/2、lrc转srt/2、自己Python代码实现将lrc转srt.py on line 4, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details2、解决：在代码的开头加个默认utf-8，就可以了。 # -!- coding: utf-8 -!-","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"整理最全的 python 之markdown与HTML的互转的几个模块","slug":"3017c7294e954991d52861912dc78cd7","date":"2019-11-28T03:34:32.000Z","updated":"2019-12-02T06:45:48.725Z","comments":true,"path":"2019/11/28/3017c7294e954991d52861912dc78cd7/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/28/3017c7294e954991d52861912dc78cd7/","excerpt":"","text":"一、说明：今天突然想着学习一下如何将markdown和HTML互转的知识，因为我在CSDN的写的博客可以导出的时候有俩种方式，所以想着也可以把他们相互转化下。我觉得python现在很成熟了，肯定有这方面的轮子。于是就上网搜索找了一些整理下。 如果你只是转换单个文件，推荐直接在线转换：在线互转地址 其实这个在线地址里面有好多在线工具，需要的自己研究吧： 在这里插入图片描述 在这里插入图片描述 二、互转模块：1、md转html这里我找到俩个模块可以使用，但是md-to-html模块效果不好，网上大多数使用的也是markdown的模块。 ①、markdown模块（推荐）：这里有一个我感觉还不错的博客地址，感兴趣的可以去学习看看：第一步：下载安装：markdown 第二步：准备一个md文件，我这里是使用CSDN写作的部分帮助文档md。 1快捷键2---------------------------3撤销：Ctrl/Command + Z4重做：Ctrl/Command + Y5加粗：Ctrl/Command + B6斜体：Ctrl/Command + I7标题：Ctrl/Command + Shift + H8无序列表：Ctrl/Command + Shift + U9有序列表：Ctrl/Command + Shift + O10检查列表：Ctrl/Command + Shift + C11插入代码：Ctrl/Command + Shift + K12插入链接：Ctrl/Command + Shift + L13插入图片：Ctrl/Command + Shift + G14查找：Command + F15替换：Command + G1617标题18---------------------------19# 1级标题20## 2级标题21### 3级标题22#### 四级标题 23##### 五级标题 24###### 六级标题2526文本样式27---------------------------28*强调文本* _强调文本_2930**加粗文本** __加粗文本__3132==标记文本==3334~~删除文本~~3536&gt; 引用文本3738H~2~O is是液体。39402^10^ 运算结果是 1024。4142列表43---------------------------44- 项目45 * 项目46 + 项目47481. 项目1492. 项目2503. 项目35152- [ ] 计划任务53- [x] 完成任务5455链接56---------------------------57链接: [link](https://mp.csdn.net).5859图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)6061带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)6263居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)6465居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30) 第三步：可以直接复制测试： 1from markdown import markdown23print(dir(markdown))4file = open('help.md','r',encoding='utf-8').read()56html = markdown(file)7print(html)8910with open('ret.html', 'w', encoding='utf-8') as file:11 file.write(html) 然后看出输入的ret.html文件。 在这里插入图片描述 ②、md-to-html模块（不推荐）：模块地址：第一步:安装md-to-html： 1pip install md-to-html 第二步：准备一个gbk的md文件，我直接使用刚刚的会报编码错误，然后桌面新建一个dbk的txt就可以了，但是转换效果极差。 第三步： cmd或者powershell中执行命令： 1md-to-html -i .\\help.txt -o .\\ret2.html 结果就是： 在这里插入图片描述 发现没有，笔者刚刚的转换少了很多东西，所以这个模块做的效果不好，不建议使用这个，推荐使用第一个模块。 在这里插入图片描述 2、html转md：①、tomd模块：模块地址。安装： 1pip install tomd 第一步：使用刚刚成的html或者导出自己的一份博客的HTML文件进行测试。这里我贴下我刚刚转存成功的。 1&lt;h2&gt;快捷键&lt;/h2&gt;2&lt;p&gt;撤销：Ctrl/Command + Z3重做：Ctrl/Command + Y4加粗：Ctrl/Command + B5斜体：Ctrl/Command + I6标题：Ctrl/Command + Shift + H7无序列表：Ctrl/Command + Shift + U8有序列表：Ctrl/Command + Shift + O9检查列表：Ctrl/Command + Shift + C10插入代码：Ctrl/Command + Shift + K11插入链接：Ctrl/Command + Shift + L12插入图片：Ctrl/Command + Shift + G13查找：Command + F14替换：Command + G&lt;/p&gt;15&lt;h2&gt;标题&lt;/h2&gt;16&lt;h1&gt;1级标题&lt;/h1&gt;17&lt;h2&gt;2级标题&lt;/h2&gt;18&lt;h3&gt;3级标题&lt;/h3&gt;19&lt;h4&gt;四级标题&lt;/h4&gt;20&lt;h5&gt;五级标题&lt;/h5&gt;21&lt;h6&gt;六级标题&lt;/h6&gt;22&lt;h2&gt;文本样式&lt;/h2&gt;23&lt;p&gt;&lt;em&gt;强调文本&lt;/em&gt; &lt;em&gt;强调文本&lt;/em&gt;&lt;/p&gt;24&lt;p&gt;&lt;strong&gt;加粗文本&lt;/strong&gt; &lt;strong&gt;加粗文本&lt;/strong&gt;&lt;/p&gt;25&lt;p&gt;==标记文本==&lt;/p&gt;26&lt;p&gt;~~删除文本~~&lt;/p&gt;27&lt;blockquote&gt;28&lt;p&gt;引用文本&lt;/p&gt;29&lt;/blockquote&gt;30&lt;p&gt;H~2~O is是液体。&lt;/p&gt;31&lt;p&gt;2^10^ 运算结果是 1024。&lt;/p&gt;32&lt;h2&gt;列表&lt;/h2&gt;33&lt;ul&gt;34&lt;li&gt;项目&lt;/li&gt;35&lt;li&gt;36&lt;p&gt;项目&lt;/p&gt;37&lt;ul&gt;38&lt;li&gt;项目&lt;/li&gt;39&lt;/ul&gt;40&lt;/li&gt;41&lt;li&gt;42&lt;p&gt;项目1&lt;/p&gt;43&lt;/li&gt;44&lt;li&gt;项目2&lt;/li&gt;45&lt;li&gt;46&lt;p&gt;项目3&lt;/p&gt;47&lt;/li&gt;48&lt;li&gt;49&lt;p&gt;[ ] 计划任务&lt;/p&gt;50&lt;/li&gt;51&lt;li&gt;[x] 完成任务&lt;/li&gt;52&lt;/ul&gt;53&lt;h2&gt;链接&lt;/h2&gt;54&lt;p&gt;链接: &lt;a href=\"https://mp.csdn.net\"&gt;link&lt;/a&gt;.&lt;/p&gt;55&lt;p&gt;图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" /&gt;&lt;/p&gt;56&lt;p&gt;带尺寸的图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30\" /&gt;&lt;/p&gt;57&lt;p&gt;居中的图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" /&gt;&lt;/p&gt;58&lt;p&gt;居中并且带尺寸的图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30\" /&gt;&lt;/p&gt; 第二步：转换代码：其中：ret.html就是上面的html，make.md就是转换成功的markdown文件。 1from tomd import Tomd23md_text = open('ret.html', 'r', encoding='utf-8').read()4markdown = Tomd(md_text).markdown5with open('make.md', 'w', encoding='utf-8') as file:6 file.write(markdown) 成功的md文件： 12## 快捷键34撤销：Ctrl/Command + Z5重做：Ctrl/Command + Y6加粗：Ctrl/Command + B7斜体：Ctrl/Command + I8标题：Ctrl/Command + Shift + H9无序列表：Ctrl/Command + Shift + U10有序列表：Ctrl/Command + Shift + O11检查列表：Ctrl/Command + Shift + C12插入代码：Ctrl/Command + Shift + K13插入链接：Ctrl/Command + Shift + L14插入图片：Ctrl/Command + Shift + G15查找：Command + F16替换：Command + G1718## 标题1920# 1级标题2122## 2级标题2324### 3级标题2526#### 四级标题2728##### 五级标题2930###### 六级标题3132## 文本样式3334**强调文本** **强调文本**3536**加粗文本** **加粗文本**3738==标记文本==3940~~删除文本~~4142&gt; 43引用文本444546H~2~O is是液体。47482^10^ 运算结果是 1024。4950## 列表5152- 项目53&lt;li&gt;54项目55&lt;ul&gt;56- 项目5758项目15960项目36162[ ] 计划任务6364## 链接6566链接: [link](https://mp.csdn.net).6768图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" /&gt;6970带尺寸的图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30\" /&gt;7172居中的图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" /&gt;7374居中并且带尺寸的图片: &lt;img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30\" /&gt; ②、html2text文件（推荐）：模块地址： 安装模块： 1pip install html2text 转换代码： 1import html2text234md_text = open('ret.html', 'r', encoding='utf-8').read()56markdown = html2text.html2text(md_text)7with open('make2.md', 'w', encoding='utf-8') as file:8 file.write(markdown) 最后生成一个make2.md文件。 1## 快捷键23撤销：Ctrl/Command + Z 重做：Ctrl/Command + Y 加粗：Ctrl/Command + B 斜体：Ctrl/Command +4I 标题：Ctrl/Command + Shift + H 无序列表：Ctrl/Command + Shift + U 有序列表：Ctrl/Command5+ Shift + O 检查列表：Ctrl/Command + Shift + C 插入代码：Ctrl/Command + Shift + K6插入链接：Ctrl/Command + Shift + L 插入图片：Ctrl/Command + Shift + G 查找：Command + F7替换：Command + G89## 标题1011# 1级标题1213## 2级标题1415### 3级标题1617#### 四级标题1819##### 五级标题2021###### 六级标题2223## 文本样式2425_强调文本_ _强调文本_2627**加粗文本** **加粗文本**2829==标记文本==3031~~删除文本~~3233&gt; 引用文本3435H~2~O is是液体。36372^10^ 运算结果是 1024。3839## 列表4041 * 项目42 * 项目4344 * 项目45 * 项目14647项目24849 * 项目35051 * [ ] 计划任务5253 * [x] 完成任务5455## 链接5657链接: [link](https://mp.csdn.net).5859图片:60![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)6162带尺寸的图片:63![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw64=30x30)6566居中的图片:67![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)6869居中并且带尺寸的图片:70![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center71=30x30) ③、html2markdown模块：模块地址： 安装： 1pip install html2markdown 转换代码： 1import html2markdown234md_text = open('ret.html', 'r', encoding='utf-8').read()56markdown = html2markdown.convert(md_text)78with open('make3.md', 'w', encoding='utf-8') as file:9 file.write(markdown) 最后生成md文件： 1## 快捷键23撤销：Ctrl/Command + Z重做：Ctrl/Command + Y加粗：Ctrl/Command + B斜体：Ctrl/Command + I标题：Ctrl/Command + Shift + H无序列表：Ctrl/Command + Shift + U有序列表：Ctrl/Command + Shift + O检查列表：Ctrl/Command + Shift + C插入代码：Ctrl/Command + Shift + K插入链接：Ctrl/Command + Shift + L插入图片：Ctrl/Command + Shift + G查找：Command + F替换：Command + G45## 标题67# 1级标题89## 2级标题1011### 3级标题1213#### 四级标题1415##### 五级标题1617###### 六级标题1819## 文本样式2021_强调文本_ _强调文本_2223__加粗文本__ __加粗文本__2425==标记文本==2627~~删除文本~~2829&gt; 30&gt; 引用文本31&gt; 3233H~2~O is是液体。34352^10^ 运算结果是 1024。3637## 列表3839* 项目40* 41 42 项目43 44 45 46 * 项目47 48 49 50* 51 52 项目153 54 55* 项目256* 57 58 项目359 60 61* 62 63 \\[ \\] 计划任务64 65 66* \\[x\\] 完成任务6768## 链接6970链接: [link](https://mp.csdn.net).7172图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)7374带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)7576居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)7778居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30) 通过对比三个模块的markdown文件的结果，发现生成的效果第二个模块的我感觉还不错（对比项目那一块的结果，其他的基本上都一样。）","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"markdown与HTML互转","slug":"markdown与HTML互转","permalink":"https://zhaojiafu.github.io/tags/markdown%E4%B8%8EHTML%E4%BA%92%E8%BD%AC/"}]},{"title":"shell编程学习笔记之一--学习第五天","slug":"5d94c3e8239793dff0d4f1b41eb5f4d2","date":"2019-11-26T03:34:32.000Z","updated":"2019-12-02T06:45:48.877Z","comments":true,"path":"2019/11/26/5d94c3e8239793dff0d4f1b41eb5f4d2/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/26/5d94c3e8239793dff0d4f1b41eb5f4d2/","excerpt":"","text":"一、说明：打算从B站学习一下shell编程，从很多的课程视频中，挑选了一个：B站视频地址：打算开始学习着做着笔记：这个需要一些Linux基础，还有vim的，如果不太熟练，可以看下我之前的整理的俩个博客： 1、整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令） 2、Linux下vim/vi 编辑器 命令总结Linux下vim/vi 编辑器 命令总结 3、学习课件：这个地址我直接把B站中评论下方分享的弄出来了，如果失效，可以下方评论，我把我下载的分享给你。下载地址 4、之前的博客：shell编程学习笔记之–学习第一天shell编程学习笔记之–学习第二天shell编程学习笔记之–学习第三天shell编程学习笔记之一–学习第四天 二、实战演练（几个shell常用命令）：1、sed命令： Linux sed 命令是利用脚本来处理文本文件。 sed 可依照脚本的指令来处理、编辑文本文件。 Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。 语法 1sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件] 参数说明： 1-e&lt;script&gt;或--expression=&lt;script&gt; 以选项中指定的script来处理输入的文本文件。2-f&lt;script文件&gt;或--file=&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。3-h或--help 显示帮助。4-n或--quiet或--silent 仅显示script处理后的结果。5-V或--version 显示版本信息。 动作说明： 1a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～2c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！3d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；4i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；5p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～6s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！ 示例1、将name替换为chinese：1vi name.txt 敲入代码： 1#name info2My name is zhaojiafu34this is my first sed text56127.0.0.178192.168.2.1 运行命令： 在这里插入图片描述 查看是否真正修改name.txt 在这里插入图片描述 这个是修改在缓存中，并没有真正修改原文件，需要加个参数-i。 1sed -i 's/name/chinese/g' name.txt 在这里插入图片描述 再次cat查看，发现修改成功了。 在这里插入图片描述 这样就不用打开在vim中进行替换了，vim的末行命令也是可以进行替换操作的。 示例2、在每行开头加入 #id1sed 's/^/&amp; #id/g' name.txt 本文我没有写入，如果真正写入到文档，加个-i参数。^代表开头。 在这里插入图片描述 示例3、在每行末尾加入 #id$代表末尾。 1sed 's/$/&amp; #id/g' name.txt 在这里插入图片描述 示例4、在含有chinese的行后面加入demo1111sed '/chinese/a demo111' name.txt 代码里面的a代表后面。 在这里插入图片描述 示例5、在含有chinese的行前加入demo1111sed '/chinese/i demo111' name.txt i代表含有chinese一行的前面加入demo111。 在这里插入图片描述 示例6、高级用法： 打印出含有chinese的所有行 1sed -n '/chinese/p' name.txt 在这里插入图片描述 打印文档的第一行： 1sed -n '1p' name.txt 在这里插入图片描述 打印文档的1-5行： 1sed -n '1,5p' name.txt 打印文档的第三行到末尾所有行 1sed -n '3,$p' name.txt 在这里插入图片描述 打印文章的第四行至第六行 1sed -n '4p ;6p' name.txt 在这里插入图片描述 删除文件的20至末尾所有行： 1sed -i '20,$d' num_sort.txt 在这里插入图片描述 示例7、给一个含有数字的文件，提取除最大的和最小的俩个数num_sort.txt 112312 2323 322213 23132312342132143242353213167832131293101321113112321321321441512312 2323 3216213 23117231231821321432423193213120321312213 第一步：将空格替换成换行符： 在这里插入图片描述 使用grep将空行去掉： 1cat num_sort.txt | sed 's/ /\\n/g'| grep -v '^$' grep -v 是指去掉后面匹配到的字符串，‘^$’ 指的是匹配到的空行。 在这里插入图片描述 排序： 1cat num_sort.txt | sed 's/ /\\n/g'| grep -v '^$' | sort -nr sort -n是从小到大排序，r是至反向，-nr就是从大到小排序。 在这里插入图片描述 在这里插入图片描述 求出最大数和最小数 1$cat num_sort.txt | sed 's/ /\\n/g'| grep -v '^$' | sort -nr |sed -n '1p;$p'22132143242333 示例8、打印奇数行或偶数行方法1： 1sed -n 'p;n' test.txt #奇数行2sed -n 'n;p' test.txt #偶数行 方法2： 1sed -n '1~2p' test.txt #奇数行2sed -n '2~2p' test.txt #偶数行 2、grep：我之前的博客记录的有些笔记。地址 实例：name.txt文件： 1$cat name.txt2#chinese info3My chinese is zhaojiafu45this is my first sed text67127.0.0.189192.168.2.110192.168.2.1112192.168.13192. 1、匹配：含有127的行1$cat name.txt |grep '127'2127.0.0.1 2、匹配含有192的行：1$cat name.txt |grep '192'2192.168.2.13192.168.2.4192.168.5192. 3、匹配只有192.的：1$cat name.txt |grep '^192\\.$'2192. 4、匹配以192开头.结尾的行1$cat name.txt |grep '^192.*\\.$'2192.168.2.3192.168.4192. 5、匹配一个ip的正确写法：视频中的教程讲的有点不全，我这里写个正确的匹配ip的方法。 其中数字肯定不会0开头，一般1-3位，后面都是0-9的数字。其中-E代表使用的是正则匹配。 1$cat name.txt |grep -E '[1-9][0-9]&#123;0,2&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;'2127.0.0.13192.168.2.1 6、吧匹配到的行号打印出来：-n参数就是匹配到的行号打印出来，前面的6：和8：就是第6行和第8行 1$cat name.txt |grep -n -E '[1-9][0-9]&#123;0,2&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;'26:127.0.0.138:192.168.2.1 7、egrep 和 grep -E 是一样的。1$grep -E \"192|127\" name.txt2127.0.0.13192.168.2.14192.168.2.5192.168.6192. 1$egrep \"192|127\" name.txt2127.0.0.13192.168.2.14192.168.2.5192.168.6192. 3、awk： AWK是一种处理文本文件的语言，是一个强大的文本分析工具。 之所以叫AWK是因为其取了三位创始人 Alfred Aho，PeterWeinberger, 和 Brian Kernighan 的 Family Name 的首字符。 ①、语法1awk [选项参数] 'script' var=value file(s)2或3awk [选项参数] -f scriptfile var=value file(s) ②、选项参数说明：1-F fs or --field-separator fs2指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。3-v var=value or --asign var=value4赋值一个用户定义变量。5-f scripfile or --file scriptfile6从脚本文件中读取awk命令。7-mf nnn and -mr nnn8对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。9-W compact or --compat, -W traditional or --traditional10在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。11-W copyleft or --copyleft, -W copyright or --copyright12打印简短的版权信息。13-W help or --help, -W usage or --usage14打印全部awk选项和每个选项的简短说明。15-W lint or --lint16打印不能向传统unix平台移植的结构的警告。17-W lint-old or --lint-old18打印关于不能向传统unix平台移植的结构的警告。19-W posix20打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。21-W re-interval or --re-inerval22允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。23-W source program-text or --source program-text24使用program-text作为源代码，可与-f命令混用。25-W version or --version26打印bug报告信息的版本。 ③、基本用法创建一个awk_name.txt文件 1$cat awk_name.txt2My name is zhaojiafu13My name is zhaojiafu24My name is zhaojiafu35My name is zhaojiafu46My name is zhaojiafu57My name is zhaojiafu68My name is zhaojiafu79My name is zhaojiafu810My name is zhaojiafu9 1】、匹配第一列：1$cat awk_name.txt |awk '&#123;print $1&#125;'2My3My4My5My6My7My8My9My10My 2】、匹配第1和4列：1$cat awk_name.txt |awk '&#123;print $1,$4&#125;'2My zhaojiafu13My zhaojiafu24My zhaojiafu35My zhaojiafu46My zhaojiafu57My zhaojiafu68My zhaojiafu79My zhaojiafu810My zhaojiafu9 3】、匹配最后一列：1$cat awk_name.txt |awk '&#123;print $NF&#125;'2zhaojiafu13zhaojiafu24zhaojiafu35zhaojiafu46zhaojiafu57zhaojiafu68zhaojiafu79zhaojiafu810zhaojiafu9 4】、匹配到/etc/passwd下面的用户名方法一 1$cat /etc/passwd |sed \"s/:/ /g\"|awk '&#123;print $1&#125;'2root3bin4daemon5adm 方法二 1$cat /etc/passwd |awk -F: '&#123;print $1&#125;'2root3bin4daemon5adm 其中-F:是以：为切割，默认是空格，也可以以#或者其他字符为分割，-F#。 5】、获取本机ip的方法：方法一： 1$ifconfig eth0|grep -E '[1-9][0-9]&#123;0,2&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;'|sed 's/ /\\n/g'|grep -E '[1-9][0-9]&#123;0,2&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;'|head -n 1258.219.63.68 其中： ifconfig eth0是为了获取含有ip的一组数据 grep -E &#39;[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}&#39;是为了获取含有ip地址的一行数据 sed &#39;s/ /\\n/g&#39;是为了将空格全部替换成换行 grep -E &#39;[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}&#39;是为了提取含有所以ip的行 head -n 1是为了去第一行（因为第一行才是本机ip地址） 方法二： 我的这个是因为，没有视频中的addr：，有的话自己在进行一个awk -F:&#39;{print $2}&#39;提取即可。 1$ifconfig eth0|grep -E '[1-9][0-9]&#123;0,2&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;'|awk '&#123;print $2&#125;'258.219.63.68 6】、打印出服务器的使用率的数值：1$df -h|grep '\\/$'|awk '&#123;print $5&#125;'|sed \"s/%//g\"275 7】、在提取的数值起前面加入一段字符串：方法一：sed接着上面的数值： 1$df -h|grep '\\/$'|awk '&#123;print $5&#125;'|sed \"s/%//g\"|sed \"s/^/&amp;使用率：/g\"2使用率：75 方法二：awk 1$df -h|grep '\\/$'|awk '&#123;print $5&#125;'|sed \"s/%//g\"|awk '&#123;print \"使用率：\"$NF&#125;'2使用率：75 4、find:之前的博客笔记：地址 实例1、查找指定目录下的.sh文件：查找： 1$find ../day03/ -name \"*.sh\"2../day03/read_line.sh3../day03/auto_scp.sh4../day03/for_str.sh5../day03/for_str2.sh6../day03/demo/auto_lamp.sh7../day03/demo/for2.sh8../day03/demo/backup_mysql.sh9../day03/demo/for1.sh10../day03/demo/backup_time.sh11../day03/while2.sh12../day03/while.sh 实例2、使用exec进行复制：1$find ../day04/ -name \"num.sh\" -exec cp &#123;&#125; . \\; 其中： {}代表前面的返回值，填充到这里，和python字符串填充有点像。 后面跟的\\;是固定搭配，记得前面要和其他字符有空格。1$ls2awk_name.txt name.txt num.sh num_sort.txt sort2.txt sort.txt 实例3、删除当前的num.sh文件：1.查找： 1$find . -name \"num.sh\"2./num.sh 1$find . -name \"num.sh\" -exec rm -rf &#123;&#125; \\;2$ls3awk_name.txt name.txt num_sort.txt sort2.txt sort.txt 可以看出已经删除成功。如果最后的\\;和前面的命令没有空格会报错。 报错内容示例： 在这里插入图片描述","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"shell编程学习笔记之一--学习第四天","slug":"1d2e4fbdb758ad62f4c00285affeb2e3","date":"2019-11-25T03:34:32.000Z","updated":"2019-12-02T06:45:49.525Z","comments":true,"path":"2019/11/25/1d2e4fbdb758ad62f4c00285affeb2e3/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/25/1d2e4fbdb758ad62f4c00285affeb2e3/","excerpt":"","text":"@[toc] 一、说明：打算从B站学习一下shell编程，从很多的课程视频中，挑选了一个：B站视频地址：打算开始学习着做着笔记：这个需要一些Linux基础，还有vim的，如果不太熟练，可以看下我之前的整理的俩个博客： 1、整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令） 2、Linux下vim/vi 编辑器 命令总结Linux下vim/vi 编辑器 命令总结 3、学习课件：这个地址我直接把B站中评论下方分享的弄出来了，如果失效，可以下方评论，我把我下载的分享给你。下载地址 4、之前的博客：shell编程学习笔记之–学习第一天shell编程学习笔记之–学习第二天shell编程学习笔记之–学习第三天 二、实战演练：1、Until 循环语句1、语法格式1until 条件2do3action4done 直到满足条件，才退出。否则执行 action 。 2、打印出从10以下的数字：1vi untile_demo1.sh 敲入代码： 1#!/bin/bash2#auto until demo13#by authors zhaojiafu45a=10;6until [[ $a -lt 0 ]];78do9 echo -e \"\\033[32mThe Num is $a !\\033[01\"10 ((a--))11done 在这里插入图片描述 2、case语句：1、格式：1case $arg in2pattern1)3语句 14;;5pattern2)6语句 27;;8*)9语句 310;;11esac 2、LAMP简单提示选择菜单：创建sh脚本 1vim case_demo.sh 敲入代码： 1#!/bin/bash2# auto case demo3# by authors zjf 201945case $1 in6 Apache )7 echo -e \"\\033[32m准备安装Apache。。。·\\033[0m\"8 ;;9 Mysql)10 echo -e \"\\033[32m准备安装Mysql。。。·\\033[0m\"11 ;;12 PHP)13 echo -e \"\\033[32m准备安装PHP。。。·\\033[0m\"14 ;;15 *)16 echo -e \"\\033[32mUsage $0 Apache|Mysql|PHP|help\\033[0m\"17 ;;18esac 执行效果： 在这里插入图片描述 在这里插入图片描述 3、select语句：Select 一般用于选择菜单的创建，可以配合 PS3来做菜单的打印输出信息。 1、开源系统选择：1vi select_demo.sh 敲入代码： 1#! /bin/bash2#by authors zhaojiafu 201934PS3=\"What you like most of the open source system?\"56select i in \"CentOS\" \"RedHat\" \"Ubuntu\"78do9 echo \"You select $i\"1011done 运行效果： 在这里插入图片描述 2、结合LAMP做个选择菜单：创建sh脚本文件 1vi select_demo2.sh 敲入代码： 1#! /bin/bash2#by authors zhaojiafu 201934PS3=\"Select install LAMP Menu\"56select i in \"Apache\" \"Mysql\" \"PHP\"78do910 case $i in11 Apache )12 echo -e \"\\033[32m准备安装Apache。。。·\\033[0m\"13 ;;14 Mysql)15 echo -e \"\\033[32m准备安装Mysql。。。·\\033[0m\"16 ;;17 PHP)18 echo -e \"\\033[32m准备安装PHP。。。·\\033[0m\"19 ;;20 *)21 echo -e \"\\033[32mUsage $0 Apache|Mysql|PHP|help\\033[0m\"22 ;;23 esac2425done 执行结果： 在这里插入图片描述 4、函数：（这个我看到的那个B站视频课程不对，还好有课件，看课件自己消化学习学习）1、定义：shell 允许将一组命令集或语句形成一个可用块，这些块称为shell 函数，定义函数的格式： 1function name ()&#123;2command13........4&#125;5name 2、求俩个数的和先测试个简单函数的调用： 1#!/bin/bash2#by authors zhaojiafu 201934function number_one () &#123;5 echo \"Url_1 1111\"6 number_two7&#125;89function number_two () &#123;10 echo \"Url_2 is 2222\"11&#125;1213number_one 在这里插入图片描述 1function sum()&#123;23 echo `expr $1 + $2`4&#125;5if [[ ! -z $2 ]];then6 echo `sum`7else8 echo \"Usage: $0 num1 num2\"9fi 求和： 1vi 2num.sh 敲入代码： 1#!/bin/bash2#by authors zhaojiafu 201934num1=35num2=467function sum()&#123;89 echo `expr $num1 + $num2`10 #return `expr $num1 + $num2`11 ret1=`expr $num1 + $num2`12 return $ret113&#125;14result=`sum`15echo \"the sum is $&#123;result&#125;\" 注意点，这个我卡了好一会， 1return `expr $num1 + $num2` 这个再函数中不会返回结果，需要前面给个变量，然后返回变量，或者直接 1echo `expr $num1 + $num2` shell函数中，如果没有返回return，会把echo的所有当成字符串返回。 比如下面的代码： 1#!/bin/bash2#by authors zhaojiafu 201934num1=35num2=467function sum()&#123;8 ret1=`expr $num1 + $num2`9 echo `expr $num1 + $num2`10 echo $num111 echo $num212 #return `expr $num1 + $num2`13 #ret1=`expr $num1 + $num2`14 #return $ret115&#125;16result=`sum`17echo \"the sum is $&#123;result&#125;&amp;&amp;&amp;&amp;&amp;&amp;\" 输出结果：可以看出，直接函数返回的结果是含有数字+回车+数字+回车+数字的字符串。 在这里插入图片描述 有return，就会只返回return的结果。 比如代码： 1#!/bin/bash2#by authors zhaojiafu 201934num1=35num2=467function sum()&#123;8 ret1=`expr $num1 + $num2`9 echo `expr $num1 + $num2`10 echo $num111 echo $num212 #return `expr $num1 + $num2`13 #ret1=`expr $num1 + $num2`14 return $ret115&#125;16result=`sum`17echo \"the sum is $&#123;result&#125;&amp;&amp;&amp;&amp;&amp;&amp;\" 结果输出不对呀，还是和刚刚一样，这样return没有看出效果呀。 在这里插入图片描述 改写代码： 1#!/bin/bash2#by authors zhaojiafu 201934num1=35num2=467function sum()&#123;8 ret1=`expr $num1 + $num2`9 echo `expr $num1 + $num2`10 echo $num111 echo $num212 #return `expr $num1 + $num2`13 #ret1=`expr $num1 + $num2`14 return $ret115&#125;16#result=`sum`17#echo \"the sum is $&#123;result&#125;&amp;&amp;&amp;&amp;&amp;&amp;\"1819sum20result=$?21echo \"the sum is $&#123;result&#125;&amp;&amp;&amp;&amp;&amp;&amp;\" 得到了我想要的结果，所以以后如果shell中想要函数的返回结果，还是先调用，然后使用$?得到想要的return结果。如果只是调用执行一些命令，而不需要返回结果，那就怎么样都行，只要进入函数就能执行。 在这里插入图片描述 5、Shell 数组编程 数组，就是相同数据类型的元素按一定顺序排列的集合，就是把 有限个类型相同的变量用一个名字命名， 然后用编号区分他们的变量的集合，这个名字成为数组名，编号成为下标。 创建sh脚本 1vi arr1.sh 敲入代码： 1#!/bin/bash2#auto arr13#by zhaojiafu 201945A=( \"语文\" \"数学\" \"英语\" \"物理\" \"化学\" )67#数组的第一个元素8echo $&#123;A[0]&#125;910#数组的第2个元素11echo $&#123;A[1]&#125;1213#数组的第3个元素14echo $&#123;A[2]&#125;1516#数组的最后一个元素17echo $&#123;A[-1]&#125;1819#数组的所以元素120echo \"数组的所以元素1:$&#123;A[@]&#125;\"2122#数组的所以元素223echo \"数组的所以元素2:$&#123;A[*]&#125;\"242526# 数组的长度27echo \"数组的长度：$&#123;#A[*]&#125;\"28echo \"数组的长度：$&#123;#A[@]&#125;\" 运行结果： 在这里插入图片描述","categories":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/categories/shell%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/tags/shell%E7%BC%96%E7%A8%8B/"}]},{"title":"shell编程学习笔记之一--学习第三天","slug":"91ea2b79b8faedbdf9cccb0df9982610","date":"2019-11-22T03:34:32.000Z","updated":"2019-12-02T06:45:48.072Z","comments":true,"path":"2019/11/22/91ea2b79b8faedbdf9cccb0df9982610/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/22/91ea2b79b8faedbdf9cccb0df9982610/","excerpt":"","text":"一、说明：打算从B站学习一下shell编程，从很多的课程视频中，挑选了一个：B站视频地址：打算开始学习着做着笔记：这个需要一些Linux基础，还有vim的，如果不太熟练，可以看下我之前的整理的俩个博客： 1、整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令） 2、Linux下vim/vi 编辑器 命令总结Linux下vim/vi 编辑器 命令总结 3、学习课件：这个地址我直接把B站中评论下方分享的弄出来了，如果失效，可以下方评论，我把我下载的分享给你。下载地址 4、之前的博客：shell编程学习笔记之一–学习第一天shell编程学习笔记之一–学习第二天 二、实战演练：1、scp批量移动文件到当前目录下的demo目录下：创建shell文件 1vim auto_scp.sh 敲入代码： 1#!/bin/bash2#auto scp files for client3#by authors zhaojiafu 201945FILES=$*6if [ -z $* ];then7 echo -e \"\\033[32mUsage:&#123;sh $0 /boot|tmp|/tmp/test.txt|/home/zjf/shell_study/day02/*&#125; \\033[0m\"8 exit9fi1011#for i in `echo 自己的服务器ip 127.0.0.1`12for i in `echo 127.0.0.1`1314do15 # 1、zjf是用户名，改为自己的用户名16 # 2、/home/zjf/shell_study/day03/demo/是我当前目录下的demo目录地址17 scp -r $FILES zjf@$i:/home/zjf/shell_study/day03/demo/1819done 注意修改俩个地方，也可以把127.0.0.1给位自己的服务器地址或者Ubuntu的ip地址。 1# 1、zjf是用户名，改为自己的用户名2# 2、/home/zjf/shell_study/day03/demo/是我当前目录下的demo目录地址 执行脚本 1sh auto_scp.sh /home/zjf/shell_study/day02/* 然后就把我昨天的shell脚本文件都传输到当前的demo目录下了。 在这里插入图片描述 对比结果，已经成功。 在这里插入图片描述 在这里插入图片描述 这个就是类似cp的功能。 2、while循环：①、使用语法1while 条件:2do 3 条件为真时一直执行的语句4done ②、循环打印10以内的数：1vim while.sh 敲入代码： 1#!/bin/bash2#auto while3#by authors zhaojiafu 201945i=06while [[ $i -lt 10 ]]78do9 echo -e \"\\033[32mThe num is $i\\033[0m\"10 ((i++))1112done 执行结果： 在这里插入图片描述 加入-x把过程打印出来。 在这里插入图片描述 ③、打印出文件sh脚本：1vi read_line.sh 代码： 1#!/bin/bash2#auto read line3#bu authors zhaojiafu 2019456FILE=$178#后面不能加“：”，不然报错9while read line1011do12 echo $line1314done &lt;$FILE 模仿视频的方法，我把固定的文件，改为参数，这样我只有输入一个文件地址，就能打印出文件（按行打印，类似于python的readline的功能） 打印输出结果，使用昨天的一个sh文件，发现可以使用相对路径，不过要基于当前的shell脚本的位置为起点，要不就用绝对路径，绝对路径肯定不会有问题。 在这里插入图片描述 读取当前的while.sh文件 在这里插入图片描述 ④、取每行的第二列：1、创建一个IP的文件 1vi list.txt 敲入代码（命令行模式下yy复制一行，p粘贴到下一行）： 11 192.168.2.12 /src1 /des122 192.168.2.11 /src2 /des233 192.168.2.13 /src3 /des344 192.168.2.14 /src4 /des455 192.168.2.15 /src5 /des5 2、创建sh文件： 1vi while2.sh 敲入代码： 1#!/bin/bash2#by authors zhaojiafu 201934while read line56do78 IP=`echo $line |awk '&#123;print $2&#125;'`9 echo -e \"\\033[32mscp -r /tmp/test.txt root@$IP:/tmp \\033[0m\"1011done &lt;list.txt 执行sh脚本 在这里插入图片描述 我将awk的第二列改为第三列，然后运行脚本： 在这里插入图片描述","categories":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/categories/shell%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/tags/shell%E7%BC%96%E7%A8%8B/"}]},{"title":"shell编程学习笔记之一--学习第二天","slug":"86b38d254ab959d794b9b5e70ea2953e","date":"2019-11-21T03:34:32.000Z","updated":"2019-12-02T06:45:47.519Z","comments":true,"path":"2019/11/21/86b38d254ab959d794b9b5e70ea2953e/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/21/86b38d254ab959d794b9b5e70ea2953e/","excerpt":"","text":"一、说明：打算从B站学习一下shell编程，从很多的课程视频中，挑选了一个：B站视频地址：打算开始学习着做着笔记：这个需要一些Linux基础，还有vim的，如果不太熟练，可以看下我之前的整理的俩个博客： 1、整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令） 2、Linux下vim/vi 编辑器 命令总结Linux下vim/vi 编辑器 命令总结 3、学习课件：这个地址我直接把B站中评论下方分享的弄出来了，如果失效，可以下方评论，我把我下载的分享给你。下载地址 4、之前的博客：①、shell编程学习笔记之一–学习第一天shell编程学习笔记之一–学习第一天 二、实战演练：1、MySQL数据库的自动备份1vim backup_mysql.sh 敲入代码（建议自己敲，还可以熟练一下vim操作，非常熟练vim的可以直接复制测试）： 这个代码我还没有成功测试，因为公司没有MySQL，所以先跟着视频，敲出来，回家用家里的Ubuntu安装个MySQL测试。 1#!/bin/bash2#auto backup mysql db## 标题3#by authors zhaojiafu 20194#define backup path56BAK_DIR=/data/backup/`date +%Y%m%d`7MYSQLDB=discuz8MYSQLUSER=backup9MYSQLPW=12345610MYSQLCMD=/usr/bin/mysqldump1112if [ $UID -ne 0 ];then13 echo \"Must to be use root for exec shell.\"14 exit15fi1617if [ ! -d $BAK_DIR ];then18 mkdir -p $BAK_DIR19 echo -e \"\\033[32mThe $BAK_DIR Create Successfully!\\033[0m\"20else21 echo \"This $BAK_DIR is exists...\"2223fi2425#Mysql BACKUP COMMAND26$MYSQLCMD -u $MYSQLUSER -p $MYSQLPW -d $MYSQLDB &gt; $BAK_DIR/$MYSQLDB.sql2728if [ $? -eq 0 ];then29 echo -e \"033[32mThe Mysql Backup $MYSQLDB Succcessfully!\\033[0m\"30else31 echo -e \"033[32mThe Mysql Backup $MYSQLDB Failed,Please check.\\033[0m\"32fi 2、crontab 定时任务：这个我也不太会，正好看到了，学习一下吧，说不定日后用到定时。参考学习文档：crontab 定时任务 通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。 2.1. 命令格式1crontab [-u user] file crontab [-u user] [ -e | -l | -r ] 2.2. 命令参数 -u user：用来设定某个用户的crontab服务； file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。-i：在删除用户的crontab文件时给确认提示。 2.3. crontab的文件格式1分 时 日 月 星期 要运行的命令 注意：前面5个域用空格分隔 第1列分钟0～59第2列小时0～23（0表示子夜）第3列日1～31第4列月1～12第5列星期0～7（0和7表示星期天）第6列要运行的命令 2.4. 常用方法：1）、列出crontab文件列出crontab文件： 1crontab -l 可用来增加备份（$HOME/mycron是你需要备份的一个目录就行）： 1crontab -l &gt; $HOME/mycron 2）、编辑crontab文件1crontab -e 可以像使用vi编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， cron会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。 我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条： 1# DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month230 3 1,7,14,21,26 * * /bin/find -name 'core' -exec rm &#123;&#125; \\; 然后使用刚刚-l的命令。列出crontab文件： 1crontab -l 在这里插入图片描述 3）、删除crontab文件：1crontab -r 然后在使用 1crontab -l 就会显示没有crontab文件了。 2.5. 使用实例：实例1：每1分钟执行一次myCommand1* * * * * myCommand 实例2：每小时的第3和第15分钟执行13,15 * * * * myCommand 实例3：在上午8点到11点的第3和第15分钟执行13,15 8-11 * * * myCommand 实例4：每隔两天的上午8点到11点的第3和第15分钟执行13,15 8-11 */2 * * myCommand 实例5：每周一上午8点到11点的第3和第15分钟执行13,15 8-11 * * 1 myCommand 实例6：每晚的21:30重启smb130 21 * * * /etc/init.d/smb restart 实例7：每月1、10、22日的4 : 45重启smb145 4 1,10,22 * * /etc/init.d/smb restart 实例8：每周六、周日的1 : 10重启smb110 1 * * 6,0 /etc/init.d/smb restart 实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb10,30 18-23 * * * /etc/init.d/smb restart 实例10：每星期六的晚上11 : 00 pm重启smb10 23 * * 6 /etc/init.d/smb restart 实例11：每一小时重启smb1* */1 * * * /etc/init.d/smb restart 实例12：晚上11点到早上7点之间，每隔一小时重启smb10 23-7 * * * /etc/init.d/smb restart 3、每隔2分钟把当前日期写入当前的time.txt文件中根据上面的MySQL命令，我先测试一下定时任务和shell脚本的简单结合，因为公司里面没有MySQL，我也没有权限安装MySQL，先用其他的测试这个功能。 1、创建backup_time.sh文件1vim backup_time.sh 敲入代码： 1#!/bin/bash2#auto crontab write time3#by authors zhaojiafu 2019456#time1=`date +%Y-%m-%d %H:%M.%S`7time1=`date +%Y-%m-%d`8file=/home/zjf/shell_study/day02/time.txt910echo \"Is reading to write $time1 to $file\"11echo $time1 &gt;&gt; $file 然后先用sh命令执行一下，测试脚本是否成功，因为后面要用crontab执行，所以sh文件设计的任何目录要写觉得路径。 2、测试shell脚本代码逻辑是否正确执行shell脚本： 在这里插入图片描述 然后生成一个time.txt 文件 在这里插入图片描述 然后cat查看文件： 在这里插入图片描述 3、编辑crontab文件：1crontab -e 1*/2 * * * * /bin/bash /home/zjf/shell_study/day02/backup_time.sh 其中后面的*代表所有，*/2,代码每俩分钟。记得要写绝对路径。 保存退出之后，然后等待一会就可以执行了。 然后我写会博客，等待了几分钟，在看看time.txt文件： 在这里插入图片描述 这个时候说明，定时任务创建成功了。不过好像里面不能写echo打印输出的语句，我写的测试没有出来。 4、LAMP 架构的整合和服务启动shell脚本代码（还为测试，后续抽时间补充）： 1#!/bin/bash2#auto intall lamp3#by authors zhaojiafu 2019456#Httpd define path variable7H_FILES=httpd-2.2.27.tar.bz28H_FILES_DIR=httpd-2.2.279H_URL=http://mirrors.cnnic.cn/apache/httpd/10H_PREFIX=/usr/local/apache2/111213#MySQL define path variable14M_FILES=mysql-5.5.20.tar.gz15M_FILES_DIR=mysql-5.5.2016M_URL=http://down1.chinaunix.net/distfiles/17M_PREFIX=/usr/local/mysql/1819#PHP define path variable20P_FILES=php-5.3.28.tar.bz221P_FILES_DIR=php-5.3.2822P_URL=http://mirrors.sohu.com/php/23P_PREFIX=/usr/local/php5/242526#auto Menu Follow27if [ -z \"$1\" ];then28 echo -e \"\\033[36mPlease Select Install Menu follow:\\033[0m\"29 echo -e \"\\033[32m1）、编译安装Apache服务器\\033[1m\"30 echo -e \"2）、编译安装Mysql服务器\"31 echo -e \"3）、编译安装PHP服务器\"32 echo -e \"4）、配置index.php并启动LAMP服务\"33 echo -e \"\\033[31mUsage(用法):&#123; /bin/bash $0 1|2|3|4|help \\033[0m&#125;\"34 exit35fi36#auto install Apache37if [[ \"$1\" -eq \"1\" ]];then383940 wegt -c $H_URL/$H_FILES &amp;&amp;tar -jxvf $H_FILES &amp;&amp;cd $H_FILES_DIR ;./configure --prefix=$H_PREFIX4142 if [ $? -eq 0 ];then43 make &amp;&amp;make install44 echo -e \"\\033[32mT $H_FILES_DIR Server Install Successfully!\\033[0m\"45 else46 echo -e \"\\033[32mT $H_FILES_DIR Server Install Failed,Please check....\\033[0m\"47 exit48 fi49#auto install Mysql50elif [[ \"$1\" -eq \"2\" ]];then5152 wegt -c $M_URL/$M_FILES &amp;&amp;tar -zxvf $M_FILES &amp;&amp;cd $M_FILES_DIR &amp;&amp;yum install cmake -y ;cmake .53-DCMAKE_INSTALL_PREFIX=$M_PREFIX \\54-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\55-DMYSQL_DATADIR=/data/mysql \\56-DSYSCONFDIR=/etc \\57-DMYSQL_USER=mysql \\58-DMYSQL_TCP_PORT=3306 \\59-DWITH_XTRADB_STORAGE_ENGINE=1 \\60-DWITH_INNOBASE_STORAGE_ENGINE=1 \\61-DWITH_PARTITION_STORAGE_ENGINE=1 \\62-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\63-DWITH_MYISAM_STORAGE_ENGINE=1 \\64-DWITH_READLINE=1 \\65-DENABLED_LOCAL_INFILE=1 \\66-DWITH_EXTRA_CHARSETS=1 \\67-DDEFAULT_CHARSET=utf8 \\68-DDEFAULT_COLLATION=utf8_general_ci \\69-DEXTRA_CHARSETS=all \\70-DWITH_BIG_TABLES=1 \\71-DWITH_DEBUG=072make &amp;&amp; make install73/bin/cp support-files/my-small.cnf /etc/my.conf74/bin/cp support-files/mysql.server /etc/init.d/mysqld75chmod +x /etc/init.d/mysqld76chkconfig --add mysqld77chkconfig mysqld on7879 if [ $? -eq 0 ];then80 make &amp;&amp;make install81 echo -e \"\\033[32mT $M_FILES_DIR Server Install Successfully!\\033[0m\"82 else83 echo -e \"\\033[32mT $M_FILES_DIR Server Install Failed,Please check....\\033[0m\"84 exit85 fi86#auto install PHP87elif [[ \"$1\" -eq \"3\" ]];then8889 wegt -c $P_URL/$P_FILES &amp;&amp;tar -jxvf $P_FILES &amp;&amp;cd $P_FILES_DIR ;./configure --prefix=$P_PREFIX --with-config-fil90e-path=$P_PREFIX/etc --with-mysql=$M_PREFIX --with-apxs2=$H_PREFIX/bin/apxs9192 if [ $? -eq 0 ];then93 make ZEND_EXTRA_LIBS='-liconv' &amp;&amp;make install94 echo -e \"\\033[32mT $P_FILES_DIR Server Install Successfully!\\033[0m\"95 else96 echo -e \"\\033[32mT $P_FILES_DIR Server Install Failed,Please check....\\033[0m\"97 exit98 fi99# 配置 index.php 并启动 LAMP 服务100elif [[ \"$1\" -eq \"4\" ]];then101 sed -i '/DirectoryIndex/s/index.html/index.php index.html/g' $H_PREFIX/conf/httpd.conf102 $H_PREFIX/bin/apachectl restart103 echo \"AddType application/x-httpd-php .php\" &gt;&gt;$H_PREFIX/conf/httpd.conf104 IP=`ifconfig eth1|grep \"Bcast\"|awk '&#123;print $2&#125;'|cut -d: -f2`105 echo \"You can access http://$IP/\"106# cat &gt;$H_PREFIX/htdocs/index.php &lt;&lt;EOF &lt;?php phpinfo(); ?&gt; EOF107cat &gt;$H_PREFIX/htdocs/index.php &lt;&lt;EOF108&lt;?php phpinfo();109?&gt;110EOF111Fi112113else114 echo \"输入参数格式错误，请重新输入：\"115 echo -e \"\\033[36mPlease Select Install Menu follow:\\033[0m\"116 echo -e \"\\033[32m1）、编译安装Apache服务器\\033[1m\"117 echo -e \"2）、编译安装Mysql服务器\"118 echo -e \"3）、编译安装PHP服务器\"119 echo -e \"4）、配置index.php并启动LAMP服务\"120 echo -e \"\\033[31mUsage(用法):&#123; /bin/bash $0 1|2|3|4|help \\033[0m&#125;\"121 exit122fi 记得：下面这段cat要顶格，不然好像报错，具体安装代码还没有测试，测试了再来补充。 1cat &gt;$H_PREFIX/htdocs/index.php &lt;&lt;EOF2&lt;?php phpinfo();3?&gt;4EOF5Fi 5、for循环：示例1–打印出15以内的数：1vim for1.sh 敲入代码： 1#!/bin/bash2#auto for 1 153#by authors zhaojiafu 201945for i in `seq 1 20`67do8 echo \"Num is $i\"9done 执行代码： 1sh for1.sh 结果： 在这里插入图片描述 示例2–求100以内的和：1vim for2.sh 敲入代码： 1#!/bin/bash2#auto 100以内的和3#by authors zhaojiafu 201945sum=067for ((i=0;i&lt;=100;i++))89do10 sum=`expr $i + $sum`1112done1314echo $sum 执行代码和结果： 在这里插入图片描述","categories":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/categories/shell%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/tags/shell%E7%BC%96%E7%A8%8B/"}]},{"title":"shell编程学习笔记之一--学习第一天","slug":"27867a069a56d6dbec2952579d204b64","date":"2019-11-20T03:34:32.000Z","updated":"2019-12-02T06:45:48.286Z","comments":true,"path":"2019/11/20/27867a069a56d6dbec2952579d204b64/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/20/27867a069a56d6dbec2952579d204b64/","excerpt":"","text":"一、说明：打算从B站学习一下shell编程，从很多的课程视频中，挑选了一个：B站视频地址：打算开始学习着做着笔记：这个需要一些Linux基础，还有vim的，如果不太熟练，可以看下我之前的整理的俩个博客： 1、整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令） 2、Linux下vim/vi 编辑器 命令总结Linux下vim/vi 编辑器 命令总结 3、学习课件：这个地址我直接把B站中评论下方分享的弄出来了，如果失效，可以下方评论，我把我下载的分享给你。下载地址 二、跟着视频实践开始：建议打开我之前的来个博客（如果对vim和linux不太熟悉），然后看着视频，开始学习跟着视频写出代码。如果只看一遍，我感觉我是记不住的，还能多熟练一下Linux知识。 第一天，加油！！！ 1、打出hello world：①、更改sh文件权限执行linux的命令，我这里新建一个学习文件夹，跟着学习视频系统学习一波shell编程： 1mkdir shell_study2cd shell_study/3vim first_shell.sh 在first_shell.sh中敲入这些代码，（建议和我一样的之前不会shell的，自己敲一遍，不要做眼高手低的人。） 1#!/bin/bash2#Filename:first_shell.sh3#auto echo hello world!4#by authors zhaojiafu 201956echo \"Hello world!\" echo 相当于python的print，就是一个打印的功能 在这里插入图片描述 然后，wq保存即可（vim的文本操作，小白不会的可以打开我的vim博客，需要什么搜索跟着实现）。 然后更改文件权限chmod：这个我linux命令必须熟练掌握常的命令这个博客里面有常用的一些命令总结。不会的也可以常常学习看看。 1chmod 777 first_shell.sh2chmod o+x first_shell.sh 然后： 1./first_shell.sh 打印出Hello world!： 在这里插入图片描述 第一个shell命令就完成了，是不是很简单。 ②、不更改文件权限执行：看到视频的命令，他用的问件是同一个，而且之前的权限改了，所以，我重新再写一个，测试试试： 1vim first_shell2.sh 写入： 1#!/bin/bash2#Filename:first_shell.sh3#auto echo hell world!4#by authors zhaojiafu 201956echo \"Hello world22!\" 在这里插入图片描述 然后保存： 1/bin/bash ./first_shell2.sh 在这里插入图片描述 为了再一次证实俩个文件权限不一样： 1ll 在这里插入图片描述 可以看出俩个文件权限确实不一样，但是都可以实现，这样，对于视频的讲解也能更理解深刻了，这样虽说学习的速度是慢了一些，但对于第一次学习，效果觉得很好，坚持下去，学会了才是自己的，不然还是别人的。 2、shell编程之变量①、变量的简单使用变量的使用需要$ 而且赋值不需要空格，和python有区别。 1vim var.sh 敲入代码（熟练vim的可以复制，其他建议自己和我一样，敲出来学习效果比较好，以后不再赘述）： 1#!/bin/bash2#define path variables3#by authors zhaojiafu 201945name=zhaojiafu67echo \"My name is $name\"89echo $UID1011echo $PWD 然后直接使用不更改权限执行shell脚本： 在这里插入图片描述 ②、几个shell的常见系统变量1SHELL 常见的系统变量解析 :2$0 当前程序的名称3$n 当前程序的第 n 个参数 ,n=1,2, , 94$* 当前程序的所有参数 ( 不包括程序本身 )5$# 当前程序的参数个数 ( 不包括程序本身 )6$? 命令或程序执行完后的状态，一般返回 0 表示执行成功。7$UID 当前用户的 ID8$PWD 当前所在的目录 1、测试$0和$n:1vim var.sh 敲入代码： 1#!/bin/bash2#define path variables3#by authors zhaojiafu 201945name=zhaojiafu67echo \"My name is $name\"89echo $UID1011echo $PWD121314echo \"***********************************\"1516echo \"$ 0 $0 \"1718echo \"$ 1 $1\"19echo \"$ 2 $2\"20~ 我感觉这样更能表达出效果：$0就是文件名称$1和$2为空 1/bin/bash var.sh 在这里插入图片描述 1/bin/bash var.sh hello word everyone 这个就是shell会把空格分开的作为传入的参数。 在这里插入图片描述 2、测试$*、$#、$?1vim var.sh 敲入代码： 1#!/bin/bash2#define path variables3#by authors zhaojiafu 201945name=zhaojiafu67echo \"My name is $name\"89echo $UID1011echo $PWD121314echo \"***********************************\"1516echo \"$ 0 $0 \"1718echo \"$ 1 $1\"19echo \"$ 2 $2\"2021echo \"***********************************\"2223echo \"This is \\$* $*\"24echo \"This is \\$\\# $#\"25echo \"This is \\$? $?\" 执行shell脚本： 1/bin/bash var.sh hello word everyone 在这里插入图片描述 ③、LAMP菜单导航编写：1vim var2.sh 敲入代码： 1#!/bin/bash2#by authors zhaojiafu 201934echo -e \"\\033[31m Please select Menu follow:\\033[1m\"56echo \"1)安装apache服务器.\"7echo \"2)安装Mysql服务器.\"8echo \"3)安装PHP服务器.\"9echo \"4)配置LAMP WEB架构.\"1011echo \"---------------------------------------------\" 保存后执行：发现视频中，直接sh 后面跟着shell脚本也是可以执行。现在知道三个方式可以执行shell脚本命令了。 在这里插入图片描述 3、if条件语句：①、判断俩个数字大小1vim if_test.sh 敲入逻辑代码：记得： if后面要跟；和then 最后面要跟上fi才算得上完整的if语句，不然报错。 1#!/bin/bash2#auto if test3#by authors zhaojiafu 201945NUM1=1006num2=20078if (($NUM1 &gt; $num2));then9 echo \"This is $NUM1 greate $num2\"10else11 echo \"This is $NUM1 less $num2\"12fi 运行脚本： 1sh if_text.sh 在这里插入图片描述 ②、一些逻辑运算符（熟练记得）逻辑运算符解析： 1-f 判断文件是否存在 eg: if [ -f filename ]2-d 判断目录是否存在 eg: if [ -d dir ]3-eq 等于 应用于：整型比较4-ne 不等于 应用于：整型比较5-lt 小于 应用于：整型比较6-gt 大于 应用于：整型比较7-le 小于或等于 应用于：整型比较8-ge 大于或等于 应用于：整型比较9-a 双方都成立（ and） 逻辑表达式 –a 逻辑表达式10-o 单方成立（ or） 逻辑表达式 –o 逻辑表达式11-z 空字符串 ③、判断文件夹是否存在： 注意点 判断的中括号必须要都有空格，不然报错，我第一次$path 和]没有空格，就会报错。 [ ! -d $path ] 使用颜色字体，记得echo后面跟着-e，我刚刚忘了，然后没颜色，还把\\033[32m这些都打印出来了。后来加入-e 就好了。 vim创建文件，并进入敲入代码 1vim if_is_dir.sh 敲入代码： 其中这个路径可以是相对路径（相对于当前shell执行脚本文件的位置），因为视频的教学中使用的是绝对路径，我这里直接使用相对路径测试。 1#!/bin/bash2#auto is dir3#by zhaojiafu 201945path=./shell_study/167if [ ! -d $path ];then8 mkdir -p $path9 echo -e \"\\033[32m$path create success! \\033[0m\"10else11 echo -e \"\\033[32m$path id exists,exit\\033[0m\"12fi 输入执行shell脚本命令： 1/bin/bash if_is_dir.sh 然后自动创建一个文件夹 在这里插入图片描述 创建了文件夹。 在这里插入图片描述 到这里，我想使用之前的一个常用系统变量$n传参进行一个自动化脚本，判断是否存在目录。 代码改为：只是把之前的固定目录，换成了$1,用来传参。 1#!/bin/bash2#auto is dir3#by zhaojiafu 201945#path=./shell_study6path=$178if [ ! -d $path ];then9 mkdir -p $path10 echo -e \"\\033[32m$path create success! \\033[0m\"11else12 echo -e \"\\033[32m$path id exists,exit\\033[0m\"13fi 然后执行命令试试： 1/bin/bash if_is_dir.sh 1/2 在这里插入图片描述 在这里插入图片描述 进入1目录，还有个2目录： 在这里插入图片描述 所以我们测试成功了。 如果再执行一次，就会提示已经存在目录。 在这里插入图片描述 ④、判断文件是否存在：1vim is_file.sh 写入代码： 1#!/bin/bash2#auto is file3#by authors zhaojiafu 201945File=$167if [ ! -f $File ];then8 echo \"ok\" &gt;&gt; $File9else10 echo -e \"\\033[32m-----------------------------------\\033[1m\"11 cat $File12fi 第一次执行： 在这里插入图片描述 第二次执行： 在这里插入图片描述 ④、成绩分数分类：创建shell脚本 1vim score.sh 敲入逻辑代码： 1#!/bin/bash2#auto score class3#by authors zhaojiafu 201945score=$167if [ -z $score ];then8 echo \"请输入分数\"9 exit10else11 if [ $score -gt 90 ];then12 echo \"优秀\"13 elif [ $score -gt 80 ];then14 echo \"良好\"15 elif [ $score -gt 70 ];then16 echo \"中等\"17 elif [ $score -gt 60 ];then18 echo \"及格\"19 else20 echo \"不及格\"21 fi22fi 测试： 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 结果输入110 竟然页数优秀，所以，需要加个限制： 在这里插入图片描述 这个不知道为什么，我把大于100或者小于0合并到一个判断里面，总是报错，分开就好了，如果有懂得欢迎给我讲讲哈。 1#!/bin/bash2#auto score class3#by authors zhaojiafu 201945score=$167if [ -z $score ];then8 echo \"请输入分数\"9 exit10elif [[ $score -gt 100 ]];then11 echo \"输入的分数有误，分数在0-100之间\"1213# elif [[ $score -gt 100 -o $score -lt 0 ]];then14elif [[ $score -lt 0 ]];then15 echo \"输入的分数有误，分数在0-100之间\"16else17 if [ $score -gt 90 ];then18 echo \"优秀\"19 elif [ $score -gt 80 ];then20 echo \"良好\"21 elif [ $score -gt 70 ];then22 echo \"中等\"23 elif [ $score -gt 60 ];then24 echo \"及格\"25 else26 echo \"不及格\"27 fi28fi 在这里插入图片描述 在这里插入图片描述","categories":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/categories/shell%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"shell编程","slug":"shell编程","permalink":"https://zhaojiafu.github.io/tags/shell%E7%BC%96%E7%A8%8B/"}]},{"title":"pybloom_live的简单使用","slug":"04ea5aa0f5b59d83448d7258c6c155fd","date":"2019-11-19T03:34:32.000Z","updated":"2019-12-02T06:45:48.985Z","comments":true,"path":"2019/11/19/04ea5aa0f5b59d83448d7258c6c155fd/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/19/04ea5aa0f5b59d83448d7258c6c155fd/","excerpt":"","text":"一、windows安装：这个参考我另一个博客吧，省的绕弯路，我都因为这个耽误很多时间。window下安装pybloom_live 二、pybloom_live的简单使用：pybloom_live下面有俩个方法，BloomFilter（定容）和ScalableBloomFilter（可伸缩的）。bloom是根据一个位进行投影的去重算法，具体我没有了解这么深，如果感兴趣，自己谷歌或者百度搜索了解吧。 1、定容BloomFilter的用法：1from pybloom_live import BloomFilter23bf = BloomFilter(capacity=1000)45bf.add(\"皮卡丘1\")67print(\"皮卡丘1\" in bf) # True8print(\"皮卡丘2\" in bf) # False 其中：capacity是必须的参数， 进入方法说明，查看： capacity意思就是做多可以加入这么多数，如果再插入就会增加错误率，但是我 好奇测试了，结果报错了。 error_rate：错误率（选填） 在这里插入图片描述 测试能否超过定容数量： 1from pybloom_live import BloomFilter23f = BloomFilter(capacity=1000, error_rate=0.001)4print(f.capacity)5# 10006print('len(f):', len(f))7for i in range(0, f.capacity):8 f.add(i)9 print(\"加入成功\",i)10for i in range(0, f.capacity):11 f.add(i + 999)12 print(\"加入成功\",i,len(f))1314print('len(f):', len(f)) 报错： 在这里插入图片描述 可以看出，数量是固定的，不能过多的加入。定容1000时，1001可以加入，到1002时就报错了。 2、ScalableBloomFilter（可伸缩）这个就是如果超过初始数量，也是可以的，但是错误率会增加一点，但是不会报错。所以实际是还是使用可伸缩比较好，具体还是看看需求吧，如果数量去重的不多，定容的也很好。 1from pybloom_live import ScalableBloomFilter23#mode=ScalableBloomFilter.SMALL_SET_GROWTH4sbf = ScalableBloomFilter(initial_capacity=100, error_rate=0.001, mode=ScalableBloomFilter.LARGE_SET_GROWTH)56url = \"皮卡丘1\"7url2 = \"皮卡丘2\"89sbf.add(url)1011print(url in sbf) # True12print(url2 in sbf) # False 官方参数：initial_capacity：这个初始化默认容量100，其实加入1000，也能用。错误率和mode都有默认。 在这里插入图片描述 3、对比定容不一样，加入的一样的ScalableBloomFilter（LARGE_SET_GROWTH）（mode=ScalableBloomFilter.LARGE_SET_GROWTH） 我这里以分别定容为100,1000,10000，加入都是1000，测试总共加入完毕用时，和加入成功的数量为对比依据。 代码： 1# mode=LARGE_SET_GROWTH2# 1、定容100，加入100003from pybloom_live import ScalableBloomFilter4import time5# sbf = ScalableBloomFilter(initial_capacity=100, mode=ScalableBloomFilter.SMALL_SET_GROWTH)6sbf = ScalableBloomFilter(initial_capacity=100, mode=ScalableBloomFilter.LARGE_SET_GROWTH)7count = 100008start_time = time.time()9for i in range(0, count):10 sbf.add(i)11 # print(\"加入成功\", i, len(sbf))12end_time = time.time()13print('定容100，加入10000')14print(\"时间\", end_time-start_time)15print(\"成功加入长度\", len(sbf))161718# 2、定容1000，加入1000019from pybloom_live import ScalableBloomFilter20import time21# sbf = ScalableBloomFilter(initial_capacity=1000, mode=ScalableBloomFilter.SMALL_SET_GROWTH)22sbf = ScalableBloomFilter(initial_capacity=1000, mode=ScalableBloomFilter.LARGE_SET_GROWTH)23count = 1000024start_time = time.time()25for i in range(0, count):26 sbf.add(i)27 # print(\"加入成功\", i, len(sbf))28end_time = time.time()29print('定容1000，加入10000')30print(\"时间\", end_time-start_time)31print(\"成功加入长度\", len(sbf))32# print((1.0 - (len(sbf) / float(count))) &lt;= sbf.error_rate + 2e-18)#True333435# 3、定容10000，加入1000036from pybloom_live import ScalableBloomFilter37import time38# sbf = ScalableBloomFilter(initial_capacity=10000, mode=ScalableBloomFilter.SMALL_SET_GROWTH)39sbf = ScalableBloomFilter(initial_capacity=10000, mode=ScalableBloomFilter.LARGE_SET_GROWTH)40count = 1000041start_time = time.time()42for i in range(0, count):43 sbf.add(i)44 # print(\"加入成功\", i, len(sbf))45end_time = time.time()46print('定容10000，加入10000')47print(\"时间\", end_time-start_time)48print(\"成功加入长度\", len(sbf))49# print((1.0 - (len(sbf) / float(count))) &lt;= sbf.error_rate + 2e-18)#True 输出结果： 12定容100，加入100003时间 0.19886684417724614成功加入长度 99825定容1000，加入100006时间 0.155904054641723637成功加入长度 99868定容10000，加入100009时间 0.108933448791503910成功加入长度 9999 小总结（mode=ScalableBloomFilter.LARGE_SET_GROWTH）：通过输出的对比结果来看，选取的定容数量越是接近或者大于等于需要加入的去重数量，使用的时间越短，正确率越高。 4、对比定容不一样，加入的一样的ScalableBloomFilter（SMALL_SET_GROWTH）（mode=ScalableBloomFilter.SMALL_SET_GROWTH） 代码： 1# SMALL_SET_GROWTH2# 1、定容100，加入100003from pybloom_live import ScalableBloomFilter4import time5sbf = ScalableBloomFilter(initial_capacity=100, mode=ScalableBloomFilter.SMALL_SET_GROWTH)6# sbf = ScalableBloomFilter(initial_capacity=100, mode=ScalableBloomFilter.LARGE_SET_GROWTH)7count = 100008start_time = time.time()9for i in range(0, count):10 sbf.add(i)11 # print(\"加入成功\", i, len(sbf))12end_time = time.time()13print('定容100，加入10000')14print(\"时间\", end_time-start_time)15print(\"成功加入长度\", len(sbf))161718# 2、定容1000，加入1000019from pybloom_live import ScalableBloomFilter20import time21sbf = ScalableBloomFilter(initial_capacity=1000, mode=ScalableBloomFilter.SMALL_SET_GROWTH)22# sbf = ScalableBloomFilter(initial_capacity=1000, mode=ScalableBloomFilter.LARGE_SET_GROWTH)23count = 1000024start_time = time.time()25for i in range(0, count):26 sbf.add(i)27 # print(\"加入成功\", i, len(sbf))28end_time = time.time()29print('定容1000，加入10000')30print(\"时间\", end_time-start_time)31print(\"成功加入长度\", len(sbf))32# print((1.0 - (len(sbf) / float(count))) &lt;= sbf.error_rate + 2e-18)#True333435# 3、定容10000，加入1000036from pybloom_live import ScalableBloomFilter37import time38sbf = ScalableBloomFilter(initial_capacity=10000, mode=ScalableBloomFilter.SMALL_SET_GROWTH)39# sbf = ScalableBloomFilter(initial_capacity=10000, mode=ScalableBloomFilter.LARGE_SET_GROWTH)40count = 1000041start_time = time.time()42for i in range(0, count):43 sbf.add(i)44 # print(\"加入成功\", i, len(sbf))45end_time = time.time()46print('定容10000，加入10000')47print(\"时间\", end_time-start_time)48print(\"成功加入长度\", len(sbf))49# print((1.0 - (len(sbf) / float(count))) &lt;= sbf.error_rate + 2e-18)#True 结果： 1定容100，加入100002时间 0.25386357307434083成功加入长度 99614定容1000，加入100005时间 0.19586300849914556成功加入长度 99797定容10000，加入100008时间 0.13291907310485849成功加入长度 9999 小总结：（mode=ScalableBloomFilter.SMALL_SET_GROWTH）通过上面的结果对比来看，当定容数量和结果大于等于需要去重的个数时，去重效率越好，错误率越低（加入的正确率越高） 5、俩个mode对比：通过上面3,4的来个结果对比，一下俩个mode的区别： mode=ScalableBloomFilter.LARGE_SET_GROWTH的结果 12定容100，加入100003时间 0.19886684417724614成功加入长度 99825定容1000，加入100006时间 0.155904054641723637成功加入长度 99868定容10000，加入100009时间 0.108933448791503910成功加入长度 9999 mode=ScalableBloomFilter.SMALL_SET_GROWTH的结果 1定容100，加入100002时间 0.25386357307434083成功加入长度 99614定容1000，加入100005时间 0.19586300849914556成功加入长度 99797定容10000，加入100008时间 0.13291907310485849成功加入长度 9999 通过定容数量从小往大排序来看，当数量越接近加入的去重数量，效果幅度，SMALL_SET_GROWTH是最大的，而且SMALL_SET_GROWTH的用时和效率也比LARGE_SET_GROWTH的低，这也就反映出为什么默认是LARGE_SET_GROWTH。 6、总结测试：通过上面的简单测试，发现使用ScalableBloomFilter（可伸缩）进入检查去重效果比较好,而且数量初始化参数尽量大于需求去重的数量效果最优，模式就使用默认的LARGE_SET_GROWTH最好。","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"window下安装pybloom_live报错的问题解决--（Microsoft Visual C++ 14.0 is required. Get it with _Microsoft Visual）","slug":"50013d8dab9229907ac2894d6aba2f8f","date":"2019-11-19T03:34:32.000Z","updated":"2019-12-02T06:45:48.694Z","comments":true,"path":"2019/11/19/50013d8dab9229907ac2894d6aba2f8f/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/19/50013d8dab9229907ac2894d6aba2f8f/","excerpt":"","text":"一、说明：今天打算安装个 安装模块pybloom_live： 1pip install pybloom_live 结果报错： 1Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": https://visualstudio.microsoft.com/downloads/ 报错截图： 在这里插入图片描述 二、解决思路这个我之前安装scrapy框架时也遇到过类似的，当时是有一个安装模块Twisted安装不上，然后我就找pybloom_live的GitHub位置，看看需要哪些模块，是不是模块安装不了的问题呐？带着疑问往下找 1、找的GitHub仓库位置模块地址： 在这里插入图片描述 点击之后进入： 在这里插入图片描述 2、找到需要的模块：根据requirements.txt，发现就需要一个模块，然后我尝试安装该模块： 在这里插入图片描述 3、安装bitarray模块：模块地址： 谷歌翻译该模块的描述： 在这里插入图片描述 其实这个模块是二进制的操作模块（我目前还用不到，先不学了，后续需要学到二进制的一些算法再来学习学习）。 下面我就直接安装试试： 1pip install bitarray 安装报错：找到安装pybloom_live失败的最终原因了。 在这里插入图片描述 和pybloom_live失败对比，发现刚刚报错还是依赖模块bitarray的问题。 在这里插入图片描述 4、解决bitarray模块安装的问题：其实目前我知道有俩个方法（这个是我解决之后才知道有俩个方法） 方法1（不推荐，下载安装都很麻烦）:根据报错下载安装Microsoft Visual C++ 14.0，因为我之前安装scrapy安装报错也是这个问题，但是我就觉得这个不好用，因为这个软件有几个G，很麻烦，我么有尝试安装解决这个方法。https://visualstudio.microsoft.com/downloads/ 方法2（这个是我尝试之后才知道可以，推荐这个方法）：我参考之前window安装scrapy的方法，尝试之后发现可以。我知道window安装scrapy的过程下载bitarray：下载地址： 进入下载地址搜索bitarray： 在这里插入图片描述 下载之后，直接进入cmd命令窗口： 1pip install 复制刚刚下载的绝对路径2# 比如我的3pip install C:\\Users\\zjf\\Downloads\\bitarray-1.1.0-cp36-cp36m-win_amd64.whl 然后安装成功： 在这里插入图片描述 5、再次安装pybloom_live（成功）:1pip install pybloom_live 安装成功 在这里插入图片描述 三、总结其实我中间才坑的过程没有写出来，其实我弄了有俩个多小时，最后把我觉得最正确的思路写出来，希望能够帮到你，如果真的帮助到你了可以右上角给我点个赞哈。 参考：文中提到或者用到的网址： https://pypi.org/project/pybloom_live/https://github.com/joseph-fox/python-bloomfilterhttps://github.com/joseph-fox/python-bloomfilter/blob/master/requirements.txthttps://zhuanlan.zhihu.com/p/37995301https://pypi.org/project/bitarray/https://www.lfd.uci.edu/~gohlke/pythonlibs/https://visualstudio.microsoft.com/zh-hans/downloads/","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"对于文本中含有Unicode编码和&quot;时，如何提取出想要的字符串","slug":"ab7896166abab421da7b72b1ebd57d80","date":"2019-11-18T03:34:32.000Z","updated":"2019-12-02T07:00:36.591Z","comments":true,"path":"2019/11/18/ab7896166abab421da7b72b1ebd57d80/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/18/ab7896166abab421da7b72b1ebd57d80/","excerpt":"","text":"一、问题说明：今天爬取一个页面，但是获取的文本确实有点问题，将近几个小时都在搞这个问题，刚开始想着直接使用正则把所有中文和中文字符提取出来，但是发现里面还有HTML样式，说白了就是一个HTML字符串，但是直接使用lxml和bs4无法提取出问本，因为中间还有Unicode编码。 二、最终找到一个解决方法：我感觉肯定有比我这个简单的方法，既然人家页面可以直接用，但是我能力有限，没有想到也没有找到如何解决这中问题，如果有懂得简单方法，还望不吝赐教哈 1、有问题的文本：这是个列表，每个列表有一个元素，这个元素就是一个含有Unicode编码的HTML样式的字符串，但是还有中文，我没有找到简单的方法解决，下面说说我的笨方法。 1['&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀&amp;quot;']2['&amp;quot;\\\\u003Cp\\\\u003E坐公交车总会听见一句广播：“请不要把头手伸出窗外”。由于太熟悉，很多人有意无意会“忽略”，然而，近日发生在贵州贵阳的一起“公交车惨案”，用血的教训再次提醒大家引以为戒！\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E6月17日21时左右，微博网友@我是黑猫你是谁 报料称，在贵阳32路公交车终点站发生一件惨案：两辆公交车把乘客的头夹破了，乘客当场身亡。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp1.pstatp.com\\\\u002Flarge\\\\u002Fa36000c653c29d56232\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;511\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;110\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E这条微博除了用简短文字表述外，下方还附了5张照片。其中一张照片显示，事发后，两辆32路公交车并排停在一块，10余名观围者站在警戒线外驻足观看。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp3.pstatp.com\\\\u002Flarge\\\\u002F9cd0008f557e14ca71e\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;543\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;535\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp1.pstatp.com\\\\u002Flarge\\\\u002F9c800097f0618ea2779\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;543\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;537\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E 网友发布的现场图\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cstrong\\\\u003E男子疑因打瞌睡头伸到窗外被夹\\\\u003C\\\\u002Fstrong\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E记者赶到位于金关村32路公交车终点站时，公交车正常运营，乘客依次排队上下车，没有受到事故影响。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E一位目击者告诉记者，17日中午三四点，一辆32路公交车停在站台入口不远处，后来，另一辆32路公交车进站时，坐在后排的一男子将头伸出了窗外，就在两车并排时，男子的头被两车车身给夹住。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp9.pstatp.com\\\\u002Flarge\\\\u002F9c50009822c33b729f8\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;544\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;548\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E另一位妇女告诉记者，事发后，她赶紧过去看到公交车的车窗玻璃也碎了。“后来，我听和坐在这名男子旁边的一位女乘客说，在乘车过程中，这名男子一直在打瞌睡，到了终点站后，大家都下车了，就他没有下车，很有可能是这名男子睡着了，头伸出了窗外才发生的意外。”\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E有市民表示，就算是男子自己把头伸出窗外，在公交车进站且两车并排时，如果驾驶员能够多往后视镜看一眼，也许悲剧就能避免。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E记者在32路公交车终点站看到，入口处大约有10多米宽，如果是一辆公交车进站，空间还算大，但如果同时两车并排进站的话，空间就显得很狭小。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cstrong\\\\u003E事情属实，原因正在调查中\\\\u003C\\\\u002Fstrong\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E在32路公交车终点站办公室里，工作人员告诉记者说，乘客被两辆公交车车身夹破头身亡的事故属实，不过，对于具体原因他们并不清楚，当事驾驶员、分管领导目前都在交警队接受调查。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E附近的村民告诉记者，这名乘客40岁左右，毕节人，在金关村附近租房居住。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E目前，事故具体原因警方正在调查中。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cstrong\\\\u003E多知道点儿\\\\u003C\\\\u002Fstrong\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E交警说，在汽车行驶的过程中，把身体的某个部位置于车外无异于自杀。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp3.pstatp.com\\\\u002Flarge\\\\u002F9c50009822e1ceb37bb\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;383\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;232\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E这样的事故常有发生，而且一般都是大事故！汽车行驶中，请注意四件事：\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cblockquote\\\\u003E\\\\u003Cul\\\\u003E\\\\u003Cli\\\\u003E\\\\u003Cp\\\\u003E手勿伸出窗外；\\\\u003C\\\\u002Fp\\\\u003E\\\\u003C\\\\u002Fli\\\\u003E\\\\u003Cli\\\\u003E\\\\u003Cp\\\\u003E脚勿搭在车窗上；\\\\u003C\\\\u002Fp\\\\u003E\\\\u003C\\\\u002Fli\\\\u003E\\\\u003Cli\\\\u003E\\\\u003Cp\\\\u003E别让你的宠物把头伸出窗外；\\\\u003C\\\\u002Fp\\\\u003E\\\\u003C\\\\u002Fli\\\\u003E\\\\u003Cli\\\\u003E\\\\u003Cp\\\\u003E看好孩子\\\\u003C\\\\u002Fp\\\\u003E\\\\u003C\\\\u002Fli\\\\u003E\\\\u003C\\\\u002Ful\\\\u003E\\\\u003C\\\\u002Fblockquote\\\\u003E\\\\u003Cp\\\\u003E2014年6月30日，无锡一女子在驾驶车辆时不慎侧翻，由于开车时把手伸出车外，结果酿成悲剧，一只手当场折断，血肉模糊。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp3.pstatp.com\\\\u002Flarge\\\\u002F9c800097f084217a4d0\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;395\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;436\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E温州一位乘客晚上喝完酒之后乘坐出租车回家，途中把头伸出窗外呕吐，之后用纸巾擦嘴时，旁边一辆车子超上来，刮到其手臂，所幸伤势并不严重。\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E还有——\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E\\\\u003Cimg src&amp;#x3D;\\\\&amp;quot;http:\\\\u002F\\\\u002Fp1.pstatp.com\\\\u002Flarge\\\\u002F9c900096e9fd2eac174\\\\&amp;quot; img_width&amp;#x3D;\\\\&amp;quot;440\\\\&amp;quot; img_height&amp;#x3D;\\\\&amp;quot;2967\\\\&amp;quot; alt&amp;#x3D;\\\\&amp;quot;提醒血的教训！乘公交做这个动作，相当于自杀\\\\&amp;quot; inline&amp;#x3D;\\\\&amp;quot;0\\\\&amp;quot;\\\\u003E\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E看完这些，你还敢将身体伸出车外么？\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E来源丨齐鲁晚报（ID：qiluwanbao002）、羊城晚报（ID：wanbaoweixin）、贵州都市报、新浪微博、平安北京、寿光公安、网络\\\\u003C\\\\u002Fp\\\\u003E\\\\u003Cp\\\\u003E版权归原作者所有\\\\u003C\\\\u002Fp\\\\u003E&amp;quot;'] 2、先把Unicode的编码转换：这个我刚看到以为很多，直接把这个方法放弃了，后来其他方法找了好久，也没有弄出来，最后又来找这个一个一个替换的方法，发现也就7个，尴尬。。。 1encode_json = &#123;2 '\\\\u003C': '&lt;',3 '\\\\u003E': '&gt;',4 '\\\\u002F': '/',5 '&amp;#x3D;\\\\':'=',6 '&amp;quot;':'',7 '\\\\':'',8 '\\/':'/'9 &#125;10print('encode_json',encode_json)11for key in encode_json.keys():12 title1 = title1.replace(key, encode_json[key])13 content1 = content1.replace(key, encode_json[key]) 替换之后的正确的HTML字符串： 1提醒血的教训！乘公交做这个动作，相当于自杀2&lt;p&gt;坐公交车总会听见一句广播：“请不要把头手伸出窗外”。由于太熟悉，很多人有意无意会“忽略”，然而，近日发生在贵州贵阳的一起“公交车惨案”，用血的教训再次提醒大家引以为戒！&lt;/p&gt;&lt;p&gt;6月17日21时左右，微博网友@我是黑猫你是谁 报料称，在贵阳32路公交车终点站发生一件惨案：两辆公交车把乘客的头夹破了，乘客当场身亡。&lt;/p&gt;&lt;p&gt;&lt;img src=http://p1.pstatp.com/large/a36000c653c29d56232 img_width=511 img_height=110 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt;这条微博除了用简短文字表述外，下方还附了5张照片。其中一张照片显示，事发后，两辆32路公交车并排停在一块，10余名观围者站在警戒线外驻足观看。&lt;/p&gt;&lt;p&gt;&lt;img src=http://p3.pstatp.com/large/9cd0008f557e14ca71e img_width=543 img_height=535 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=http://p1.pstatp.com/large/9c800097f0618ea2779 img_width=543 img_height=537 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt; 网友发布的现场图&lt;/p&gt;&lt;p&gt;&lt;strong&gt;男子疑因打瞌睡头伸到窗外被夹&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;记者赶到位于金关村32路公交车终点站时，公交车正常运营，乘客依次排队上下车，没有受到事故影响。&lt;/p&gt;&lt;p&gt;一位目击者告诉记者，17日中午三四点，一辆32路公交车停在站台入口不远处，后来，另一辆32路公交车进站时，坐在后排的一男子将头伸出了窗外，就在两车并排时，男子的头被两车车身给夹住。&lt;/p&gt;&lt;p&gt;&lt;img src=http://p9.pstatp.com/large/9c50009822c33b729f8 img_width=544 img_height=548 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt;另一位妇女告诉记者，事发后，她赶紧过去看到公交车的车窗玻璃也碎了。“后来，我听和坐在这名男子旁边的一位女乘客说，在乘车过程中，这名男子一直在打瞌睡，到了终点站后，大家都下车了，就他没有下车，很有可能是这名男子睡着了，头伸出了窗外才发生的意外。”&lt;/p&gt;&lt;p&gt;有市民表示，就算是男子自己把头伸出窗外，在公交车进站且两车并排时，如果驾驶员能够多往后视镜看一眼，也许悲剧就能避免。&lt;/p&gt;&lt;p&gt;记者在32路公交车终点站看到，入口处大约有10多米宽，如果是一辆公交车进站，空间还算大，但如果同时两车并排进站的话，空间就显得很狭小。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;事情属实，原因正在调查中&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在32路公交车终点站办公室里，工作人员告诉记者说，乘客被两辆公交车车身夹破头身亡的事故属实，不过，对于具体原因他们并不清楚，当事驾驶员、分管领导目前都在交警队接受调查。&lt;/p&gt;&lt;p&gt;附近的村民告诉记者，这名乘客40岁左右，毕节人，在金关村附近租房居住。&lt;/p&gt;&lt;p&gt;目前，事故具体原因警方正在调查中。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多知道点儿&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;交警说，在汽车行驶的过程中，把身体的某个部位置于车外无异于自杀。&lt;/p&gt;&lt;p&gt;&lt;img src=http://p3.pstatp.com/large/9c50009822e1ceb37bb img_width=383 img_height=232 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt;这样的事故常有发生，而且一般都是大事故！汽车行驶中，请注意四件事：&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;手勿伸出窗外；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;脚勿搭在车窗上；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;别让你的宠物把头伸出窗外；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;看好孩子&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;2014年6月30日，无锡一女子在驾驶车辆时不慎侧翻，由于开车时把手伸出车外，结果酿成悲剧，一只手当场折断，血肉模糊。&lt;/p&gt;&lt;p&gt;&lt;img src=http://p3.pstatp.com/large/9c800097f084217a4d0 img_width=395 img_height=436 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt;温州一位乘客晚上喝完酒之后乘坐出租车回家，途中把头伸出窗外呕吐，之后用纸巾擦嘴时，旁边一辆车子超上来，刮到其手臂，所幸伤势并不严重。&lt;/p&gt;&lt;p&gt;还有——&lt;/p&gt;&lt;p&gt;&lt;img src=http://p1.pstatp.com/large/9c900096e9fd2eac174 img_width=440 img_height=2967 alt=提醒血的教训！乘公交做这个动作，相当于自杀 inline=0&gt;&lt;/p&gt;&lt;p&gt;看完这些，你还敢将身体伸出车外么？&lt;/p&gt;&lt;p&gt;来源丨齐鲁晚报（ID：qiluwanbao002）、羊城晚报（ID：wanbaoweixin）、贵州都市报、新浪微博、平安北京、寿光公安、网络&lt;/p&gt;&lt;p&gt;版权归原作者所有&lt;/p&gt; 3、使用lxml模块或者bs4提取需要的数据：我这里提取标题，文本，和文本中的图片地址： 1title_html = etree.HTML(title1)2title_str = ''.join(title_html.xpath('//text()'))3print('title_str',title_str)4content1_html = etree.HTML(content1)5# content_str = content1_html.xpath('//text()')6content_str = ''.join(content1_html.xpath('//text()'))7print('content_str',content_str)89img_list = content1_html.xpath('//img/@src')10print('img_list',img_list) 4、最后提出的结果就是我需要的数据：1title_str 提醒血的教训！乘公交做这个动作，相当于自杀2content_str 坐公交车总会听见一句广播：“请不要把头手伸出窗外”。由于太熟悉，很多人有意无意会“忽略”，然而，近日发生在贵州贵阳的一起“公交车惨案”，用血的教训再次提醒大家引以为戒！6月17日21时左右，微博网友@我是黑猫你是谁 报料称，在贵阳32路公交车终点站发生一件惨案：两辆公交车把乘客的头夹破了，乘客当场身亡。这条微博除了用简短文字表述外，下方还附了5张照片。其中一张照片显示，事发后，两辆32路公交车并排停在一块，10余名观围者站在警戒线外驻足观看。 网友发布的现场图男子疑因打瞌睡头伸到窗外被夹记者赶到位于金关村32路公交车终点站时，公交车正常运营，乘客依次排队上下车，没有受到事故影响。一位目击者告诉记者，17日中午三四点，一辆32路公交车停在站台入口不远处，后来，另一辆32路公交车进站时，坐在后排的一男子将头伸出了窗外，就在两车并排时，男子的头被两车车身给夹住。另一位妇女告诉记者，事发后，她赶紧过去看到公交车的车窗玻璃也碎了。“后来，我听和坐在这名男子旁边的一位女乘客说，在乘车过程中，这名男子一直在打瞌睡，到了终点站后，大家都下车了，就他没有下车，很有可能是这名男子睡着了，头伸出了窗外才发生的意外。”有市民表示，就算是男子自己把头伸出窗外，在公交车进站且两车并排时，如果驾驶员能够多往后视镜看一眼，也许悲剧就能避免。记者在32路公交车终点站看到，入口处大约有10多米宽，如果是一辆公交车进站，空间还算大，但如果同时两车并排进站的话，空间就显得很狭小。事情属实，原因正在调查中在32路公交车终点站办公室里，工作人员告诉记者说，乘客被两辆公交车车身夹破头身亡的事故属实，不过，对于具体原因他们并不清楚，当事驾驶员、分管领导目前都在交警队接受调查。附近的村民告诉记者，这名乘客40岁左右，毕节人，在金关村附近租房居住。目前，事故具体原因警方正在调查中。多知道点儿交警说，在汽车行驶的过程中，把身体的某个部位置于车外无异于自杀。这样的事故常有发生，而且一般都是大事故！汽车行驶中，请注意四件事：手勿伸出窗外；脚勿搭在车窗上；别让你的宠物把头伸出窗外；看好孩子2014年6月30日，无锡一女子在驾驶车辆时不慎侧翻，由于开车时把手伸出车外，结果酿成悲剧，一只手当场折断，血肉模糊。温州一位乘客晚上喝完酒之后乘坐出租车回家，途中把头伸出窗外呕吐，之后用纸巾擦嘴时，旁边一辆车子超上来，刮到其手臂，所幸伤势并不严重。还有——看完这些，你还敢将身体伸出车外么？来源丨齐鲁晚报（ID：qiluwanbao002）、羊城晚报（ID：wanbaoweixin）、贵州都市报、新浪微博、平安北京、寿光公安、网络版权归原作者所有3img_list ['http://p1.pstatp.com/large/a36000c653c29d56232', 'http://p3.pstatp.com/large/9cd0008f557e14ca71e', 'http://p1.pstatp.com/large/9c800097f0618ea2779', 'http://p9.pstatp.com/large/9c50009822c33b729f8', 'http://p3.pstatp.com/large/9c50009822e1ceb37bb', 'http://p3.pstatp.com/large/9c800097f084217a4d0', 'http://p1.pstatp.com/large/9c900096e9fd2eac174'] 三、总结：这个问题其他如果当初我就用笨方法，一个一个替换，其实也不会弄了这么久，但是找的过程我也复习了下正则，还学习了一个正则匹配所有的中文汉字和中文标点符号的，但是由于本文的后来发现是个HTML，含有我需要的图片地址，所以还不能直接全部只提取中文，而且里面文字中还有英文数字，所以发现正则行不通，python中也没有找的好的方法。 其中中间找的一个可以把所以Unicode的字符串全部匹配正确，因为是字符串，可以使用： 1ret.encode('utf-8').decode('unicode_escape') 得到的结果：从结果来看，如果全部是Unicode的编码字符串，可以使用上面的一句话解决问题，，下面的结果中，第一行是人家的中文字符+Unicode+英文字符，下面是转换之后的结果，Unicode编码的都解码成功，但是中文的字符（汉字和中文标点符号）都是乱码。 在这里插入图片描述 至此，我的笨方法解决过程就这么多了，如果有简单方法的大佬，还望不吝赐教哈，谢谢。","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"selenium报错之---Message_ session not created_ Chrome version must be between 71 and 75","slug":"4a473d39e271debadf157952092027ca","date":"2019-11-17T03:34:32.000Z","updated":"2019-12-02T06:45:48.931Z","comments":true,"path":"2019/11/17/4a473d39e271debadf157952092027ca/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/17/4a473d39e271debadf157952092027ca/","excerpt":"","text":"1、问题说明由于好久没有在家里电脑测试selenium了，今天用来测试一个程序，调用谷歌的。但是发现确报了一个错误： 1selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome version must be between 71 and 75 在这里插入图片描述 2、解决问题的步骤：突然想到谷歌就是我的电脑安装的谷歌浏览器更新版本的原因，然后就看下是否是我的谷歌版本和之前的Chromedriver版本对不上的原因。 1、看下我的谷歌版本依次：谷歌浏览器右上角三个点，进入点击设置，然后：也可以直接打开：chrome://settings/help 在这里插入图片描述 这个时候知道了，就是我的版本升级和之前的不符合了。所以这个时候，就需要找到当前浏览器符合的Chromedriver版本安装即可。 2、下载当前谷歌浏览器版本最新的Chromedriver：https://sites.google.com/a/chromium.org/chromedriver/home 进入下载页面： 在这里插入图片描述 正好我的当前谷歌浏览器是78，那我就选择78的进行下载即可。 在这里插入图片描述 下载对象平台的版本。我这里下载Windows系统的。 3、加压放到固定不动的位置，然后把之前的删了，并且添加到环境变量中我这里直接放到安装python的各种软件目录中，并且把之前的删除。我的放到目录： 1‪D:\\python_study_tools\\chromedriver.exe 然后添加到环境变量中： 在这里插入图片描述 4、如果此时显示报错，估计需要重启电脑，我这里直接指定位置吧：如果报这个错，估计就是环境变量还没有起作用： 1selenium.common.exceptions.WebDriverException: Message: &#39;chromedriver&#39; executable needs to be in PATH. Please see https:&#x2F;&#x2F;sites.google.com&#x2F;a&#x2F;chromium.org&#x2F;chromedriver&#x2F;home 直接自己指定chromedriver.exe的路径，这个时候问题解决了。 1executable_path&#x3D;r&quot;D:\\python_study_tools\\chromedriver.exe&quot;2browser &#x3D; webdriver.Chrome(executable_path&#x3D;executable_path)","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"},{"name":"问题解决","slug":"selenium/问题解决","permalink":"https://zhaojiafu.github.io/categories/selenium/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"},{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python 谷歌翻译模块和js解密的一次学习记录","slug":"809d4484b76751fdccdd3cbece11edda","date":"2019-11-14T03:34:32.000Z","updated":"2019-12-02T06:45:49.434Z","comments":true,"path":"2019/11/14/809d4484b76751fdccdd3cbece11edda/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/14/809d4484b76751fdccdd3cbece11edda/","excerpt":"","text":"一、说明：本文是基于谷歌翻译的一次爬虫学习，开始是基于模块的学习使用，然后自己尝试了js逆向的使用。 二、 googletrans模块的学习使用：模块官网： 1、安装：1pip install googletrans 2、简单使用：1、基本翻译的用法（也是常用的用法）：这个区别什么的我放到代码中解释了，一看就懂了，我就不过多解释了。 1from googletrans import Translator2translator = Translator()3# 1、不定位输入语言，不指定输出语言（会自动默认输出为英文，然后翻译成英文）4result1 = translator.translate('你好，我是中国人')5print(\"result1\",result1)6print(\"result1\",result1.text)7# 2、不定位输入语言，指定输出语言8result2 = translator.translate('你好，我是中国人', dest='en')9print(\"result2\",result2)10print(\"result2\",result2.text)1112# 3、指定输入语言，不指定输出（默认输出为英语）13# result3 = translator.translate('你好，我是中国人', src='la')14result3 = translator.translate('veritas lux mea', src='la')15print(\"result3\", result3)16print(\"result3\", result3.text) 在这里插入图片描述 2、检测文本语言：这个我感觉不错，比如，刚开始我使用时我就不知道如果使用英文翻译成中文，然后就使用检测出来的。 1from googletrans import Translator2translator = Translator()3print(translator.detect('일요일'))4print(translator.detect('你好'))56# Detected(lang=ko, confidence=1.0)7# Detected(lang=zh-CN, confidence=1.0) 这个结果正好把中文给我返回处来。也知道英文如何翻译成中文了。 然后我看下源码，也知道为什么不写输出语言，给我返回英文了。其实人家都写好了，不知道就按英文来翻译。 在这里插入图片描述 3、英文翻译成中文（其他语言类似）：(其他语言类似，先随意输入目标语言，检测出谷歌翻译参数dest的固定字符串，然后更改目标语言dest即可) 1from googletrans import Translator2translator = Translator()3text = 'You can use another google translate domain for translation. If multiple URLs are provided it then randomly chooses a domain.'4print(translator.translate(text, dest='zh-CN').text) 翻译结果： 在这里插入图片描述 4、多个句子翻译：1from googletrans import Translator23translator = Translator()45# 这个是官方的方法，可以一次性翻译好几个，但是实际中，如果句子比较长，我还是建议下面循环翻译6translations = translator.translate(['The quick brown fox', 'jumps over', 'the lazy dog'], dest='zh-CN')7for translation in translations:8 print(translation.origin, ' -&gt; ', translation.text)910print(\"*\" * 100)11# 我建议寻找一个一个翻译比较好，这样如果我要翻译的有很多条，每个也比较长，这种效率快一点。12text_list = ['The quick brown fox', 'jumps over', 'the lazy dog']13for text in text_list:14 translation = translator.translate(text,dest='zh-CN')15 print(translation.origin,\"--&gt;&gt;\",translation.text) 翻译结果： 在这里插入图片描述 三、JS解密翻译：这个我是先参考了一个博客，然后又自己动手找到一个加密位置，但是我也有个好奇，我找到的和人家的不一样，最后的tk不一样，结果竟然获取的结果都可以使用，不知道什么原因，如果有大佬看到，欢迎给我讲讲哈。 1、参考博主解密的：js直接复制参考博主的，简单翻译一下。 1import json2from urllib import parse34import execjs5import requests678def get_tk(text):9 ctx = execjs.compile(\"\"\" 10 function TL(a) &#123; 11 var k = \"\"; 12 var b = 406644; 13 var b1 = 3293161072; 14 var jd = \".\"; 15 var $b = \"+-a^+6\"; 16 var Zb = \"+-3^+b+-f\"; 17 for (var e = [], f = 0, g = 0; g &lt; a.length; g++) &#123; 18 var m = a.charCodeAt(g); 19 128 &gt; m ? e[f++] = m : (2048 &gt; m ? e[f++] = m &gt;&gt; 6 | 192 : (55296 == (m &amp; 64512) &amp;&amp; g + 1 &lt; a.length &amp;&amp; 56320 == (a.charCodeAt(g + 1) &amp; 64512) ? (m = 65536 + ((m &amp; 1023) &lt;&lt; 10) + (a.charCodeAt(++g) &amp; 1023), 20 e[f++] = m &gt;&gt; 18 | 240, 21 e[f++] = m &gt;&gt; 12 &amp; 63 | 128) : e[f++] = m &gt;&gt; 12 | 224, 22 e[f++] = m &gt;&gt; 6 &amp; 63 | 128), 23 e[f++] = m &amp; 63 | 128) 24 &#125; 25 a = b; 26 for (f = 0; f &lt; e.length; f++) a += e[f], 27 a = RL(a, $b); 28 a = RL(a, Zb); 29 a ^= b1 || 0; 30 0 &gt; a &amp;&amp; (a = (a &amp; 2147483647) + 2147483648); 31 a %= 1E6; 32 return a.toString() + jd + (a ^ b) 33 &#125;; 34 function RL(a, b) &#123; 35 var t = \"a\"; 36 var Yb = \"+\"; 37 for (var c = 0; c &lt; b.length - 2; c += 3) &#123; 38 var d = b.charAt(c + 2), 39 d = d &gt;= t ? d.charCodeAt(0) - 87 : Number(d), 40 d = b.charAt(c + 1) == Yb ? a &gt;&gt;&gt; d: a &lt;&lt; d; 41 a = b.charAt(c) == Yb ? a + d &amp; 4294967295 : a ^ d 42 &#125; 43 return a 44 &#125; 45 \"\"\")4647 # text = '北京欢乐谷是国家AAAA级旅游景区、新北京十六景、北京文化创意产业基地'48 tk = ctx.call(\"TL\", text)49 return tk505152def get_translate(text):53 tk = get_tk(text)54 url = 'https://translate.google.com/translate_a/single?client=webapp&amp;sl=auto&amp;tl=en&amp;hl=zh-TW&amp;dt=at&amp;dt=bd&amp;dt=ex&amp;dt=ld&amp;dt=md&amp;dt=qca&amp;dt=rw&amp;dt=rm&amp;dt=ss&amp;dt=t&amp;dt=gt&amp;ssel=3&amp;tsel=3&amp;kc=0&amp;'55 headers = &#123;56 \"cookie\": '1P_JAR=2019-11-13-9;_gid=GA1.3.73678266.1573636802;_ga=GA1.3.640150160.1573636802;NID=191=ItRAUI4OCeQtUgD3QoKbIxx0ny7FA29sz5mf86s9OWsierCx8kk1aIBAGSpKZ_Rn3QxzPseewMmG1b97DL6fFA_JCjsZxMrMAhLjv3EHyRvIkd0Y5ah0tkfAMvxyhSNX6VNZncmReWyjxdk4cbJQR57c4MDlNOs0lTraa-Ten1s',57 \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36\",58 &#125;59 params = &#123;60 \"tk\": tk,61 \"q\": text62 &#125;63 url_encode_params = parse.urlencode(params)64 url_params = url + url_encode_params65 # print('url_params', url_params)66 resp2 = requests.get(url_params, headers=headers)67 # print('resp2', resp2.status_code, resp2.text)68 data = json.loads(resp2.text)69 translate_en_text = data[0][0][0]70 print(\"tk1\",tk)71 print(\"translate_en_text\", translate_en_text)72 return translate_en_text737475if __name__ == '__main__':76 text = '前面介绍了有道翻译接口 破解，接下来试一试谷歌翻译（Github项目地址）同样，查看首页元素'77 translate_en_text = get_translate(text) 翻译结果： 在这里插入图片描述 2、自己扣得js解密：1import json2from urllib import parse34import execjs5import requests678def get_tk(text):9 ctx = execjs.compile(\"\"\" 1011var vo = function(a) &#123;12 return function() &#123;13 return a14 &#125;15&#125;16var xo = \"437117.4102146620\"17var wo = function(a, b) &#123;18 for (var c = 0; c &lt; b.length - 2; c += 3) &#123;19 var d = b.charAt(c + 2);20 d = \"a\" &lt;= d ? d.charCodeAt(0) - 87 : Number(d);21 d = \"+\" == b.charAt(c + 1) ? a &gt;&gt;&gt; d : a &lt;&lt; d;22 a = \"+\" == b.charAt(c) ? a + d &amp; 4294967295 : a ^ d23 &#125;24 return a25&#125;262728function get_tk(a) &#123;29 if (null !== xo)30 var b = xo;31 else &#123;32 b = vo(String.fromCharCode(84));33 var c = vo(String.fromCharCode(75));34 b = [b(), b()];35 b[1] = c();36 b = (xo = window[b.join(c())] || \"\") || \"\"37 &#125;38 var d = vo(String.fromCharCode(116));39 c = vo(String.fromCharCode(107));40 d = [d(), d()];41 d[1] = c();42 c = \"&amp;\" + d.join(\"\") + \"=\";43 d = b.split(\".\");44 b = Number(d[0]) || 0;45 for (var e = [], f = 0, g = 0; g &lt; a.length; g++) &#123;46 var k = a.charCodeAt(g);47 128 &gt; k ? e[f++] = k : (2048 &gt; k ? e[f++] = k &gt;&gt; 6 | 192 : (55296 == (k &amp; 64512) &amp;&amp; g + 1 &lt; a.length &amp;&amp; 56320 == (a.charCodeAt(g + 1) &amp; 64512) ? (k = 65536 + ((k &amp; 1023) &lt;&lt; 10) + (a.charCodeAt(++g) &amp; 1023),48 e[f++] = k &gt;&gt; 18 | 240,49 e[f++] = k &gt;&gt; 12 &amp; 63 | 128) : e[f++] = k &gt;&gt; 12 | 224,50 e[f++] = k &gt;&gt; 6 &amp; 63 | 128),51 e[f++] = k &amp; 63 | 128)52 &#125;53 a = b;54 for (f = 0; f &lt; e.length; f++)55 a += e[f],56 a = wo(a, \"+-a^+6\");57 a = wo(a, \"+-3^+b+-f\");58 a ^= Number(d[1]) || 0;59 0 &gt; a &amp;&amp; (a = (a &amp; 2147483647) + 2147483648);60 a %= 1E6;61 return (a.toString() + \".\" + (a ^ b))62&#125;63 \"\"\")64 # text = '北京欢乐谷是国家AAAA级旅游景区、新北京十六景、北京文化创意产业基地'65 tk = ctx.call(\"get_tk\", text)66 return tk676869def get_translate(text):70 tk = get_tk(text)71 url = 'https://translate.google.com/translate_a/single?client=webapp&amp;sl=auto&amp;tl=en&amp;hl=zh-TW&amp;dt=at&amp;dt=bd&amp;dt=ex&amp;dt=ld&amp;dt=md&amp;dt=qca&amp;dt=rw&amp;dt=rm&amp;dt=ss&amp;dt=t&amp;dt=gt&amp;ssel=3&amp;tsel=3&amp;kc=0&amp;'72 headers = &#123;73 \"cookie\": \"HSID=A9q8G-FPNx6QwfqlY; SSID=AyWKCt0aKhDNPLqW6; APISID=52CYB7USRLRyBkFl/AhucACQCyF5bkzMIM; SAPISID=7sAQYqTKCyubismp/A6GCzfKGnLisIiTpM; CONSENT=YES+US.zh-CN+; SID=pwdbenXUSnGz056YdylCL-ZDrCLJaIvqrUBKGvbe-HJ3s48yPBi9Mk7RYGFZ_o-kZZQ8Rg.; SEARCH_SAMESITE=CgQIoI4B; NID=191=WdhY3hdbpEdpGhDLxFUrnkFmgSrStymg9kBM-9FHyoaLOVIqx9Z7KtAtA_dtCNJj4d8xyJ_9WlkJ0sCFlzavlyYl-tUoIy4hdz2E5j6p3Nbc1uoyEOb_9AmNmdHMngO-yPxj5Mxb8ervFTzp4drfWUogmwuY3HAGldxDJYBlvzoHJb8Rzr4OtPhbP0TGO_mmh9UChE5WPSHLfX-3KUwUb5pm1tixJYNMec-WULuOaLUIQD0EPnnbRY9CXhEfLA; 1P_JAR=2019-11-13-5; _ga=GA1.3.658002031.1573624431; _gid=GA1.3.1337733321.1573624431; SIDCC=AN0-TYvUIyqWcavZaG_swbs9zSM1oMD8nXPSQVzxV5ndURyHBY2CueYI1jCM3Wm7XIaoA-57ag\",74 \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36\",75 &#125;76 params = &#123;77 \"tk\": tk,78 \"q\": text79 &#125;80 url_encode_params = parse.urlencode(params)81 url_params = url + url_encode_params82 # print('url_params', url_params)83 resp2 = requests.get(url_params, headers=headers)84 # print('resp2', resp2.text)85 data = json.loads(resp2.text)86 translate_en_text = data[0][0][0]87 print(\"translate_en_text\", translate_en_text)88 return translate_en_text899091if __name__ == '__main__':92 text = '前面介绍了有道翻译接口 破解，接下来试一试谷歌翻译（Github项目地址）同样，查看首页元素'93 translate_en_text = get_translate(text) 翻译结果： 在这里插入图片描述 3、对比，有个疑惑： 在这里插入图片描述 通过俩个相同的句子，得到的加密的tk不一样，却能获取到结果，不知道为什么，而且我第一次以为每次加密的结果是随机数生成呐，我的和参考博主的，各自的加密tk结果多次运行是一样的，如果有懂的大佬，欢迎给我解解疑惑，指点一下哈。 参考js解密博主：https://www.jianshu.com/p/95cf6e73d6ee","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhaojiafu.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"JS反反爬","slug":"JS反反爬","permalink":"https://zhaojiafu.github.io/tags/JS%E5%8F%8D%E5%8F%8D%E7%88%AC/"},{"name":"谷歌翻译","slug":"谷歌翻译","permalink":"https://zhaojiafu.github.io/tags/%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/"}]},{"title":"python汉字转成拼音、英文的一个学习随笔","slug":"f88a557f964ad60ccd4fb832b87c7361","date":"2019-11-05T03:34:32.000Z","updated":"2019-12-02T07:26:18.401Z","comments":true,"path":"2019/11/05/f88a557f964ad60ccd4fb832b87c7361/","link":"","permalink":"https://zhaojiafu.github.io/2019/11/05/f88a557f964ad60ccd4fb832b87c7361/","excerpt":"","text":"@[toc] 一、说明:这个是我发现一个python好用的一个模块，名字就是pinyin：主要功能就是基于普通话将汉字翻译成拼音。 模块地址： 安装命令： 1pip install pinyin 二、简单使用：解释我放在代码里面了，看看就懂了，不过多解释了。 1、汉字转拼音：1import pinyin23# 1、可以获取拼音和音调4# print(pinyin.get('你 好'))5print(pinyin.get('我爱你'))6# 2、只获取拼音词7# print(pinyin.get('你好', format=\"strip\", delimiter=\" \"))8print(pinyin.get('小时候，我害怕黑夜', format=\"strip\", delimiter=\" \"))910# 3、获取拼音，后面跟的是音调（1-4）11# print(pinyin.get('你好', format=\"numerical\"))12print(pinyin.get('我爱你', format=\"numerical\"))1314# 4、获取汉字的拼音首字母15print(pinyin.get_initial('你好')) 运行结果： 在这里插入图片描述 2、汉字转英文（不能转换一个句子，如果是句子会先切分开再进行一个一个翻译，返回列表）1import pinyin.cedict234# 1、这个只能翻译出单个词，不能翻译一个句子或者短语，只能是字或者词5result = pinyin.cedict.translate_word('你')6print(result)7result = pinyin.cedict.translate_word('我爱你')8print(result)9result = pinyin.cedict.translate_word('中国')10print(result)1112# 2、这个是相当于返回一个上面的列表，自动把词分开（不建议翻译一个句子）13print(\"*\"*20)14result = list(pinyin.cedict.all_phrase_translations('你好'))15print(result)16result = list(pinyin.cedict.all_phrase_translations('我爱你'))17print(result)18result = list(pinyin.cedict.all_phrase_translations('我爱你中国'))19print(result) 运行结果： 1['you (informal, as opposed to courteous 您[nin2])']2None3['China']4********************5[['你', ['you (informal, as opposed to courteous 您[nin2])']], ['你好', ['Hello!', 'Hi!', 'How are you?']], ['好', ['to be fond of', 'to have a tendency to', 'to be prone to']]]6[['我', ['I', 'me', 'my']], ['爱', ['to love', 'to be fond of', 'to like', 'affection', 'to be inclined (to do sth)', 'to tend to (happen)']], ['你', ['you (informal, as opposed to courteous 您[nin2])']]]7[['我', ['I', 'me', 'my']], ['爱', ['to love', 'to be fond of', 'to like', 'affection', 'to be inclined (to do sth)', 'to tend to (happen)']], ['你', ['you (informal, as opposed to courteous 您[nin2])']], ['中', ['to hit (the mark)', 'to be hit by', 'to suffer', 'to win (a prize, a lottery)']], ['中国', ['China']], ['国', ['country', 'nation', 'state', 'national', 'CL:個|个[ge4]']]]","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"杭州垃圾分类简图：","slug":"e1e1342c2e41ec2aa23721fee073deff","date":"2019-10-29T03:34:32.000Z","updated":"2019-12-02T07:26:18.449Z","comments":true,"path":"2019/10/29/e1e1342c2e41ec2aa23721fee073deff/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/29/e1e1342c2e41ec2aa23721fee073deff/","excerpt":"","text":"# 说明：最近小区开始实行杭州垃圾分类了，说实话刚开始有点小抵触，还要多买几个垃圾桶，每次丢垃圾还得用小程序搜索，别丢错了，但是我看到一个新闻说，国家之前的垃圾都是填埋，没有分类，导致现在垃圾每个城市都是堆积如山，而且对环境污染严重，而且我感触最深的是我的老家，我老家那边，小时候我记得我家的水井，我爸爸告诉我只有十来米深，那个时候还是压水井，不是现在的水泵，那个时候十米的水井就很甜，水也很清澈，现在家里的水井都打到50米了，水还是很混，我家都是俩个水桶，提前静，让水清澈一些，然后再用来做饭，或者用新抽到的水用来刷碗什么的。吃的都要提前静置一桶水。 所以看了污染环境的新闻之后我要做一个好市民，虽然没有能力改变别人，那就改变自己开始，说不定以后影响室友，影响朋友。。。总之，我相信都会一点一点改变的，让这个世界变得更美，天空更蓝。 所以我就上网找了几个垃圾分类的知识点，然后整合到两页的PDF里面，我打印了几分，晚上回家贴到厨房，给室友一份，做一个好市民，需要的自己浏览器转存pdf，或者下载我上传的，记得看到之后你也做一个垃圾分类的好市民，Thanks♪(･ω･)ﾉ。嘻嘻(#^.^#) 新《条例》三大变化 变化1 ：餐厨垃圾改名易腐垃圾 新《条例》中，杭州市生活垃圾分为四类，分别是：可回收物、有害垃圾、易腐垃圾和其他垃圾。 这样的“四分法”，和以前一样，最直观的变化，是以前的“餐厨垃圾”改名为“易腐垃圾”。曹勐琦强调，虽然名字改了，但分类方式还是一样。 还有一个大家比较容易搞错的，就是“其他垃圾”桶的颜色。目前，在杭州市内，其他垃圾投入黄桶或灰桶都可以。但根据国家、省最新垃圾分类标准编制情况，“其他垃圾”桶将确定为灰色，现在杭州市“其他垃圾”桶所用黄色将在2020年底前逐步更新。 变化2：大件垃圾投放调整 大件垃圾，一般是以废旧垃圾为主，这也是城市难题。这次新《条例》也特别对大件垃圾的处置做了调整。 按照原来的《条例》，对家具等体积大、整体性强，或者需要拆分再处理的大件垃圾，需要预约再生资源回收站点上门进行有偿处理。新《条例》规定，大件垃圾今后将实行定时定点收集、运输。收集、运输的时间和地点由市容环境卫生主管部门确定并公告。 曹勐琦解释，今后对于有条件的小区，可以在小区内设置专门的大件垃圾投放点，居民把垃圾统一放在这个区域内，集中定点清运；对于没有条件设置的小区，就实施定时清运，居民只有在固定时间才能投扔大件垃圾。 变化3：处罚力度加大了1.乱丢垃圾、错丢垃圾，新《条例》规定，个人处以“200元以内罚款”，单位将处以“500元以上5000元以下罚款”。2.管理不力，主要针对物业、居委会等垃圾分类投放管理责任人的处罚，新《条例》提高到了500元以上5000元以下，情节严重的，处以5000元以上30000元以下罚款。3.垃圾混装，对生活垃圾收集、运输单位处以5000元以上30000元以下罚款，情节严重的处以30000元以上100000元以下的罚款。","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"python 内置模块zip和enumerate的几个巧用学习随笔","slug":"3d778504e9fad7a68bfa6c010644ab0b","date":"2019-10-28T03:34:32.000Z","updated":"2019-12-02T06:45:49.148Z","comments":true,"path":"2019/10/28/3d778504e9fad7a68bfa6c010644ab0b/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/28/3d778504e9fad7a68bfa6c010644ab0b/","excerpt":"","text":"一、zip的简单介绍：zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。 我们可以使用 list() 转换来输出列表。 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。 二、简单使用场景介绍：这个内置模块我还是看到一个别人写的博客中用到这个模块，然后不太明白，就搜了下简单使用，不过感觉还不错，对于爬虫提取数据的时候，确实有用，下面我举几个我以后工作中会用到的小例子： 1、循环一个列表（获取对应的下表和值）：如果是之前，我会使用循环的时候，然后使用一个变量num作为一个递增当作下标。 1# 1、获取对应的列表2# 我之前的用法3list_demo1 = ['https://mp.csdn.net/mdeditor/102776886'+ str(i) for i in range(100000)]4start_time = time.time()5num = 06for i in list_demo1:78 print(num,i)9 num += 110end_time = time.time()11print(end_time-start_time)12# 0.4557325839996338 使用zip，因为使用的range循环模拟真实场景，所以次数要多一点，不然时间间隔看不出来效果，效率差不多，不过我感觉zip返回的是个压缩，如果过大，我感觉直接遍历就行，不用使用list转化了。 1# 我使用zip的用法2list_demo1 = ['https://mp.csdn.net/mdeditor/102776886' + str(i) for i in range(100000)]3start_time = time.time()4index_list = (i for i in range(len(list_demo1)))5for num, i in zip(index_list, list_demo1):6 print(num, i)7end_time = time.time()8print(end_time - start_time)9# 0.42674970626831055 如果想要一个列表list,里面是元组，也可以使用enumerate内置模块，自动配置下标，就是比zip上面的方法稍微满一点，不过这个如果只是需要下标，这个内存最简单。 1# # 我使用zip的用法2list_demo1 = ['https://mp.csdn.net/mdeditor/102776886' + str(i) for i in range(100000)]3start_time = time.time()45result = enumerate(list_demo1)6for i in result:7 print(i)8end_time = time.time()9print(end_time - start_time)10# 0.627619743347168 2、循环俩个列表（这种我代码中用的比较多）：需求：俩个list，需要对应的下标位置的元素，需要拼接成一个元素，比如以爬取的一次IP和端口号为例吧： 1re_ip_address = ['115.231.5.230', '114.239.147.135', '123.163.97.18', '223.243.255.167', '121.232.148.178',2 '121.233.109.15', '114.239.250.93', '58.23.230.24', '220.168.52.245', '183.166.102.92',3 '219.159.38.209', '47.100.21.174', '163.204.245.172', '118.180.166.195', '182.35.86.221']4re_port = ['44524', '9999', '9999', '65309', '9000', '9999', '9999', '8118', '39107', '9999', '56210', '8021', '9999',5 '8060', '9999']67for ip, port in zip(re_ip_address, re_port):8 print(ip + ':' + port) 打印的就是这种的。这种方法很方便，不然循环提取一个html中的a标签的text和href，之前我都是提取a标签，比如，现在就可以使用xpath提取一个a标签的list和href的list，然后使用这个，我感觉效率肯定比之前一个一个遍历再提取快的多。如果这种有时候一个项目提取次数要达到几百万甚至上千万，效率和节省的时间就体现出来了。 在这里插入图片描述 下面写下我之前用的方法： 1# 用下标方法，循环俩个list2re_ip_address = ['115.231.5.230', '114.239.147.135', '123.163.97.18', '223.243.255.167', '121.232.148.178',3 '121.233.109.15', '114.239.250.93', '58.23.230.24', '220.168.52.245', '183.166.102.92',4 '219.159.38.209', '47.100.21.174', '163.204.245.172', '118.180.166.195', '182.35.86.221']5re_port = ['44524', '9999', '9999', '65309', '9000', '9999', '9999', '8118', '39107', '9999', '56210', '8021', '9999',6 '8060', '9999']78for i in range(len(re_ip_address)):9 ip = re_ip_address[i]10 port = re_port[i]11 ip_one = ip + \":\" + port12 print('ip_one', ip_one) 3、zip（*）解压这个功能只是把之前的zip压缩的列表，返回成元组tuple类型返回，我自我感觉目前没有什么用，需要我直接tuple换就行了。 1re_ip_address = ['115.231.5.230', '114.239.147.135']2re_port = ['44524', '9999']34result1 = zip(re_ip_address, re_port)5result2 = zip(* result1)6print('result2',result2)7print('result2',list(result2)) 在这里插入图片描述 直接tuple我感觉更简单： 12re_ip_address = ['115.231.5.230', '114.239.147.135']3re_port = ['44524', '9999']4result = [tuple(re_ip_address),tuple(re_port)]5print('result2', result) 在这里插入图片描述","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"python执行系统命令的方法总结","slug":"5b3fe68fa6e71fd2f7fabee9a573f868","date":"2019-10-24T03:34:32.000Z","updated":"2019-12-02T06:45:48.015Z","comments":true,"path":"2019/10/24/5b3fe68fa6e71fd2f7fabee9a573f868/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/24/5b3fe68fa6e71fd2f7fabee9a573f868/","excerpt":"","text":"说明：python 将html保存为PDF之一个学习笔记 今天转存HTML为pdf的时候，然后我使用os.system时候出现问题，后来网上搜索python有三种执行命令，结果我使用os.popen()可以了，后来再使用os.system()，又可以了。后来我参考的哪个博主写的将廖雪峰大牛的博客转存成pdf的代码整合，基本上不能用了，不过也感谢博主，让我知道了大概使用，又多搜索了几篇，有的模块功能方法有些更改了，当然经过一天的整理弄懂了，还用自己的方法代替之前博主的哪个方法，通过整理还弄懂了这个三个执行命令的区别，下面进入正题。 三个python执行系统命令的方法：1、os.system()这个执行命令会执行完成一个才会执行下一个。 直接在里面整理命令就行：比如我的关于pdf整理的这个： 1os.system(r'wkhtmltopdf &#123;&#125; ./pdf3/&#123;&#125;.pdf'.format(article_url, num)) 2、os.popen()1os.popen(r'wkhtmltopdf &#123;&#125; ./pdf2/&#123;&#125;.pdf'.format(article_url, num)) 这个不会等待当前这个完成接着执行，因为我测试执行了大概129个pdf，相当于直接执行了129个命令，我的电脑瞬间卡死了，我也懵了，我看了下cpu直接满了，内存也是持续上升(好奇的同学自己测试哈)。后来等了好十来分钟吧，程序结束好久了，pdf还在下载，我就知道了这个方法的使用了，原来不等待。 在这里插入图片描述 3、subprocess.Popen()1subprocess.Popen(r'wkhtmltopdf &#123;&#125; ./pdf/&#123;&#125;.pdf'.format(article_url, num)) 带着好奇心的我，又来测试这个是否等待结果还是不等待。这个和os.popen() 基本上是一样的。 4、如何让subprocess.Popen()和os.popen()等待三个都测试完了，我的好奇心开始转向如何等待才会完成，然后测试代码将命令赋值给要给变量，获取他的熟悉，如果不弹出属性，我们也可以使用dir(subprocess_one)打印出他的属性，肯定能找到等带的方法，最终找到subprocess.Popen()的等待方法是wait()： 在这里插入图片描述 同理，使用方法测得os.popen()的等待方法是close()，其中这个我是使用打印dir()的，因为第一次弹出close，我以为这个是直接关闭进行下一个，后来测试才发现就是等待结束，然后进行下一个。 在这里插入图片描述 5、总结： os.system()：一次执行一个，不能多个执行，如需要，可以借助多线程，一次执行五个等待，达到执行多个的效果。 os.popen() ：不等待直接执行下一个，如果需要一次执行5个，可以设置一个列表，把变量加进去，然后列表满5个进行循环等待全部结束，再往下一次执行5个。等待方法是close()。 subprocess.Popen()：不等待直接执行下一个，如果需要一次执行5个，可以设置一个列表，把变量加进去，然后列表满5个进行循环等待全部结束，再往下一次执行5个。等待方法是wait()。","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"python执行系统命令","slug":"python执行系统命令","permalink":"https://zhaojiafu.github.io/tags/python%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"}]},{"title":"python 将html保存为PDF之一个学习笔记","slug":"2757a9e77f5dd31576f0a1a895cbe28d","date":"2019-10-24T03:34:32.000Z","updated":"2019-12-02T06:45:49.746Z","comments":true,"path":"2019/10/24/2757a9e77f5dd31576f0a1a895cbe28d/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/24/2757a9e77f5dd31576f0a1a895cbe28d/","excerpt":"","text":"说明：今天突然想把爬取的HTML页面转存成PDF格式，进行一个学习，起源于这个还是很久之前看到一个爬取公众号的文章保留为PDF，但是想着学习自己实现一下哈，结果（懒呀，懒人总是能找到各种借口的，一推就一俩个月过去了，今天突然就想起来了，就来实现一波，结果还真有点麻烦，代码这个还是要自己动手写写，弄好之后做个自己看懂的总结就行（因为这是你以新手的学习出发点学习的，也能帮助别人下你踩得坑），把人家写的案例自己实现或者自己模仿找个其他案例测试测试，或者多找个文章学习学习） 一、环境配置：1、window的wkhtmltopdf下载地址这个不按照会报一个错。我的是window系统，所以需要还需要安装一个exe文件：下载地址1：下载地址2各个平台下载的方法地址 在这里插入图片描述 下载的exe直接安装即可，安装位置建议更改到软件盘。 ==记得安装好把安装位置的bin目录放到环境变量中。==2、安装pdfkit模块：1pip install --upgrade pdfkit 二、代码实现：参考好几个博客之后，我找到有以下几种可以实现的方法，参考博客我放到下方，需要的可以去看看。 方法1–wkhtmltopdf命令url ：刚刚安装好，可以直接使用命令处理一个单个的url。命令格式：wkhtmltopdf + url + 输出名称（可以是绝对路径或者相对路径） 1wkhtmltopdf https://www.liaoxuefeng.com/wiki/1016959663602400/1016959735620448 demo1.pdf 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 方法2–wkhtmltopdf命令html：命令格式：wkhtmltopdf + html文件 （可以是绝对路径或者相对路径）+ 输出pdf路径（可以是绝对路径或者相对路径） 1wkhtmltopdf .\\0.html demo2.pdf 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 方法3–pdfkit的from_url（url这个不报错）：注意点：这个要把刚刚安装的环境位置弄上，我添加到系统的环境变量中，不加入这个还是保错，不知道有个博主写的，他为什么可以下载保存，我这边要加上这个配置。 1path_wk = r'd:\\tools\\wkhtmltopdf\\bin\\wkhtmltopdf.exe' # 安装位置2config = pdfkit.configuration(wkhtmltopdf=path_wk) 代码演示：1import pdfkit234path_wk = r'd:\\tools\\wkhtmltopdf\\bin\\wkhtmltopdf.exe' # 安装位置5config = pdfkit.configuration(wkhtmltopdf=path_wk)6# pdfkit.from_url(['google.com', 'yandex.ru', 'engadget.com'], 'out1.pdf',configuration=config)7pdfkit.from_url(['https://www.liaoxuefeng.com/wiki/1016959663602400/1016959735620448'], 'demo3.pdf',configuration=config) 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 方法4–pdfkit的from_file（我的虽然也能成功生成pdf，但是这个会报错，找了几个小时没有找到怎么解决，如果有懂得大佬，可以赐教一下哈）：代码，可以合成单个html，也可以合成多个html： 1# -*- coding: utf-82import pdfkit34path_wk = r'd:\\tools\\wkhtmltopdf\\bin\\wkhtmltopdf.exe' # 安装位置5config = pdfkit.configuration(wkhtmltopdf=path_wk)6pdfkit.from_file(['0.html', '1.html'], 'demo5.pdf', configuration=config) 能生成能打开pdf，其实效果可以了，就是报错，唯一遗憾的是一直没有找到报错解决方法，等闲了回家用自己电脑测试试试，是不是公司电脑中其他环境问题： 在这里插入图片描述 在这里插入图片描述 问题：我把问题放到这里，如果有懂的大佬，欢迎留言给我讲解一波哈。 1Exception in thread Thread-2:2Traceback (most recent call last):3 File \"D:\\tools\\Python3.6\\lib\\threading.py\", line 916, in _bootstrap_inner4 self.run()5 File \"D:\\tools\\Python3.6\\lib\\threading.py\", line 864, in run6 self._target(*self._args, **self._kwargs)7 File \"D:\\tools\\Python3.6\\lib\\subprocess.py\", line 1084, in _readerthread8 buffer.append(fh.read())9 File \"D:\\tools\\Python3.6\\lib\\codecs.py\", line 322, in decode10 (result, consumed) = self._buffer_decode(data, self.errors, final)11UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd5 in position 639: invalid continuation byte1213Traceback (most recent call last):14 File \"D:/zjf_workspace/000、爬虫代码-基础的/scrapy_100_工具/27、将网页html转存成pdf/3、pdfkit模块/2、pdfkit模块--from_file.py\", line 6, in &lt;module&gt;15 pdfkit.from_file(['0.html', '1.html'], 'demo5.pdf', configuration=config)16 File \"D:\\tools\\Python3.6\\lib\\site-packages\\pdfkit\\api.py\", line 49, in from_file17 return r.to_pdf(output_path)18 File \"D:\\tools\\Python3.6\\lib\\site-packages\\pdfkit\\pdfkit.py\", line 164, in to_pdf19 raise IOError(\"wkhtmltopdf exited with non-zero code &#123;0&#125;. error:\\n&#123;1&#125;\".format(exit_code, stderr))20OSError: wkhtmltopdf exited with non-zero code 1. error: 方法5–就是使用python执行系统命令的方法执行前俩个方法，可以做到批量处理。python执行系统命令的方法主要有下面这三个： os.system() os.popen() subprocess.Popen()==新增：这三个的区别和方法，可以参考我的另一篇博客==。python执行系统命令的方法总结 ==后续补充新增：三、用自己的方法实现完成将廖雪峰的129页博客保存为一个pdf：==这个具体我不解释了，就是前面的一个综合，直接上代码吧： 1import os2import subprocess34import requests5from PyPDF2 import PdfFileWriter, PdfFileReader6from lxml import etree789class Merge_LiaoXueFeng:10 def __init__(self, pdf_name,path):11 self.headers = &#123;12 \"Cookie\": \"Hm_lvt_2efddd14a5f2b304677462d06fb4f964=1571883576; Hm_lpvt_2efddd14a5f2b304677462d06fb4f964=1571884481\",13 \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36\"14 &#125;15 self.urls = self.get_url_list()16 self.pdf_name = pdf_name17 self.path = path1819 def get_url_list(self):20 \"\"\"21 获取所有URL目录列表22 :return:23 \"\"\"24 response = requests.get(\"https://www.liaoxuefeng.com/wiki/1016959663602400\", headers=self.headers)25 html = etree.HTML(response.text)26 with open('ret.html', 'w', encoding='utf-8') as file:27 file.write(response.text)28 href_list = html.xpath('//*[@id=\"x-wiki-index\"]//a/@href')29 print(\"myself_href\", href_list)30 urls = []31 for href in href_list:32 url = \"http://www.liaoxuefeng.com\" + href33 urls.append(url)34 return urls3536 def merge_pdf(self, infnList, outfn):37 \"\"\"38 合并pdf39 :return:40 \"\"\"41 pdf_output = PdfFileWriter()42 # 把所有pdf写入一个pdf（pdf合并）43 for infn in infnList:44 pdf_input = PdfFileReader(open(infn, 'rb'))45 # 获取 pdf 共用多少页，把每一个pdf的所有页数写进一个pdf46 page_count = pdf_input.getNumPages()47 print(page_count)48 for i in range(page_count):49 pdf_output.addPage(pdf_input.getPage(i))50 pdf_output.write(open(outfn, 'wb'))5152 def get_pdf_list(self):53 \"\"\"54 获取当前位置的pdf目录下的所有pdf的绝对路径，返回为pdf路径列表55 :return:56 \"\"\"57 # 获取当前pdf目录下的所以pdf文件58 # path = os.getcwd(r\"D:\\zjf_workspace\\000、爬虫代码-基础的\\scrapy_100_工具\\27、将网页html转存成pdf\\1、批量处理\")59 html_path = os.path.join(self.path, 'pdf')60 file_list = os.listdir(html_path)61 pdf_list = []62 for file_one in file_list:63 # 判断是否都是pdf文件64 if file_one.endswith('.pdf'):65 pdf_file = os.path.join(html_path, file_one)66 pdf_list.append(pdf_file)67 return pdf_list6869 def run(self):70 num = 071 subprocess_list = []72 # 1、保存文章为pdf73 for article_url in self.urls:74 num += 175 # 不等待结束接着运行下一个，（不建议很多运行,可以五个左右设置一个等待完成，防止多个运行电脑卡死）76 subprocess_one = subprocess.Popen(r'wkhtmltopdf &#123;&#125; ./pdf/&#123;&#125;.pdf'.format(article_url, num))77 subprocess_list.append(subprocess_one)78 if len(subprocess_list) &gt;= 10:79 for i in subprocess_list:80 i.wait()81 subprocess_list = []82 else:83 pass84 # os_one = os.popen(r'wkhtmltopdf &#123;&#125; ./pdf2/&#123;&#125;.pdf'.format(article_url, num))85 # os_one.close()86 # print(dir(os_one))87 # time.sleep(20)88 # 一个运行结束另一个运行（可以加个协程跑快一点）89 # os.system(r'wkhtmltopdf &#123;&#125; ./pdf3/&#123;&#125;.pdf'.format(article_url, num))9091 # 最后可能不大于10，所有把后面小于10的执行完毕92 for i in subprocess_list:93 i.wait()9495 # 2、获取当前pdf目录下的所以pdf文件96 pdf_list = self.get_pdf_list()97 print(\"pdf_list\",pdf_list)9899 # 3、合并pdf100 print('pdf下载完毕，准备合并pdf:')101 self.merge_pdf(pdf_list, self.pdf_name)102103104if __name__ == '__main__':105 path = os.getcwd()106 print(path)107 liaoxuefeng = Merge_LiaoXueFeng(u\"廖雪峰Python_all.pdf\", path)108 liaoxuefeng.run() 最终效果： 在这里插入图片描述 在这里插入图片描述 学习参考文章： https://blog.csdn.net/hubaoquanu/article/details/66973149https://blog.csdn.net/y101101025/article/details/62461115https://blog.csdn.net/u012561176/article/details/83655247https://blog.csdn.net/xc_zhou/article/details/80952168","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"html保存为PDF","slug":"html保存为PDF","permalink":"https://zhaojiafu.github.io/tags/html%E4%BF%9D%E5%AD%98%E4%B8%BAPDF/"},{"name":"wkhtmltopdf","slug":"wkhtmltopdf","permalink":"https://zhaojiafu.github.io/tags/wkhtmltopdf/"},{"name":"pdfkit","slug":"pdfkit","permalink":"https://zhaojiafu.github.io/tags/pdfkit/"}]},{"title":"request之post发送Request Payload请求解决方案","slug":"35e60b00a0fb750ff299ef3bab65cdff","date":"2019-10-23T03:34:32.000Z","updated":"2019-12-02T06:45:48.041Z","comments":true,"path":"2019/10/23/35e60b00a0fb750ff299ef3bab65cdff/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/23/35e60b00a0fb750ff299ef3bab65cdff/","excerpt":"","text":"说明：这个问题，是我今天测试一个网站（具体网站我就不写出来了，如果遇到类似的Request Payload请求参考即可。）然后各种尝试，就很纳闷了，这样的post真的第一次见呀，然后安装之前的怎么发送就失败。最后使用json序列化，作为请求体，发送post，就成功了。 1、截图看看具体大概结构：具体就是这种，之前的post，我们直接把query string弄成json格式，然后传request的data或者json参考，就能获取数据，但是这个我尝试了好久，俩个都不行，各种尝试把，还弄过一个作为data，一个作为json传入，还是失败，自己也给整蒙了。 最后尝试把query string还是放到url里面，下面的request payload先自己手动弄成python的json格式（页面的是JavaScript的json格式，key有点区别（python的key必须是变量名字符串字符串））然后使用json序列化作为data传入就可以了（弄了快一个小时总算解决这个问题了，以后再遇到类似的post请求，就知道如何使用了，写出来希望帮助到你） 在这里插入图片描述 2、具体代码中使用做过爬虫的你一看就懂了，我就不解释了。","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhaojiafu.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"总结下一年半前大牛测试的购买的代理结果做下购买代理使用推荐","slug":"34902fe14ce72f7161e123efb869f133","date":"2019-10-17T03:34:32.000Z","updated":"2019-12-02T06:45:48.153Z","comments":true,"path":"2019/10/17/34902fe14ce72f7161e123efb869f133/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/17/34902fe14ce72f7161e123efb869f133/","excerpt":"","text":"@[toc] 说明（我不是做代理推荐）：我不是做代理推荐，我只是看到一个文章，觉得人家测试的非常好，我只不过根据他的结果，结合现在的各个代理商的价格，整理成方便筛选自己需要的一个代理随笔（也是为我自己后续需要使用，记录下来，省的以后需要购买代理还得去搜那个代理商的划算）。 这个如果是大牛2018.2测试的，我今天看到已经快俩年了，不保证还是这样价格和质量，如果好的网站估计代理ip质量更好了也说不定呐：可是我还想找出合适预算的代理ip，然后就需要筛选就行了，我使用Excel筛选，并且对比现在的真实价格，得出一些推荐的购买代理商。 我测试之后的一个总结结果：如果个人测试或者使用，我觉的讯代理比较好吧，毕竟数量和价格都很实惠的。（可用率和使用时长我没有测试，需要的话自己买一个测试，如果以后工作中需要必须购买了，我会买了把使用情况再补充这里吧） 参考的文章：参考文章：其实人家写的很详细，整理的非常好，但是如果是只想快速选择使用购买哪个好，我还是参考了他的最后一张表格，通过筛选出自己觉得不错的代理商，（后续需要购买考虑） 在这里插入图片描述 整理到Excel表格，进行筛选整理： 在这里插入图片描述 1、通过使用Excel筛选：这是我通过可用率大于90%，响应时间均值小于2秒，包月价格小于500的，出现一些数据，从数据来看，根据预算进行筛选。 在这里插入图片描述 2、如果预算500以内： 有一下四个考虑。如果 在这里插入图片描述 然后进入四个自己筛选，看看目前的价格（因为测试时间都过了一年多了，价格有可能有变化，质量什么应该也有变化） 1、站大爷的短效优质：网站：进入发现价格涨了，超预算了。。。所以还是先看看其他的吧。 在这里插入图片描述 2、讯代理，价格什么的没有变化（感觉还不错）个数每天使用的还比较多的。 在这里插入图片描述 3、芝麻代理：价格没有变，但是有每天提取个数限制。个数使用没有讯代理使用的多，价格比讯代理还贵点。 在这里插入图片描述 4、阿布云代理：发现价格笔者之前也有上涨，通过这些对比，如果公司购买不差钱，可以考虑，比较人家之前的测试结果还是很好的。 5、总结：如果是个人掏钱购买还是，如果是我我会选择讯代理。价格没有上涨，可用率和每天的可用数量也不错。是个比较好的代理商（具体情况我没有测试哈，先说好，没人给一分钱，我只是看到人家测试结果，进行一个选择性的考虑分析。） 3、如果预算不超过400：使用的代理数量，觉得够用，还行可用率比较好的情况，我推荐芝麻代理和讯代理。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 总结：如果需要爬取的网站禁止ip不是那么频繁，可以考虑芝麻代理，如果禁用ip比较频繁（也就是需要一天更换很多代理，还是选择数量多的讯代理吧，比较数量比这个多很多。） 4、可用率和速度最便宜的蘑菇代理：这个适合个人测试，便宜，每天2000个，也可以满足了测试使用。 在这里插入图片描述 5、总结：通过对比文章的测试结果来看，还是觉得讯代理比较好点吧（我个人还没有测试，这个不算推广，我写这个是如果后续我自己如果用，我可能会优先是这个这个结果购买测试使用，为了防止别说我这个是广告，我还是设置为粉丝可看了，这个只是我自己的一个记录随笔，日后我自己需要的代理商可以很快挑选自己中意的代理商使用，这样不知道一个一个试，毕竟有人给我尝试购买使用了，多好！！！）","categories":[{"name":"代理ip","slug":"代理ip","permalink":"https://zhaojiafu.github.io/categories/%E4%BB%A3%E7%90%86ip/"}],"tags":[{"name":"代理ip","slug":"代理ip","permalink":"https://zhaojiafu.github.io/tags/%E4%BB%A3%E7%90%86ip/"}]},{"title":"python爬虫之scrapy 框架学习复习整理四--验证发送请求时携带cookies的4种有效性方法","slug":"b06dadf2dcd5da45e4c9d7f1359d8005","date":"2019-10-10T03:34:32.000Z","updated":"2019-12-02T07:00:37.279Z","comments":true,"path":"2019/10/10/b06dadf2dcd5da45e4c9d7f1359d8005/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/10/b06dadf2dcd5da45e4c9d7f1359d8005/","excerpt":"","text":"说明：今天就是想做一个使用scrapy爬取网页时携带cookie或者其他请求头时，携带的有效性方法，进行验证： 我的验证思路： 测试网站是CSDN的写作榜单，使用登录和未登录的cookies对比，对返回的响应是否含有自己的用户名，来进行验证是否携带成功。 一、使用requests模块初步验证cookies的有效性：1、先分析页面结构：做爬虫一定要先分析，学会分析才能接着往下做的更快，分析的时间远远大于自己写代码的时间（反正我的日常工作，是这样，分析最占时间，有时候需要结合代码测试着，边测试请求边分析，这都是很正常的） ①、登录状态 在这里插入图片描述 再次精确的验证确实是含有登录信息的。 在这里插入图片描述 ②、未登录状态 在这里插入图片描述 在这里插入图片描述 ③、对比结论：通过登录和未登录的状态对比，可以体现出cookies的有效性。 2、接下来我们使用requests模块测试cookies的有效性：①、测试代码：1import requests23url = \"https://blog.csdn.net/rank/writing_rank\"45headers = &#123;6 \"Cookie\": \"acw_tc=2760826b15706703138356750ef0504a5c53f64ccc4b649607aa0b0ffab95d; uuid_tt_dd=10_7125264310-1570670313837-927472; dc_session_id=10_1570670313837.951940; Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac=1570670317; Hm_ct_6bcd52f51e9b3dce32bec4a3997715ac=6525*1*10_7125264310-1570670313837-927472; firstDie=1; dc_tos=pz4wzc; c-login-auto=2; Hm_lpvt_6bcd52f51e9b3dce32bec4a3997715ac=1570670329\",7 # \"Host\": \"blog.csdn.net\",8 # \"Pragma\": \"no-cache\",9 # \"Sec-Fetch-Mode\": \"navigate\",10 # \"Sec-Fetch-Site\": \"none\",11 # \"Sec-Fetch-User\": \"?1\",12 # \"Upgrade-Insecure-Requests\": \"1\",13 \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\"14&#125;1516resp = requests.get(url,headers=headers)1718# print(resp.text)19print(\"是否有我的登陆信息\", \"奋斗吧-皮卡丘\" in resp.text) ②、未登录状态发现找不到我的用户名，结果是False ③、登录状态这个代码只是cookie改了，其他不变，你可以改成你自己的，这个返回是True，当然，用户名代码中也要改为你自己的。 在这里插入图片描述 ④、结论通过对此测试，从而证明了。携带cookies是否有效，可以影响是否可以从响应中找到自己的用户名。 二、使用scrapy测试携带cookie的方法1、命令生成项目和初始化爬虫：1scrapy startproject CSDN_writing2cd .\\CSDN_writing\\3scrapy genspider csdn1 blog.csdn.net 默认生成模板。 在这里插入图片描述 2、修改setting记得把ROBOTSTXT_OBEY 改为False，其他几个可以直接复制过去。 1# ROBOTSTXT_OBEY = True2USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'3ROBOTSTXT_OBEY = False45_LEVEL = 'DEBUG'6LOG_LEVEL = \"WARNING\" 3、初步更改爬虫程序这里我只是更改了初始的url,其他就是在进入解析函数，打印出url,进行测试。其他的items.py 和管道pipelines.py我们可以不用修改（因为我们不存数据，不需要进入管道，如果需要存数据再进行更改即可，如果更改pipelines.py，记得把setting的注销代码打开，默认模板中是关闭的）， 1# -*- coding: utf-8 -*-2import scrapy345class Csdn1Spider(scrapy.Spider):6 name = 'csdn1'7 allowed_domains = ['blog.csdn.net']8 start_urls = ['https://blog.csdn.net/rank/writing_rank']910 def parse(self, response):11 print(\"进入解析函数\",response.url)12 # pass 4、运行测试： 在这里插入图片描述 发现，现在可以进入了解析函数，那么我们继续测试没有添加cookies的情况下，看看是否含有用户名，和一会加入cookies做对比。 在这里插入图片描述 测试结果为False，然后我们测试给start_urls，如何加cookies。 5、start_urls是交给谁处理的呐 在这里插入图片描述 根据scrapy生成的模板结构，我们可以发现，我们可以根据通过spiders这个应该能找到关于start_urls处理的函数。 在这里插入图片描述 在这里插入图片描述 然后在spiders目录下，一个一个搜索，看看具体在哪个里面处理的。1、init.py文件找到了（应该就是这里，以防万一，我们继续查找） 2、crawl.py文件（我们没有找到） 在这里插入图片描述 3、feed.py文件（我们没有找到） 在这里插入图片描述 4、init.py文件我们没有找到 在这里插入图片描述 5、sitemap.py文件我们没有找到 在这里插入图片描述 通过以上步骤，我们找到了处理start_urls的位置，这样下来，我们是否理解更深刻了呐。 在这里插入图片描述 在这里插入图片描述 不知道看到这里你有没有想到要进入进行的类，进去看看，更直接的找到处理start_urls的方法位置呐？ 进来之后发现就是我们刚刚大费周折要找的位置。但是这样你也就更能理解继承的知识点了。 在这里插入图片描述 接着寻找： 在这里插入图片描述 修改源码，测试到底进入哪一个：然后弹出是否确定编辑，点击ok即可（不要乱改，如果必须更改原内容，尽量先复制一份，改不好还能改回来）。 在这里插入图片描述 我改好了，就加个打印，测试到底进入哪一个。 在这里插入图片描述 执行爬虫程序，等待打印结果。 在这里插入图片描述 这时候我们就知道如何改了，我们可以自定义一个start_requests，这样就不会继承父类的方法了（这样是不是回顾了继承的知识点） 如果还不懂，咱们就看看源文档，我在这里：https://doc.scrapy.org/en/latest/topics/spiders.html找到一段代码就是我们想要的，可以再发送start_urls之前，添加cookis。 在这里插入图片描述 6、经过多次尝试找到添加cookies的方法：我踩的坑1： 在这里插入图片描述 后来运行不出来， 在这里插入图片描述 然后我就看看里面的cookies参数： 在这里插入图片描述 然后报错，我觉得是我的cookies格式不对。 在这里插入图片描述 进入源码，查看cookies的接受格式。发现是字典格式： 在这里插入图片描述 然后转成字典格式： 在这里插入图片描述 再次测试： 成功了。 在这里插入图片描述 7、搜索到添加cookie的三种方法：然后我不甘心headers中，加入cookie不成功，肯定可以成功的，肯定哪个地方我没有设置好，requests模块都可以，这个应该也可以支持的。然后我谷歌搜索到一个博客： scrapy添加cookie的三种方式 具体内容： 11.settings2settings文件中给Cookies_enabled=False解注释3settings的headers配置的cookie就可以用了4这种方法最简单，同时cookie可以直接粘贴浏览器的。5后两种方法添加的cookie是字典格式的，需要用json反序列化一下,6而且需要设置settings中的Cookies_enabled=True782.DownloadMiddleware9settings中给downloadmiddleware解注释10去中间件文件中找downloadmiddleware这个类，修改process_request，添加request.cookies=&#123;&#125;即可。11123.爬虫主文件中重写start_request1314def start_requests(self):15 yield scrapy.Request(url,dont_filter=True,cookies=&#123;自己的cookie&#125;) 发现,他的博客写的第3种方法就是我的刚刚成功的cookie字典格式的方法；第1种方法就是需要在我的第一次headers尝试，需要setting中打开支持cookies就行了；第2种方法需要进入下载中间件，修改downloadmiddleware中的process_request方法，在里面添加request.cookies={}，记得是字典格式。 8、再次进行我的第一次方法尝试通过分析，发现我的第一次不成功是因为setting中有个cookies设置需要打开，默认是关闭cookies，更改为： 1# Disable cookies (enabled by default)2COOKIES_ENABLED = False 然后修改我的爬虫程序： 在这里插入图片描述 再次运行：成功！！！ 在这里插入图片描述 9、尝试通过下载中间件修改：1、进入中间件： 在这里插入图片描述 2、修改setting设置记得先在设置中打开，默认是关闭的：发现有个文档，可以多研究研究这些文档：https://doc.scrapy.org/en/latest/topics/downloader-middleware.htmlsetting设置打开下载中间件： 3、修改爬虫程序：爬虫程序设置为不使用任何cookies。 在这里插入图片描述 4、测试打印：通过打印出来的，我们可以看出，可以在下载中间件中加入cookei和headers，通过上面的文档可以了解到，如果setting中打开这个下载中间件，则scrapy框架发送每一个请求之前都会进入这个process_request方法中。 在这里插入图片描述 5、添加字典的cookie测试，看看效果（记得上面没加是False）1. return None（这时候setting中cookie是打开着的，后来发现补充这一句） 在这里插入图片描述 在这里插入图片描述 2. return request（这时候setting中cookie是打开着的，后来发现补充这一句） 在这里插入图片描述 结果很令我惊讶，换成return request结果不进入解析函数了，很尴尬，找不到什么原因。 在这里插入图片描述 3、多次尝试之后，觉得是不是setting中的cookie打开和这个冲突的原因，然后开始摸索着尝试：4、return None（关闭setting的cookie设置）setting中设置： 在这里插入图片描述 在这里插入图片描述 成功（return None+setting中关闭cookie，或者改为True）： 在这里插入图片描述 4、return request（关闭setting的cookie设置）这种无效， 在这里插入图片描述 5、我尝试了在中间件中国加入headers(好像确实不支持，只支持字典类型的cookies)尝试了几次都不行。 在这里插入图片描述 6、setting中加入默认的headers 打开setting中的cookie设置 添加cookie到setting中的默认的headers 三、通过以为各种尝试：最终在scrapy中加入cookie，有以下3种方式：1、在setting中将cookie设置打开（默认禁用的），然后再爬虫程序中重写start_requests方法打开cookie设置： 1# Disable cookies (enabled by default)2COOKIES_ENABLED = False 重新start_requests方法，然后可以使用添加cookie和headers方法，我比较喜欢headers方法，比较省事。 在这里插入图片描述 2、在setting中将cookie设置打开（默认禁用的），然后再修改setting中的默认headers，把cookies添加进去（推荐使用掌握这个方法。）：这个方法最简单，不要修改其他的。每种请求的地址可以自定义headers，可塑性比较强，最推荐使用掌握。 3、关闭setting的cookie设置（默认就是关闭，如果打开了，请关闭）– （不推荐使用） 在这里插入图片描述 在这里插入图片描述 总结：(最推荐使用第1个方法)：弄了一天总算测试完了，做个总结吧！！！ 如果一个网站的所以cookie都是一样的，推荐使用第2种 方法，如果不一样,推荐使用第一个方法中的headers方法，因为你在解析函数中，还可能再发送 scrapy.Request请求和定义新的解析函数再请求scrapy.Request，这样如果需要不同的cookies或者不同的headers防止反反爬，在定义一个headers2就可以搞定（或者弄个cookies列表和user-agent列表，每次随意组合），不同类别的url,携带不同的url,而且如果对于有cookie反爬的网站，我还可以定义一个cookie列表，每次选择haders之前，先随机抽去一个cookies，组合成headers，这样能达到反反爬cookie（或者user-agent），如果是ip反爬，后续讨论，本章暂不讨论。 参考：https://doc.scrapy.org/en/latest/topics/spiders.html https://doc.scrapy.org/en/latest/topics/settings.html https://blog.csdn.net/qq_40655579/article/details/85126064","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"},{"name":"python爬虫","slug":"scrapy/python爬虫","permalink":"https://zhaojiafu.github.io/categories/scrapy/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"python爬虫之scrapy 框架学习复习整理三--CrawlSpider（自动提取翻页）","slug":"daa6e3f15670a5ed21506fc4edf51d1e","date":"2019-10-09T03:34:32.000Z","updated":"2019-12-02T07:26:18.078Z","comments":true,"path":"2019/10/09/daa6e3f15670a5ed21506fc4edf51d1e/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/09/daa6e3f15670a5ed21506fc4edf51d1e/","excerpt":"","text":"@[toc] 说明：这次是接着上一次的爬虫：python爬虫之scrapy 框架学习复习整理二进行补充，上一次是自己对响应的页面，进行分析，查找出下一页的地址，使用requests发送请求，解析方法还是parse函数。 这次使用自动从响应页面提取出需要爬取的地址，然后接着再次爬取，直至，提取的地址都爬取完毕。 自动提取下一页：Scrapy中CrawlSpider1、再建立一个爬虫程序：1scrapy genspide -t crawl scrapyd2 lab.scrapyd.cn 解释下：scrapy genspide -t crawl 是固定格式，后面跟的scrapyd2是程序名字name,后面是允许爬取的域名，后续可以自己增加需要爬取的域名。 执行之后会生成一个scrapyd2.py文件。 在这里插入图片描述 scrapyd2.py文件模板自动生成格式为： 在这里插入图片描述 2、Scrapy中CrawlSpider的几个点：①、CrawlSpider注意点： ②、LinkExtractor参数 在这里插入图片描述 在这里插入图片描述 ③、Rule参数 在这里插入图片描述 在这里插入图片描述 3、简单修改下爬虫程序scrapyd2.py1、正则匹配需要提取的地址：初步修改的完整代码： 1# -*- coding: utf-8 -*-2import scrapy3from scrapy.linkextractors import LinkExtractor4from scrapy.spiders import CrawlSpider, Rule567class Scrapyd2Spider(CrawlSpider):8 name = 'scrapyd2'9 allowed_domains = ['lab.scrapyd.cn']10 start_urls = ['http://lab.scrapyd.cn/']1112 rules = (13 Rule(LinkExtractor(allow=r'http://lab.scrapyd.cn/page/\\d+/',), callback='parse_item', follow=True),14 )1516 def parse_item(self, response):17 print(\"进来了\",response.url)18 item = &#123;&#125;19 #item['domain_id'] = response.xpath('//input[@id=\"sid\"]/@value').get()20 #item['name'] = response.xpath('//div[@id=\"name\"]').get()21 #item['description'] = response.xpath('//div[@id=\"description\"]').get()22 return item 可以看到我只是修改可，rule和parse_item方法中的打印输出测试：allow修改的是一个正则匹配，可以使用正则方法。然后可以，执行： 1scrapy crawl scrayd2 然后打印出来： 在这里插入图片描述 从结果我们可以看出，已经可以提取出翻页的url，并且爬取了翻页的地址。从打印出的翻页地址，可以充分体验出scrapy的爬取是一个异步的，因为我们就这几页的情况下，顺序还是乱序，如果翻页更多的情况下，那么顺序估计更乱。 测试如果正则匹配为空会怎样： 在这里插入图片描述 结果把所有的都给我匹配到了，只要是允许域名下的地址： 在这里插入图片描述 2、xpath匹配需求提取的地址：只是修改了Rule：经过我测试之后，发现使用xpath提取发现，’//[@id=”main”]//li[@class=”next”]/a’和’//[@id=”main”]//li[@class=”next”]’提取的结果是一样的，也就证实了，rule的规则，会把匹配到的HTML页面里面的所有地址，只要是allowed_domains 域名下的所有地址都会提取出来，作为下一个爬取url,放到url队列进行继续爬取。 1rules = (2 Rule(LinkExtractor(restrict_xpaths=('//*[@id=\"main\"]//li[@class=\"next\"]/a',), ), callback='parse_item', follow=True),3 # Rule(LinkExtractor(restrict_xpaths=('//*[@id=\"main\"]//li[@class=\"next\"]',), ), callback='parse_item', follow=True),4 # Rule(LinkExtractor(restrict_xpaths=('//*[@id=\"main\"]',), ), callback='parse_item', follow=True),5 ) 定位到li和a标签，的结果和正则匹配是一样的。 在这里插入图片描述 处于好奇，我就测试了下，如果定位到href,会怎样，结果报错了。‘//*[@id=”main”]//li[@class=”next”]/a/@href’ 在这里插入图片描述 报错内容：看了使用xpath最多定位的url的a标签，着上一级的li 在这里插入图片描述 然后我又尝试了，如果定位到所有li的div会怎样，结果：‘//*[@id=”main”]’结果： 在这里插入图片描述 把div下所有是allowed_domains域名下的url都匹配过来了，所以，这个不精确的提取不建议使用，这些还是只有自己测试之后才会记得牢（当然时间长了也会忘，没事抽时间复习一下还是很有必要的）。 在这里插入图片描述 3、结论：通过使用正则和xpath匹配尝试，得到： 如果使用正则，尽量匹配地址精确点，这样才不会出现页面混乱，不然解析页面是会出问题。 如果使用xpath匹配，进行精确到a标签，或者a标签的父级（如果父级有很多a标签，其他的a标签有些不符合，还是精确到a标签吧） 如果使用xpath匹配，不要匹配到href属性，不然还会报错 4、修改parse_item直接把之前的代码复制过来了，只不过翻页步骤不要了： 1def parse_item(self, response):2 print(\"进来了\",response.url)3 # item = &#123;&#125;4 # #item['domain_id'] = response.xpath('//input[@id=\"sid\"]/@value').get()5 # #item['name'] = response.xpath('//div[@id=\"name\"]').get()6 # #item['description'] = response.xpath('//div[@id=\"description\"]').get()7 # return item89 # 1、提取每一页的数据10 div_list = response.xpath('//*[@id=\"main\"]/div[@class=\"quote post\"]')11 for div in div_list:12 # extract_first() 和 get() 返回的结果是一样的。13 text = div.xpath('./span[@class=\"text\"]/text()').get()14 # author = div.xpath('.//*[@class=\"author\"]/text()').extract_first()15 author = div.xpath('.//*[@class=\"author\"]/text()').get()16 url = div.xpath('.//a[contains(text(),\"详情\")]/@href').get()17 # print(\"div\", text, author, url)18 item = ScrapydCnItem()19 # item = &#123;&#125;20 item['text'] = text21 item['author'] = author22 item['url'] = url23 yield item 5、修改下管道储存的数据名称（防止和之前的混淆）：和之前相比：多加了一个2 在这里插入图片描述 6、运行：scrapy crawl scrayd2：1scrapy crawl scrayd2 打印出来的数据： 在这里插入图片描述 MongoDB保存的数据： 在这里插入图片描述","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"python爬虫之scrapy 框架学习复习整理一--最基本入门的知识点","slug":"526b19c90f74051ef7d7d2d6a7e4e2fb","date":"2019-10-09T03:34:32.000Z","updated":"2019-12-02T06:45:47.600Z","comments":true,"path":"2019/10/09/526b19c90f74051ef7d7d2d6a7e4e2fb/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/09/526b19c90f74051ef7d7d2d6a7e4e2fb/","excerpt":"","text":"说明：由于好久（半年以上了）没有用到scrapy框架做爬虫了，日常的使用request+多线程和协程就能高速爬取了，时间久了发现不怎么熟练了，抽空闲时间再复习一下，巩固。 我的工作环境：1windows10系统2python3.6 学习目标 创建一个Scrapy项目 定义提取的结构化数据(Item) 编写爬取网站的 Spider 并提取出结构化数据(Item) 编写 Item Pipelines 来存储提取到的Item(即结构化数据) 1、scrapy的爬虫流程： 在这里插入图片描述 在这里插入图片描述 2、scrapy入门： 创建一个scrapy项目scrapy startproject mySpider 生成一个爬虫scrapy genspider xiaohuar “xiaohuar.com” 提取数据完善spider，使用xpath等方法 保存数据pipeline中保存数据 3、几个必须掌握的全局命令：11. scrapy startproject（创建项目）22. scrapy genspider demo demo.com (初始化爬虫文件）33. scrapy crawl XX（运行XX蜘蛛）、44. scrapy shell http://www.scrapyd.cn（调试网址为http://www.scrapyd.cn的网站）-- 可以用来调试测试response含有的方法，或者xpath提取的方法，进行测试。 1、创建一个scrapy项目1scrapy startproject mySpider scrapy startproject这里是固定的，注意scrapy和startproject和mySpider中间是有空格的！后面的：mySpider是我们创建的蜘蛛名字，后面我们运行的时候用得到，你需要根据你的情况创建，比如你是想爬取淘宝你可以这样创建： 1scrapy startproject taobao 会在当前目录下生成一个test_1的目录，结构如下图 在这里插入图片描述 下面来简单介绍一下各个主要文件的作用： scrapy.cfg ：项目的配置文件 mySpider/ ：项目的Python模块，将会从这里引用代码 mySpider/items.py ：项目的目标文件 mySpider/pipelines.py ：项目的管道文件 mySpider/settings.py ：项目的设置文件 mySpider/spiders/ ：存储爬虫代码目录 2、明确目标(mySpider/items.py)我们打算抓取：http://top.baidu.com/百度风云榜实时热点前十条信息 打开mySpider目录下的items.py Item 定义结构化数据字段，用来保存爬取到的数据，有点像Python中的dict，但是提供了一些额外的保护减少错误。 可以通过创建一个 scrapy.Item 类， 并且定义类型为 scrapy.Field的类属性来定义一个Item（可以理解成类似于ORM的映射关系）。 接下来，创建一个BaiduItem 类，和构建item模型（model）。 items.py 默认会是这种： 改为这个： 1import scrapy23class BaiduItem(scrapy.Item):4 bd_id = scrapy.Field()5 bd_title = scrapy.Field()6 bd_num = scrapy.Field() 在这里插入图片描述 3、制作爬虫 （spiders/baidu.py）这里主要分为俩步：爬数据+取数据 在这里插入图片描述 1、制作爬虫文件默认格式1cd mySpider2scrapy genspider baidu \"top.baidu.com/\" 然后会在spiders下面生成一个baidu.py文件，里面内容是下面的默认格式，自己再进行修改。 在这里插入图片描述 打开 mySpider/spider目录里的 baidu.py，默认增加了下列代码: 在这里插入图片描述 其实也可以由我们自行创建baidu.py并编写上面的代码，只不过使用命令可以免去编写固定代码的麻烦 要建立一个Spider， 你必须用scrapy.Spider类创建一个子类，并确定了三个强制的属性 和 一个方法。 name = “” ：这个爬虫的识别名称，必须是唯一的，在不同的爬虫必须定义不同的名字。 allow_domains = [] 是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页，不存在的URL会被忽略。 start_urls = () ：爬取的URL元组/列表。爬虫从这里开始抓取数据，所以，第一次下载的数据将会从这些urls开始。其他子URL将会从这些起始URL中继承性生成。 parse(self, response) ：解析的方法，每个初始URL完成下载后将被调用，调用的时候传入从每一个URL传回的Response对象来作为唯一参数，主要作用如下：负责解析返回的网页数据(response.body)，提取结构化数据(生成item)生成需要下一页的URL请求。 如果需要将start_urls的值修改为需要爬取的第一个url，或多个url，会多线程爬取这些。 2、修改parse()方法1def parse(self, response):2 # pass3 print(\"进来了\")4 with open('./baidu.html', 'wb') as file:5 file.write(response.body) 结果发现打印不出来“进来了”，我这里猜想是robot协议问题 在这里插入图片描述 更改robot协议，为False，并且将log级别更改为： 1ROBOTSTXT_OBEY = False23_LEVEL = 'DEBUG'4LOG_LEVEL = \"WARNING\" 成功打印出“进来了”： 在这里插入图片描述 然后在项目目录下生成一个baidu.html,这个就是爬取http://top.baidu.com/返回的页面。 在这里插入图片描述 这个时候，我们可以提取数据了，但是我忘记之前是如何提取的了，我只记得和request返回的是不一样的，怎么办，这时候可以考虑打印出来，看看response是什么类型，有什么方法： 在这里插入图片描述 打印出类型和拥有的方法： 在这里插入图片描述 3、使用xpath提取数据：保存的页面分析： 在这里插入图片描述 提取代码： 1def parse(self, response):2 # 测试是否能进来3 print(\"进来了\")4 # 保存下来响应页面5 # with open('./baidu.html', 'wb') as file:6 # file.write(response.body)7 # 打印出类型和方法8 # print(\"type_response\", type(response))9 # print(\"dir_response\", dir(response))10 # xpath提取数据11 li_list = response.xpath('//*[@id=\"hot-list\"]//li')12 items = []13 for li in li_list:14 # 将我们得到的数据封装到一个 `BaiduItem` 对象15 item = BaiduItem()16 # extract()方法返回的都是字符串17 # 名次18 bd_id = li.xpath('./span[@class=\"num-top\" or @class=\"num-normal\"]/text()').extract()19 # 标题20 bd_title = li.xpath('./a[@class=\"list-title\"]/text()').extract()21 # 搜索指数22 bd_num = li.xpath('./span[@class=\"icon-rise\" or @class=\"icon-fall\" or @class=\"icon-fair\"]/text()').extract()2324 # xpath返回的是包含一个元素的列表25 item['bd_id'] = bd_id[0]26 item['bd_title'] = bd_title[0]27 item['bd_num'] = bd_num[0]28 print(bd_id, bd_title, bd_num)29 items.append(item)30 # 直接返回最后数据31 print(\"items\",items)32 return items 注意点： 使用xpath提取字符串：后来补充测试，截图如图： 在这里插入图片描述 ①、extract() 返回的是一个包含字符串数据的列表【和getall()方法返回的结果一样】 ②、extract_first() 返回的是列表的第一个字符串【和get()方法返回的结果一样,】 response.xpath() 返回的是一个含有selector对象的列表 需要爬取的url必须在allowed_domains域名下的链接，allowed_domains里面可以存放多个域名，如果需要爬取其他地址，可以自己想需要爬取的跳转网页的域名加入allowed_domains的列表中。 打印出来的数据： 在这里插入图片描述 4、管道保存数据（pipelines.py）先在pipelines.py文件中增加一句，测试内容： 在这里插入图片描述 发现没有进入管道pipelines 在这里插入图片描述 我们修改baidu.py，将return改为yield，不能对于单个dict数据返回给管道pipelines 在这里插入图片描述 需要在setting里面把设置的管道注销的打开，这样才能进入管道。 在这里插入图片描述 这时候就可以进入管道了。 在这里插入图片描述 注意点：yield返回的只能是dict或者None，yield返回进入管道的，只能是字典格式的，如果是其他的就会报错： 在这里插入图片描述 在这里插入图片描述 5、保存到MongoDB数据库：管道代码： 1from pymongo import MongoClient234class MyspiderPipeline(object):56 def open_spider(self, spider):7 print(\"准备创建一个数据库\")8 # 这个会在项目开始时第一次进入pipelines.py进入，之后不再进入9 # 建立于MongoClient 的连接：10 self.client = MongoClient('localhost', 27017)11 # 得到数据库12 self.db = self.client['111_test_database_baidu']13 # 得到一个集合14 self.collection = self.db['111_test_collection_baidu']1516 def close_spider(self, spider):17 print('项目结束，断开数据库连接')18 # 这个会在结束时开始时第一次进入pipelines.py进入，之后不再进入19 self.client.close()2021 def process_item(self, item, spider):22 print(\"process_item\", item, spider)23 print(\"type\",type(item))24 # 储存到数据库25 print(\"准备保存到数据库\")26 self.collection.save(dict(item))27 return item 注意点：item看着是dict，但是还不python里面的dict，需要使用dict(item)转换一下，才能正常保存，不然报错，我这里改了就成功了： 成功报错效果图： 在这里插入图片描述 参考：https://doc.scrapy.org/en/latest/topics/item-pipeline.html","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"python爬虫之scrapy 框架学习复习整理二--scrapy.Request（自己提取url再发送请求）","slug":"b6288208a9fabc0a558dbcfc23223334","date":"2019-10-09T03:34:32.000Z","updated":"2019-12-02T07:00:37.349Z","comments":true,"path":"2019/10/09/b6288208a9fabc0a558dbcfc23223334/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/09/b6288208a9fabc0a558dbcfc23223334/","excerpt":"","text":"说明：今天主要学习一下翻页的功能，手动翻页的效果，前面的基础操作这里不不再依次讲解截图说明了，如果不太懂，可以参考我的上一篇scrapy博客：https://blog.csdn.net/weixin_42081389/article/details/102390279 我的配置：1windows10系统2python3.6 目标网站：http://lab.scrapyd.cn/因为这个网站是get，响应的页面就能找到下一页的url，我记得之前测试翻页是用的腾讯招聘网站，但是现在腾讯招聘的页面改成异步获取的json数据了，如果真的爬取，我觉得直接使用requests模块比较方便，如果用scrapy，可以直接把开始的start_urls列表换成一个异步url列表集，我感觉使用scrapy那样爬取多此一举了。 比如这样，url列表集： 1start_urls = ['https://careers.tencent.com/tencentcareer/api/post/Query?timestamp=1570587185160&amp;countryId=&amp;cityId=&amp;bgIds=&amp;productId=&amp;categoryId=&amp;parentCategoryId=&amp;attrId=&amp;keyword=&amp;pageIndex=&#123;&#125;&amp;pageSize=10&amp;language=zh-cn&amp;area=cn'.format(i) for i in range(1,101)] 不过这样的我不写，这样的和我的第一个博客没有什么区别，只不过初始化的url列表数量多了而已。 今天爬虫（手动提取url，发送get请求）1、创建项目+初始化爬虫文件：1scrapy startpoject scrapyd_cn2cd scrapyd_cn3scapy genspider scrapyd lab.scrapyd.cn/ 生成文件： 在这里插入图片描述 2、在setting中配置1USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'2ROBOTSTXT_OBEY = False34_LEVEL = 'DEBUG'5LOG_LEVEL = \"WARNING\"67ITEM_PIPELINES = &#123;8 'scrapyd_cn.pipelines.ScrapydCnPipeline': 300,9&#125; 3、修改items.py：这里我们只要三维数据，需要三个字段即可。 在这里插入图片描述 1import scrapy234class ScrapydCnItem(scrapy.Item):5 # define the fields for your item here like:6 text = scrapy.Field()7 author = scrapy.Field()8 url = scrapy.Field()9 # pass 4、修改爬虫程序：spiders/scrapyd.py①、scrapy.Request()这个只是和之前比这多了一个翻页功能，这个scrapy.Request()里面有俩个必须要传递的参数，一个是url,一个是返回的函数，这里的parse是本身的方法中，继续处理数据直至页面结束，可以自己写多个方法，根据项目和网站需要定义方法，和需要的返回方法中。 1# 翻页2 yield scrapy.Request(url=next_page, callback=self.parse) 其中还有几个常用的参数： 在这里插入图片描述 scrapy.Request()中几个常用参数解释： 1url：必填：2callback：必填：请求之后返回到方法中处理然后数据3enthod:默认是get,如果是post需要自己手动更改，我这里是get,忽略了。4cookies：字典类型，有些网站需要cookies，可以携带上单个的cookies。5headers：字典类型，请求头，我的这个在setting里面加入了user-agent，这里不加也可以。6meta：这个很常用，这里是方法之间传递参数的7dont_filter:是否开启过滤，默认关闭，开启之后爬取过的url,下一次不会再爬取8errback：和callback类似，但是是处理对应的请求url报错时会进入errback，可以进入将报错的url打印出来或者单独保留下来，后续手动测试查找报错原因 ②、直接上我的代码：1# -*- coding: utf-8 -*-2import scrapy3from scrapyd_cn.items import ScrapydCnItem45class ScrapydSpider(scrapy.Spider):6 name = 'scrapyd'7 allowed_domains = ['lab.scrapyd.cn']8 start_urls = ['http://lab.scrapyd.cn//']910 def parse(self, response):11 # 1、提取每一页的数据12 div_list = response.xpath('//*[@id=\"main\"]/div[@class=\"quote post\"]')13 for div in div_list:14 # extract_first() 和 get() 返回的结果是一样的。15 text = div.xpath('./span[@class=\"text\"]/text()').get()16 # author = div.xpath('.//*[@class=\"author\"]/text()').extract_first()17 author = div.xpath('.//*[@class=\"author\"]/text()').get()18 url = div.xpath('.//a[contains(text(),\"详情\")]/@href').get()19 # print(\"div\", text, author, url)20 item = ScrapydCnItem()21 item['text'] = text22 item['author'] = author23 item['url'] = url24 yield item2526 # 2、下一页27 next_page = response.xpath('//*[@id=\"main\"]//li[@class=\"next\"]/a/@href').get()28 print(\"下一页\",next_page)29 if next_page and len(next_page) &gt; 5:30 # 翻页31 yield scrapy.Request(url=next_page, callback=self.parse)32 else:33 print(\"没有下一页了\"*10) 5、管道处理（一般都在这里进行数据清洗和数据储存操作）：pipelines.py1、测试spider是什么：下面是我测试的方法，之前使用过name属性进行过对不同的数据进行清洗和储存。你也可以自己研究测试。 1class ScrapydCnPipeline(object):2 def process_item(self, item, spider):3 # print(\"pipelines.py\",item,spider)4 # 1、测试spider是什么?,结果发现spdier就是我们爬虫程序，因为一个项目里面可以有多个爬虫程序，5 # print(\"pipelines.py\",dir(spider)) # 打印出spider含有的属性和方法6 # ['allowed_domains', 'close', 'crawler', 'custom_settings', 'from_crawler', 'handles_request', 'log', 'logger', 'make_requests_from_url', 'name', 'parse', 'set_crawler', 'settings', 'start_requests', 'start_urls', 'update_settings']7 # print(\"pipelines.py\", spider.name)8 # 发现我的爬虫程序的name是唯一的，如果一个项目有多个爬虫程序时，可以根据name进行分别进行建立不同的方法处理（比如不同的爬虫数据，需要存入不同的数据库中，或者需要的字段还不一致）9 # pipelines.py scrapyd1011 # 2、处理返回的数据121314 return item 2、保存到MongoDB数据库：代码： 1from pymongo import MongoClient234class ScrapydCnPipeline(object):56 def open_spider(self, spider):7 print(\"准备创建一个数据库\")8 # 这个会在项目开始时第一次进入pipelines.py进入，之后不再进入9 # 建立于MongoClient 的连接：10 self.client = MongoClient('localhost', 27017)11 # 得到数据库12 self.db = self.client['111_test_database_scrapyd_cn']13 # 得到一个集合14 self.collection = self.db['111_test_collection_scrapyd_cn']1516 def close_spider(self, spider):17 print('项目结束，断开数据库连接')18 # 这个会在结束时开始时第一次进入pipelines.py进入，之后不再进入19 self.client.close()202122 def process_item(self, item, spider):23 # print(\"pipelines.py\",item,spider)24 # 1、测试spider是什么?,结果发现spdier就是我们爬虫程序，因为一个项目里面可以有多个爬虫程序，25 # print(\"pipelines.py\",dir(spider)) # 打印出spider含有的属性和方法26 # ['allowed_domains', 'close', 'crawler', 'custom_settings', 'from_crawler', 'handles_request', 'log', 'logger', 'make_requests_from_url', 'name', 'parse', 'set_crawler', 'settings', 'start_requests', 'start_urls', 'update_settings']27 # print(\"pipelines.py\", spider.name)28 # 发现我的爬虫程序的name是唯一的，如果一个项目有多个爬虫程序时，可以根据name进行分别进行建立不同的方法处理（比如不同的爬虫数据，需要存入不同的数据库中，或者需要的字段还不一致）29 # pipelines.py scrapyd3031 # 2、处理返回的数据32 # print(\"process_item\", item, spider)33 # print(\"type\", type(item))34 # 储存到数据库35 print(\"准备保存到数据库\",item)36 self.collection.save(dict(item))3738 return item 打印出的页面显示： 在这里插入图片描述 在这里插入图片描述 数据MongoDB存入成功： 在这里插入图片描述 6、我刚学scrapy对itmes模块的一个疑问：不知道刚学scrapy时有没有和我一样，有这样一个疑问，爬虫程序中，我不继承items中的ScrapydCnItem类，直接用一个字典代替，其实，我的理解，如果不涉及过的爬虫数据类型保存，是一样的，但是如果涉及过多的类型数据保存，会影响数据的混乱保存。比如进入管道中的，一个程序中，我就有好几种数据分别保存到不同的数据库，这时，继承items中的dict数据进入管道pipelines.py就可以用 isinstance(item,ScrapydCnItem) 返回的是True和False，进行保存自己需要的数据类型，到对应的需求数据库中。 在这里插入图片描述 scrapy.Item进入源文件是继承一个dict类： 在这里插入图片描述 scrapy.Field() 进入源文件也是继承一个dict 在这里插入图片描述 爬虫文件中，我测试发现定义一个字典返回的管道数据中储存，结果和定义的items的类ScrapydCnItem最后进入管道的结果是一样的，但是类型不一样，最后我找到一个可以理解这定义这个items中ScrapydCnItem类dict的原因： 1、我改为item={}爬虫spider/scrapyd.py中,改为item = {}： 在这里插入图片描述 pipelines.py中打印到处item类型，和print(“isinstance”,isinstance(item,ScrapydCnItem)) 其中这个ScrapydCnItem类，是items.py中的目标数据字段的类。from scrapyd_cn.items import ScrapydCnItem 在这里插入图片描述 上面的打印结果： 在这里插入图片描述 2、我改为：item = ScrapydCnItem()爬虫spider/scrapyd.py中 在这里插入图片描述 pipelines.py中，用来打印出我的疑问 在这里插入图片描述 打印出管道中的结果： 在这里插入图片描述 3、对比，得出我认为的结论：通过上面俩个打印出的结论，我也就自己给出了我的疑问答案，那就是，items的文件，在爬虫程序中继承过来的字段类型，看着是字典，但是可以根据这个进行不同的数据类型（根据继续的items中的类来体现），根据isinstance(item,ScrapydCnItem)，ScrapydCnItem要改为你实际需求的数据类名，进行不同数据类型分开保存。 这也就是我自己对这个items中的定义目标数据字段的理解。","categories":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/categories/scrapy/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://zhaojiafu.github.io/tags/scrapy/"}]},{"title":"Linux下vim_vi 编辑器 命令总结","slug":"c3135e3a74347c2b3436fc37c2c6d8d5","date":"2019-10-08T03:34:32.000Z","updated":"2019-12-02T07:00:37.300Z","comments":true,"path":"2019/10/08/c3135e3a74347c2b3436fc37c2c6d8d5/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/08/c3135e3a74347c2b3436fc37c2c6d8d5/","excerpt":"","text":"一、vi简介vi是“Visual interface”的简称，它在Linux上的地位就仿佛Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制。Vi不是一个排版程序，它不象Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。 vi没有菜单，只有命令，且命令繁多。 ①、Vi有三种基本工作模式： 命令模式（esc按键切换文本模式为命令模式） 文本输入模式（在命令模式下按i切换为文本模式） 末行模式（在命令模式下按shift+：切换为末行模式） 工作模式图： 1、文本输入模式在命令模式下输入插入命令i、附加命令a 、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键ESC即可。 2、命令行模式任何时候，不管用户处于何种模式，只要按一下ESC键，即可使Vi进入命令模式；我们在shell环境(提示符为$)下输入启动Vi命令，进入编辑器时，也是处于该模式下。在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。 3、末行模式末行模式也称ex转义模式。在命令模式下，用户按“:”键即可进入末行模式下，此时Vi会在显示窗口的最后一行(通常也是屏幕的最后一行)显示一个“:”作为末行模式的提示符，等待用户输入命令。多数文件管理命令都是在此模式下执行的(如把编辑缓冲区的内容写到文件中等)。末行命令执行完后，Vi自动回到命令模式。例如：:set number 显示行号:set nonumber 去掉行号:set encoding 显示编码:set encoding=utf-8 设置编码如果要从命令模式转换到编辑模式，可以键入命令a或者i；如果需要从文本模式返回，则按Esc键即可。在命令模式下输入“:”即可切换到末行模式，然后输入命令。 ②、vim简图1、英文简图： 在这里插入图片描述 2、中文简图 在这里插入图片描述 二、vim基础操作vim是从 vi 发展出来的一个文本编辑器 。代码补完、编译及错误跳转等方便编程的功能特别丰富 1、进入插入模式命令（在命令模式下操作）:1i: 插入光标前一个字符 23I: 插入行首 45a: 插入光标后一个字符 67A: 插入行未 89o: 向下新开一行,插入行首 1011O: 向上新开一行,插入行首 2、进入命令模式（在文本模式或者末行模式下）:1ESC:从插入模式或末行模式进入命令模式 3、移动光标（在命令模式下操作）:1h: 左移 23j: 下移 45k: 上移 67l: 右移89M: 光标移动到屏幕中间行 1011L: 光标移动到屏幕最后一行行首 1213G: 移动到指定行,行号 G（比如移动到22行：22G）1415w: 向后一次移动一个字 1617b: 向前一次移动一个字1819&#123;: 按段移动,上移 2021&#125;: 按段移动,下移2223Ctrl+d: 向下翻半屏 2425Ctrl+u: 向上翻半屏2627Ctrl+f: 向下翻一屏 2829Ctrl+b: 向上翻一屏3031gg: 光标移动文件开头 3233G: 光标移动到文件末尾3435shift+6 光标到当前行的行首36shift+4 光标到当前行的行末 4、删除命令（在命令模式下操作）:1x: 删除当前光标一个字符,相当于 Del 23X: 删除光标前一个字符,相当于 Backspace45dd: 删除光标所在行,n dd 删除指定的行数（光标所在的行和之后的n行） D: 删除光标后本行所有内容,包含光标所在字符 67d0: 删除光标前本行所有内容,不包含光标所在字符89dw: 删除光标开始位置的字,包含光标所在字符,如果是中文，则会删除光标和光标所在的句子 5、撤销命令（在命令模式下操作）:1u: 一步一步撤销 234Ctrl+r: 反撤销 6、重复命令（在命令模式下操作）:1.: 重复上一次操作的命令 7、文本行移动（在命令模式下操作）:1&gt;&gt;: 文本行右移 23&lt;&lt;: 文本行左移 8、复制粘贴（在命令模式下操作）:1yy: 复制当前行,n yy 复制 n 行【光标之后的n行（含光标所在行）】23p: 在光标所在位置向下新开辟一行,粘贴 9、可视模式（在命令模式下操作，可整块删除、复制、移动）:1v: 按字符移动,选中文本 23V: 按行移动,选中文本可视模式可以配合 d（删除）, y（复制）, &gt;&gt;（右移）, &lt;&lt;（左移） 实现对文本块的删除,复制,左右移动 10、替换操作（在命令模式下操作）:1r: 替换当前字符 23R: 替换当前行光标后的字符 11、查找命令（在末行模式下）:1/: str查找（在shift+:进入末行模式下，然后\"/fe\",意思就是查找fe字符串）2n: 下一个（这个下查找情况下，很多结果情况下进行往下查找）3N：上一个（这个下查找情况下，很多结果情况下进行往下查找）4:set hls 打开高亮5:set nohls 关闭高亮 12、替换命令（在末行模式下）：例如：把abc全部替换成123末行模式下，将所以提议的abc替换成123 1:%s/abc/123/g 末行模式下，将第一行至第10行之间的abc替换成123 1:1, 10s/abc/123/g 13、vim里执行 shell 下命令（末行模式下）:末行模式里输入!,后面跟命令 放大缩写1ctrl - 缩小2ctrl shift + 放大 ubuntu vim tab 4个空格编辑文件 1sudo vim /etc/vim/vimrc 在最后加上 1set ts=42set expandtab3set autoindent 如果报错，将这句话换成 %retab!","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"Windows 10系统使用vmware 安装Ubuntu18.04双系统 + Ubuntu 18.04 安装 Docker-ce","slug":"6f83dcf3dfd382e33d53f60571f7481f","date":"2019-10-01T03:34:32.000Z","updated":"2019-12-02T06:45:49.673Z","comments":true,"path":"2019/10/01/6f83dcf3dfd382e33d53f60571f7481f/","link":"","permalink":"https://zhaojiafu.github.io/2019/10/01/6f83dcf3dfd382e33d53f60571f7481f/","excerpt":"","text":"说明：今天是十一假期的第一天，中午吃个饭玩玩手机，下午睡了一下午，晚上想到之前的说要把我前俩周安装Ubuntu最终成功的过程写下来，希望帮助到需要的人，也方便日子自己再需要安装或者其他的，网上搜索浪费时间。 我最终安装成功真的是费了很长的时间，因为需要安装docker测试，结果16.04一直安装不成功，也可能是我没有搜索到安装成功的命令，反正我是试了好几种安装docker的方法，没有成功，刚开始以为一直是我Ubuntu没有安装成功，然后重新安装了几次（这个安装Ubuntu也是遇到了问题，但是网上人家安装步骤没有说–需要把VMware的网络禁止，可能人家没有遇到过，或者太简单没有说的必要，但是我确实各种尝试，感觉之前听哪个同事说过一次或者很久之前的一个教程视频，但是记不住了，也弄了好久，下班回来就弄一俩个小时，大概弄了加上双休一周左右） 如果想安装其他版本步骤基本上也一样，只不过去镜像网站下载一个需要版本的Ubuntu即可。 安装全过程：我的这个步骤直接网站+截图什么的，不废话了。 一、下载VMware Workstation 15.5 Pro ：下载地址：https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html 在这里插入图片描述 下载成功直接安装，最后激活的时候可以使用永久激活秘钥即可。（这个我就不再卸载演示了，和安装其他软件一样，改个安装目录就行，后面一个激活就行了） 这个是我找到的一个激活，这个激活我也是迷糊了好久，因为之前没有弄个，参考人家博客，结果试了好几个激活一直不成功，后来才发现，人家的是VMware Workstation 14，后来找的一个，我直接复制过来粘贴这里了。参考的所有原博客连接我会统一放在结尾。 VMware Workstation 15.5 Pro 永久激活密钥 UG5J2-0ME12-M89WY-NPWXX-WQH88 GA590-86Y05-4806Y-X4PEE-ZV8E0 YA18K-0WY8P-H85DY-L4NZG-X7RAD UA5DR-2ZD4H-089FY-6YQ5T-YPRX6 B806Y-86Y05-GA590-X4PEE-ZV8E0 ZF582-0NW5N-H8D2P-0XZEE-Z22VA二、安装Ubuntu这个我就再截图演示一遍，省的你安装耽误时间，我不过多解释了，如果不懂可以留言交流，我踩坑地方肯定会解释的。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 磁盘大小20G一般够用了，如果后续不过可以修改，可以通过 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 三、下载Ubuntu1、国内几个常用的镜像源地址：1、阿里云镜像：https://opsx.alibaba.com/mirror2、清华大学镜像：https://mirrors.tuna.tsinghua.edu.cn/#3、网易的开源镜像：http://mirrors.163.com/ 2、我下载的Ubuntu18.04的下载地址：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/bionic/ubuntu-18.04.3-desktop-amd64.iso 3、俩个方法获取到自己想要的清华镜像里面的Ubuntu版本（其他镜像源自己摸索着找吧）下面我说我其他使用清华大学的镜像下载的方法（如果直接下载18.04这几步骤可以跳过，我只是想把我摸搜到的方法写出来，其他的镜像自己摸索着玩吧。）： 方法1：进去首页：https://mirrors.tuna.tsinghua.edu.cn/# 在这里插入图片描述 在这里插入图片描述 方法2：如果这个： 下载地址：https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/ 在这里插入图片描述 在这里插入图片描述 四、配置启动Ubuntu1、进入VMware 在这里插入图片描述 2、设置Ubuntu系统ISO 在这里插入图片描述 3.1、关闭VMware网络中间这里加入一个步骤：（关闭VMware网络，不然后面安装估计没有因为没有网络而出问题）1、Windows右击，进入网络连接： 在这里插入图片描述 2、禁用一些网络（和前面我们选择桥接相关）： 在这里插入图片描述 3、启动+初始化设置Ubuntu： 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 下面直接继续就行。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 记得这个快慢和上一步的禁用网络有关（当然肯定还和电脑的配置有关，肯定内存和磁盘越大越快），我也是装了好久才发现的，这个坑我也是弄了好久，偶然想到之前有人说过一次，不记得什么时候了。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 五、设置下载源（重要加快后续下载各种软件速度）设置下载源可以加快以后软件下载速度（比如使用apt-get软件时） 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 然后突然发现后面的选择最佳我就测试了一下，我上一个使用的是清华的，测试之后发现阿里云的是最佳的，然后使用测试好的，点击选择服务器即可 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 等待更新软件即可： 在这里插入图片描述 在这里插入图片描述 六、安装VMware tools工具（用来Windows和Ubuntu文件互传） 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 不重启我的不能把桌面文件直接拖到或者复制道Ubuntu里面： 七、Ubuntu 18.04 安装 Docker-ce：1.更换国内软件源，推荐中国科技大学的源，稳定速度快（可选）1sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak2sudo sed -i &#39;s&#x2F;archive.ubuntu.com&#x2F;mirrors.ustc.edu.cn&#x2F;g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list3sudo apt update 2.安装需要的包1sudo apt install apt-transport-https ca-certificates software-properties-common curl 3.添加 GPG 密钥，并添加 Docker-ce 软件源，这里还是以中国科技大学的 Docker-ce 源为例1curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -2sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot; 4.添加成功后更新软件包缓存1sudo apt update 5.安装 Docker-ce1sudo apt install docker-ce 6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）1sudo systemctl enable docker2sudo systemctl start docker 7.测试运行1sudo docker run hello-world 8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）1sudo groupadd docker2sudo usermod -aG docker $USER 9.测试添加用户组（可选）1docker run hello-world 弄了三个小时总算弄好了 参考：https://blog.csdn.net/kdongyi/article/details/82900243https://blog.csdn.net/beita08/article/details/80628840https://mirrors.tuna.tsinghua.edu.cn/#https://opsx.alibaba.com/mirrorhttp://mirrors.163.com/https://www.runoob.com/docker/ubuntu-docker-install.html","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://zhaojiafu.github.io/categories/Ubuntu/"}],"tags":[{"name":"window安装Ubuntu","slug":"window安装Ubuntu","permalink":"https://zhaojiafu.github.io/tags/window%E5%AE%89%E8%A3%85Ubuntu/"}]},{"title":"整理一些linux命令必须熟练掌握常的命令（复习+扩展学习Linux命令）","slug":"fa47655a0e5a0275481489ebfb9e99c8","date":"2019-09-30T03:34:32.000Z","updated":"2019-12-02T07:26:18.357Z","comments":true,"path":"2019/09/30/fa47655a0e5a0275481489ebfb9e99c8/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/30/fa47655a0e5a0275481489ebfb9e99c8/","excerpt":"","text":"说明：因为最近一年的工作都是使用windows系统下使用的，之前学习用过一段时间的Linux，但是没有系统的学习学习，所以打算再系统的学习下相关知识，总结一些常用的命令统计下来。 如果有想学一点基础也没有的，或者么有Linux系统环境，建议使用window电脑装个双系统，安装个Ubuntu就可以，刚开始也可以去B站去搜索一些教程或者看些菜鸟教程，也是很不错的选择，一点没有接触的建议先去找些视频看些，再去看文档比较接收的快，我之前也找了些视频看的基础讲解。 最近学习一些知识，涉及到linux，发现好多不知道咋用的了，主要因为一个项目，然后各种测试，装系统，网上搜索安装docker方法，结果我的window就是不支持，因为我的window系统删减版的，没有Hyper，公司电脑也装不上，也不想重装系统（重装代价比较大，使用虚拟机测试可以测试测试），所以家里测试装了一个Ubuntu16.04，因为之前装过一次，但是后来因为系统重装加上好久没有再安装使用了，发现16.04找了各种安装命令都无果。后来换了几个版本的Ubuntu，最终安装一个18.04版本的弄好docker了（但是还不会docker），等复习下一个知识就打算学习下docker。回头单独写个window10安装双系统的步骤和注意事项（计划放在十一期间把）。 日后有需要常用的再扩展增加博客中，如果看到这个博客的你有其他常用命令欢迎留言赐教，我也学习学习增加到博客中，欢迎一起学习沟通和交流。 一、磁盘管理①、ls命令 ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。 语法 1ls [-alrtAFR] [name...] 参数 : -a 显示所有文件及目录 (ls内定将文件名或目录名称开头为&quot;.&quot;的视为隐藏档，不会列出) -l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出 -r 将文件以相反次序显示(原定依英文字母次序) -t 将文件依建立时间之先后次序列出 -A 同 -a ，但不列出 &quot;.&quot; (目前目录) 及 &quot;..&quot; (父目录) -F 在列出的文件名称后加一符号；例如可执行档则加 &quot;*&quot;, 目录则加 &quot;/&quot; -R 若目录下有文件，则以下之文件亦皆依序列出实例列出根目录()下的所有目录： 1cd /2ls 显示： bin boot dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var显示当前目录下所有文件的权限等： 1ls -l {% image /imgs/20190930094007403.png '在这里插入图片描述' '' %} ②、cd命令(切换工作目录)cd命令用于切换当前工作目录至 dirName(目录参数)。 其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录 (也就是刚 login 时所在的目录)。 另外，”~” 也表示为 home 目录 的意思，”.” 则是表示目前所在的目录，”..” 则表示目前目录位置的上一层目录，”/“ 表示为根目录。 语法： 1cd [dirName] dirName：要切换的目标目录。实例：跳到 /usr/bin/ : 1cd /usr/bin 跳到自己的 home 目录 : 1cd ~ ③、 pwd命令pwd命令用于显示工作目录。 执行pwd指令可立刻得知您目前所在的工作目录的绝对路径名称。 语法 1pwd [--help][--version] 参数说明: --help 在线帮助。 --version 显示版本信息。实例查看当前所在目录： 1$pwd 结果，这是在home目录下： /home/zhao ④、df命令 df命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。 语法： 1df [选项]... [FILE]... 文件-a, --all 包含所有的具有 0 Blocks 的文件系统 文件--block-size={SIZE} 使用 {SIZE} 大小的 Blocks 文件-h, --human-readable 使用人类可读的格式(预设值是不加这个选项的...) 文件-H, --si 很像 -h, 但是用 1000 为单位而不是用 1024 文件-i, --inodes 列出 inode 资讯，不列出已使用 block 文件-k, --kilobytes 就像是 --block-size=1024 文件-l, --local 限制列出的文件结构 文件-m, --megabytes 就像 --block-size=1048576 文件--no-sync 取得资讯前不 sync (预设值) 文件-P, --portability 使用 POSIX 输出格式 文件--sync 在取得资讯前 sync 文件-t, --type=TYPE 限制列出文件系统的 TYPE 文件-T, --print-type 显示文件系统的形式 文件-x, --exclude-type=TYPE 限制列出文件系统不要显示 TYPE 文件-v (忽略) 文件--help 显示这个帮手并且离开 文件--version 输出版本资讯并且离开实例： 1、显示文件系统的磁盘使用情况统计： 1$df Filesystem 1K-blocks Used Available Use% Mounted on devtmpfs 1732892 0 1732892 0% /dev tmpfs 1744332 0 1744332 0% /dev/shm tmpfs 1744332 252 1744080 1% /run tmpfs 1744332 0 1744332 0% /sys/fs/cgroup /dev/vda1 61775868 23733920 34880860 41% /第一列指定文件系统的名称，第二列指定一个特定的文件系统1K-块1K是1024字节为单位的总内存。用和可用列正在使用中，分别指定的内存量。 使用列指定使用的内存的百分比，而最后一栏”安装在”指定的文件系统的挂载点 2、df也可以显示磁盘使用的文件系统信息： 1$df software/ software是当前文件目录，然后这个结果其实就是上面的最后一行数据，当前磁盘使用了41%。 3、显示所有的信息: 1$df --total Filesystem 1K-blocks Used Available Use% Mounted on devtmpfs 1732892 0 1732892 0% /dev tmpfs 1744332 0 1744332 0% /dev/shm tmpfs 1744332 252 1744080 1% /run tmpfs 1744332 0 1744332 0% /sys/fs/cgroup /dev/vda1 61775868 23735020 34879760 41% / total 68741756 23735272 41845396 37% -我们看到输出的末尾，包含一个额外的行，显示总的每一列。 4、-h选项，通过它可以产生可读的格式df命令的输出： 1$df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 1.7G 0 1.7G 0% /dev tmpfs 1.7G 0 1.7G 0% /dev/shm tmpfs 1.7G 252K 1.7G 1% /run tmpfs 1.7G 0 1.7G 0% /sys/fs/cgroup /dev/vda1 59G 23G 34G 41% /⑤、du命令du命令用于显示目录或文件的大小。 du会显示指定的目录或文件所占用的磁盘空间。 语法 1du [-abcDhHklmsSx][-L &lt;符号连接&gt;][-X &lt;文件&gt;][--block-size][--exclude=&lt;目录或文件&gt;][--max-depth=&lt;目录层数&gt;][--help][--version][目录或文件] 参数说明： -a或-all 显示目录中个别文件的大小。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 -D或--dereference-args 显示指定符号连接的源文件大小。 -h或--human-readable 以K，M，G为单位，提高信息的可读性。 -H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。 -k或--kilobytes 以1024 bytes为单位。 -l或--count-links 重复计算硬件连接的文件。 -L&lt;符号连接&gt;或--dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。 -m或--megabytes 以1MB为单位。 -s或--summarize 仅显示总计。 -S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。 -x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -X&lt;文件&gt;或--exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。 --exclude=&lt;目录或文件&gt; 略过指定的目录或文件。 --max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。 --help 显示帮助。 --version 显示版本信息。实例1、显示目录或者文件所占空间: 1$du 只显示当前目录下面的子目录的目录大小和当前目录的文件总数量，最下面的13880572为当前目录的总文件数量 太多了截图一点结尾。这个命令会把目录下所有的文件都显示出来。 在这里插入图片描述 2、不全部显示，只显示总数量 1du -s $du -s 13880572 .3、显示总数量的大小 1du -s -h $du -s -h 14G .4、显示当前目录或者文件的大小 1du -s -h software/ $du -s -h software/ 172M software/⑥、mkdir命令（创建文件夹）mkdir命令用于建立名称为 dirName 之子目录。 语法 1mkdir [-p] dirName 参数说明： -p 确保目录名称存在，不存在的就建一个。实例:1、在当前工作目录下，建立一个名为 zhao的子目录 : 1mkdir zhao 2、在工作目录下的 zhao2 目录中，建立一个名为 zhao1 的子目录。 若 zhao2 目录原本不存在，则建立一个。（注：本例若不加 -p，且原本 BBB目录不存在，则产生错误。） 不加p报错 1$mkdir ./zhao2/zhao12mkdir: cannot create directory ‘./zhao2/zhao1’: No such file or directory 加-p创建成功 1$mkdir -p ./zhao2/zhao1 ⑦、stat命令 stat命令用于显示inode内容。 stat以文字的格式来显示inode的内容。 语法 1stat [文件或目录] 实例查看当前目录下 zufang2.txt 文件的inode内容内容，可以用以下命令： 1$stat zufang2.txt2 File: ‘zufang2.txt’3 Size: 14202 Blocks: 32 IO Block: 4096 regular file4Device: fd01h/64769d Inode: 2359881 Links: 15Access: (0664/-rw-rw-r--) Uid: (1329303/wb-zjf497303) Gid: ( 100/ users)6Access: 2019-09-30 09:32:33.240221082 +08007Modify: 2019-09-30 09:32:24.775983506 +08008Change: 2019-09-30 09:32:24.779983619 +08009 Birth: - ⑧、输出重定向命令 &lt; 和 &lt;&lt;Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。如：ls &gt; test.txt ( test.txt 如果不存在，则创建，存在则覆盖其内容 ) 注意： &gt;输出重定向会覆盖原来的内容，&gt;&gt;输出重定向则会追加到文件的尾部。 ⑨、清屏：clearclear作用为清除终端上的显示(类似于DOS的cls清屏功能)， 也可使用快捷键：Ctrl + l ( “l” 为字母 )。 二、文件管理①、cat（cat: concatenate 连锁）cat命令连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。 注意：当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用more等命令分屏显示。为了控制滚屏，可以按Ctrl+S键，停止滚屏；按Ctrl+Q键可以恢复滚屏。按Ctrl+C（中断）键可以终止该命令的执行，并且返回Shell提示符状态。 语法格式 1cat [-AbeEnstTuv] [--help] [--version] fileName 参数说明： 1-n 或 --number：由 1 开始对所有输出的行数编号。23-b 或 --number-nonblank：和 -n 相似，只不过对于空白行不编号。45-s 或 --squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。67-v 或 --show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。89-E 或 --show-ends : 在每行结束处显示 $。1011-T 或 --show-tabs: 将 TAB 字符显示为 ^I。1213-A, --show-all：等价于 -vET。1415-e：等价于&quot;-vE&quot;选项；1617-t：等价于&quot;-vT&quot;选项； 实例： 把 zufang.txt的文档内容加上行号后输入 zufang2.txt 这个文档里： 1cat -n zufang.txt &gt; zufang2.txt 把 zufang.txt 和zufang2.txt的文档内容加上行号（空白行不加）之后将内容附加到 zufang3.txt 文档里： 1cat -b zufang.txt zufang2.txt &gt;&gt; zufang3.txt 清空 /etc/test.txt 文档内容： 1cat /dev/null &gt; /etc/test.txt cat 也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入： 1cat /dev/fd0 &gt; OUTFILE ②、chattr命令Linux chattr命令用于改变文件属性。 这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式： 1a：让文件或目录仅供附加用途。2b：不更新文件或目录的最后存取时间。3c：将文件或目录压缩后存放。4d：将文件或目录排除在倾倒操作之外。5i：不得任意更动文件或目录。6s：保密性删除文件或目录。7S：即时更新文件或目录。8u：预防意外删除 语法 1chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录...] 参数 1-R 递归处理，将指定目录下的所有文件及子目录一并处理。23 -v&lt;版本编号&gt; 设置文件或目录版本。45 -V 显示指令执行过程。67 +&lt;属性&gt; 开启文件或目录的该项属性。89 -&lt;属性&gt; 关闭文件或目录的该项属性。1011 =&lt;属性&gt; 指定文件或目录的该项属性。 实例用chattr命令防止系统中某个关键文件被修改： 1chattr +i zufang.txt2lsattr zufang.txt 会显示如下属性 1chattr: Operation not permitted while setting flags on zufang.txt23--------------e---- zufang.txt ③、chmod命令chmod命令用来变更文件或目录的权限。在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用chmod指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。语法 1chmod [-cfvR] [--help] [--version] mode file... 参数说明 1mode : 权限设定字串，格式如下 :23[ugoa...][[+-=][rwxX]...][,...]4其中：56u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。7+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。8r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。 其他参数说明： 1-c : 若该文件权限确实已经更改，才显示其更改动作2-f : 若该文件权限无法被更改也不要显示错误讯息3-v : 显示权限变更的详细资料4-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)5--help : 显示辅助说明6--version : 显示版本 实例：将文件 zufang.txt 设为所有人皆可读取 : 1chmod ugo+r zufang.txt 将文件 zufang.txt 设为所有人皆可读取 : 1chmod a+r zufang.txt 将文件 zufang.txt 与 zufang2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 : 1chmod ug+w,o-w zufang.txt zufang2.txt 将 zufang3.txt 设定为只有该文件拥有者可以执行 : 1chmod u+x zufang3.txt 将目前目录下的所有文件与子目录皆设为任何人可读取 : 1chmod -R a+r * 此外chmod也可以用数字来表示权限如 : 1chmod 777 file 数字语法为：1chmod abc file 其中a,b,c各为一个数字，分别表示User、Group、及Other的权限r=4，w=2，x=1若要rwx属性则4+2+1=7；若要rw-属性则4+2=6；若要r-x属性则4+1=5。 1chmod a=rwx file23chmod 777 file4效果相同 1chmod ug=rwx,o=x file23chmod 771 file4效果相同 ④、file命令file命令用来探测给定文件的类型。file命令对文件的检查分为文件系统、魔法幻数检查和语言检查3个过程。 语法 1file [-bcLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...] 参数： -b 列出辨识结果时，不显示文件名称。-c 详细显示指令执行过程，便于排错或分析程序执行的情形。-f&lt;名称文件&gt; 指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。-L 直接显示符号连接所指向的文件的类别。-m&lt;魔法数字文件&gt; 指定魔法数字文件。-v 显示版本信息。-z 尝试去解读压缩文件的内容。 [文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。 实例显示文件类型： 1file zufang.txt2zufang.txt: UTF-8 Unicode (with BOM) text, with CRLF line terminators 不显示文件名称 1file -b zufang.txt2UTF-8 Unicode (with BOM) text, with CRLF line terminators 显示MIME类别 1file -i zufang.txt2zufang.txt: text/plain; charset=utf-8 ⑤、find命令Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 参数说明 : find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。 expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。 1-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件23-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写 45-maxdepth n 代表的做大往下找的深度（最多进入n层子文件夹去查找）67-exec&lt;执行指令&gt; \\;：假设find指令的回传值为True，就执行该指令；记得命令后面要配合`\\;`89-amin n : 在过去 n 分钟内被读取过1011-anewer file : 比文件 file 更晚被读取过的文件1213-atime n : 在过去n天内被读取过的文件1415-cmin n : 在过去 n 分钟内被修改过1617-cnewer file :比文件 file 更新的文件1819-ctime n : 在过去n天内被修改过的文件2021-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name2223-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写2425-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。 实例将目前目录及其子目录下所有延伸档名是 c 的文件列出来。 1find . -name \"*.c\" 将目前目录其其下子目录中所有一般文件列出 1find . -type f 将目前目录及其子目录下所有最近 20 天内更新过的文件列出 1find . -ctime -20 查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们： 1find /var/log -type f -mtime +7 -ok rm &#123;&#125; \\; 查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件： 1find . -type f -perm 644 -exec ls -l &#123;&#125; \\; 为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径： 1find / -type f -size 0 -exec ls -l &#123;&#125; \\; ⑥、more命令more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more名单中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。 语法 1more [-dlfpcsu] [-num] [+/pattern] [+linenum] [fileNames..] 参数： -num 一次显示的行数-d 提示使用者，在画面下方显示 [Press space to continue, ‘q’ to quit.] ，如果使用者按错键，则会显示 [Press ‘h’ for instructions.] 而不是 ‘哔’ 声-l 取消遇见特殊字元 ^L（送纸字元）时会暂停的功能-f 计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）-p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容-c 跟 -p 相似，不同的是先显示内容再清除其他旧资料-s 当遇到有连续两行以上的空白行，就代换为一行的空白行-u 不显示下引号 （根据环境变数 TERM 指定的 terminal 而有所不同）+/pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示+num 从第 num 行开始显示 fileNames 欲显示内容的文档，可为复数个数 快捷键： 1按Space键：显示文本的下一屏内容。 2按Enier键：向下n行，需要定义。默认为1行。3按斜线符|：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。4按H键：显示帮助屏，该屏上有相关的帮助信息。5按B键：显示上一屏内容。6按Q键：退出rnore命令7Ctrl+F 向下滚动一8Ctrl+B 返回上一9= 输出当前行的行10：f 输出文件名和当前行的行号11V 调用vi编辑器12!命令 调用Shell，并执行命令 ⑦、mv命令mv命令用来为文件或目录改名、或将文件或目录移入其它位置。 mv命令可以用来将源文件移至一个目标文件中，或将一组文件移至一个目标目录中。源文件被移至目标文件有两种不同的结果： 注意事项： 如果目标文件是到某一目录文件的路径，源文件会被移到此目录下，且文件名不变。如果目标文件不是目录文件，则源文件名（只能有一个）会变为此目标文件名，并覆盖己存在的同名文件。如果源文件和目标文件在同一个目录下，mv的作用就是改文件名。当目标文件是目录文件时，源文件或目录参数可以有多个，则所有的源文件都会被移至目标文件中。所有移到该目录下的文件都将保留以前的文件名。注意事项：mv与cp的结果不同，mv好像文件“搬家”，文件个数并未增加。而cp对文件进行复制，文件个数增加了。 语法： 1mv [options] source dest source表示源文件或目录，target表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖。 参数： -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件;-f: 在mv操作要覆盖某已有的目标文件时不给任何指示; 实例：将文件 aaa 更名为 bbb : 1mv aaa bbb 将info目录放入logs目录中。注意，如果logs目录不存在，则该命令将info改名为logs。 1mv info/ logs 再如将/usr/student下的所有文件和目录移到当前目录下，命令行为： 1mv /usr/student/* . ⑧、rm命令rm命令可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。 注意： 使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。 语法 1rm [options] name... 参数： -i 删除前逐一询问确认。-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。-r 将目录及以下之档案亦逐一删除。 案例： 删除当前目录下的所有文件及目录，并且是直接删除，无需逐一确认命令行为：（使用前注意是否需要删除或者备份一份？无法恢复） 1rm -rf 要删除的文件名或目录 删除文件名 test.txt: 1rm -rf test.txt 删除目录 test，不管该目录下是否有子目录或文件，都直接删除: 1rm -rf test/ ⑨、cp命令cp主要用于复制文件或目录。语法 1cp [options] source dest 参数说明： -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。 -d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。 -f：覆盖已经存在的目标文件而不给出提示。 -i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答&quot;y&quot;时目标文件将被覆盖。 -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。 -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。 -l：不复制文件，只是生成链接文件。实例使用指令”cp”将当前目录”test/“下的所有文件复制到新目录”newtest”下，输入如下命令： 1cp –r test/ newtest 注意：用户使用该指令复制目录时，必须使用参数”-r”或者”-R”。 ⑩、whereis命令whereis命令用于查找文件。 该指令会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件。 该指令只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。 语法 1whereis [-bfmsu][-B &lt;目录&gt;...][-M &lt;目录&gt;...][-S &lt;目录&gt;...][文件...] 参数： -b 只查找二进制文件。 -B&lt;目录&gt; 只在设置的目录下查找二进制文件。 -f 不显示文件名前的路径名称。 -m 只查找说明文件。 -M&lt;目录&gt; 只在设置的目录下查找说明文件。 -s 只查找原始代码文件。 -S&lt;目录&gt; 只在设置的目录下查找原始代码文件。 -u 查找不包含指定类型的文件。实例使用指令”whereis”查看指令”bash”的位置，输入如下命令： 1whereis bash 上面的指令执行后，输出信息如下所示： bash: /usr/bin/bash /usr/share/man/man1/bash.1.gz1whereis python2.7 上面的指令执行后，输出信息如下所示： python2: /usr/bin/python2.7 /usr/bin/python2.7-config /usr/bin/python2 /usr/lib/python2.7 /usr/lib64/python2.7 /usr/include/python2.7 /usr/local/python2.7 /usr/share/man/man1/python2.1.gz⑪、ln命令（文件链接）linux链接文件类似于Windows下的快捷方式。链接文件分为软链接和硬链接。软链接：软链接不占用磁盘空间，源文件删除则软链接失效。硬链接：硬链接只能链接普通文件，不能链接目录。使用格式： 1ln 源文件 链接文件2ln -s 源文件 链接文件 如果没有-s选项代表建立一个硬链接文件，两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在，所以-s选项是更常见的形式。 注意： 如果软链接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径。 选项： -b或--backup：删除，覆盖目标文件之前的备份； -d或-F或——directory：建立目录的硬连接； -f或——force：强行建立文件或目录的连接，不论文件或目录是否存在； -i或——interactive：覆盖既有文件之前先询问用户； -n或--no-dereference：把符号连接的目的目录视为一般文件； -s或——symbolic：对源文件建立符号连接，而非硬连接； -S&lt;字尾备份字符串&gt;或--suffix=&lt;字尾备份字符串&gt;：用&quot;-b&quot;参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，预设的备份字符串是符号“~”，用户可通过“-S”参数来改变它； -v或——verbose：显示指令执行过程； -V&lt;备份方式&gt;或--version-control=&lt;备份方式&gt;：用“-b”参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用“-S”参数变更，当使用“-V”参数&lt;备份方式&gt;指定不同备份方式时，也会产生不同字尾的备份字符串； --help：在线帮助； --version：显示版本信息。参数：源文件：指定连接的源文件。如果使用-s选项创建符号连接，则“源文件”可以是文件或者目录。创建硬连接时，则“源文件”参数只能是文件；目标文件：指定源文件的目标连接文件。实例将目录/usr/mengqc/mub1下的文件m2.c链接到目录/usr/zhao下的文件a2.c 1cd /usr/mengqc 1ln /mub1/m2.c /usr/zhao/a2.c 在执行ln命令之前，目录/usr/zhao中不存在a2.c文件。执行ln之后，在/usr/zhao目录中才有a2.c这一项，表明m2.c和a2.c链接起来（注意，二者在物理上是同一文件），利用ls -l命令可以看到链接数的变化。 在目录/usr/zhao下建立一个符号链接文件abc，使它指向目录/usr/mengqc/mub1 1ln -s /usr/mengqc/mub1 /usr/zhao/abc 执行该命令后，/usr/mengqc/mub1代表的路径将存放在名为/usr/zhao/abc的文件中。 ⑫、which（在path中查找文件）which命令用于查找文件。 which指令会在环境变量$PATH设置的目录里查找符合条件的文件。 语法 1which [文件...] 参数： -n&lt;文件名长度&gt; 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。 -p&lt;文件名长度&gt; 与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。 -w 指定输出时栏位的宽度。 -V 显示版本信息。实例使用指令”which”查看指令”python”的绝对路径，输入如下命令： 1which python 返回结果： /usr/bin/python三、文档编辑①、grep 命令（文本查找）grep 命令用于查找文件里符合条件的字符串。 grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。 语法 1grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...] 参数： -a 或 --text : 不要忽略二进制的数据。 -A&lt;显示行数&gt; 或 --after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。 -b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。 -B&lt;显示行数&gt; 或 --before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。 -c 或 --count : 计算符合样式的列数。 -C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。 -d &lt;动作&gt; 或 --directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。 -e&lt;范本样式&gt; 或 --regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。 -E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。 -f&lt;规则文件&gt; 或 --file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。 -F 或 --fixed-regexp : 将样式视为固定字符串的列表。 -G 或 --basic-regexp : 将样式视为普通的表示法来使用。 -h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。 -H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。 -i 或 --ignore-case : 忽略字符大小写的差别。 -l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。 -L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。 -n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。 -o 或 --only-matching : 只显示匹配PATTERN 部分。 -q 或 --quiet或--silent : 不显示任何信息。 -r 或 --recursive : 此参数的效果和指定&quot;-d recurse&quot;参数相同。 -s 或 --no-messages : 不显示错误信息。 -v 或 --revert-match : 显示不包含匹配文本的所有行。 -V 或 --version : 显示版本信息。 -w 或 --word-regexp : 只显示全字符合的列。 -x --line-regexp : 只显示全列符合的列。 -y : 此参数的效果和指定&quot;-i&quot;参数相同。匹配文本参数 在这里插入图片描述 实例 1、在当前目录中，查找后缀有 txt字样的文件中包含zhihu 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： 1grep zhihu *txt 在这里插入图片描述 2、以递归的方式查找符合条件的文件。例如，查找指定目录/etc/pki/ 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容，使用的命令为： 1grep -r update /etc/pki/ 在这里插入图片描述 3、反向查找。前面各个例子是查找并打印出符合条件的行，通过”-v”参数可以打印出不符合条件行的内容。 查找文件名中包含 zu的文件中不包含每天 的行，此时，使用的命令为： 1grep -v 每天 *zu* 在这里插入图片描述 ②、==wc (新增)==Linux wc命令用于计算字数、行数。 利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则wc指令会从标准输入设备读取数据。语法 1wc [-clw][--help][--version][文件...] 参数： - 1c或--bytes或--chars 只显示Bytes数。2-l或--lines 只显示行数。3-w或--words 只显示字数。4--help 在线帮助。5--version 显示版本信息 实例在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。使用的命令为： 1、使用cat查看文本内容： 1cat name.txt 在这里插入图片描述 2、wc 统计文件信息 1wc name.txt 结果截图： 在这里插入图片描述 其中，返回有四个参数：2代表有2行，7代表有7个单词数，44代表字节。name.txt就是文件名。中文如果在一起，就被识别为一个单词。更改后： 在这里插入图片描述 结果依然是7个单词。 在这里插入图片描述 好像只能识别空格，进行分开统计的。 在这里插入图片描述 ==③、sort（排序，新增）== sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。 语法 1sort(选项)(参数) 选项 1-b：忽略每行前面开始出的空格字符；2-c：检查文件是否已经按照顺序排序；3-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；4-f：排序时，将小写字母视为大写字母；5-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；6-m：将几个排序号的文件进行合并；7-M：将前面3个字母依照月份的缩写进行排序；8-n：依照数值的大小排序；9-o&lt;输出文件&gt;：将排序后的结果存入制定的文件；10-r：以相反的顺序来排序；11-t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；12+&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。 参数 1文件：指定待排序的文件列表。 实例： 1a#10#1#12c#30#3#33d#40#4#44b#20#2#25e#50#5#56e#50#5#5 1、直接sort默认排序。 1$sort sort.txt2a#10#1#13b#20#2#24c#30#3#35d#40#4#46e#50#5#57e#50#5#5 2、忽略相同行使用-u选项或者uniq 1$sort -u sort.txt2a#10#1#13b#20#2#24c#30#3#35d#40#4#46e#50#5#5 1$uniq sort.txt2a#10#1#13c#30#3#34d#40#4#45b#20#2#26e#50#5#5 3、sort的-n、-r、-k、-t选项的使用： 将第二列（按#为分隔符）列按照数字从小到大顺序排列： 1$sort -nk 2 -t# sort.txt2a#10#1#13b#20#2#24c#30#3#35d#40#4#46e#50#5#57e#50#5#5 将第3列（按#为分隔符）列按照数字从小到大顺序排列： 1$sort -nk 3 -t# sort.txt2a#10#1#13b#20#2#24c#30#3#35d#40#4#46e#50#5#57e#50#5#5 新建sort2.txt： 1$cat sort2.txt2#10#3.53c#30#2.14d#40#7.85b#20#5.66e#50#17e#50#8 按最后一列从小到大排序： 1$sort -nk 3 -t# sort2.txt2e#50#13c#30#2.14#10#3.55b#20#5.66d#40#7.87e#50#8 按最后一列从大到小排序：-n是按照数字大小排序，-r是以相反顺序，-k是指定需要爱排序的栏位，-t指定栏位分隔符为冒号 1$sort -nrk 3 -t# sort2.txt2e#50#83d#40#7.84b#20#5.65#10#3.56c#30#2.17e#50#1 四、压缩命令1、tar命令tar命令用于备份文件。 tar是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。 语法 1tar [-ABcdgGhiklmMoOpPrRsStuUvwWxzZ][-b &lt;区块数目&gt;][-C &lt;目的目录&gt;][-f &lt;备份文件&gt;][-F &lt;Script文件&gt;][-K &lt;文件&gt;][-L &lt;媒体容量&gt;][-N &lt;日期时间&gt;][-T &lt;范本文件&gt;][-V &lt;卷册名称&gt;][-X &lt;范本文件&gt;][-&lt;设备编号&gt;&lt;存储密度&gt;][--after-date=&lt;日期时间&gt;][--atime-preserve][--backuup=&lt;备份方式&gt;][--checkpoint][--concatenate][--confirmation][--delete][--exclude=&lt;范本样式&gt;][--force-local][--group=&lt;群组名称&gt;][--help][--ignore-failed-read][--new-volume-script=&lt;Script文件&gt;][--newer-mtime][--no-recursion][--null][--numeric-owner][--owner=&lt;用户名称&gt;][--posix][--erve][--preserve-order][--preserve-permissions][--record-size=&lt;区块数目&gt;][--recursive-unlink][--remove-files][--rsh-command=&lt;执行指令&gt;][--same-owner][--suffix=&lt;备份字尾字符串&gt;][--totals][--use-compress-program=&lt;执行指令&gt;][--version][--volno-file=&lt;编号文件&gt;][文件或目录...] 参数： -A或--catenate 新增文件到已存在的备份文件。 -b&lt;区块数目&gt;或--blocking-factor=&lt;区块数目&gt; 设置每笔记录的区块数目，每个区块大小为12Bytes。 -B或--read-full-records 读取数据时重设区块大小。 -c或--create 建立新的备份文件。 -C&lt;目的目录&gt;或--directory=&lt;目的目录&gt; 切换到指定的目录。 -d或--diff或--compare 对比备份文件内和文件系统上的文件的差异。 -f&lt;备份文件&gt;或--file=&lt;备份文件&gt; 指定备份文件。 -F&lt;Script文件&gt;或--info-script=&lt;Script文件&gt; 每次更换磁带时，就执行指定的Script文件。 -g或--listed-incremental 处理GNU格式的大量备份。 -G或--incremental 处理旧的GNU格式的大量备份。 -h或--dereference 不建立符号连接，直接复制该连接所指向的原始文件。 -i或--ignore-zeros 忽略备份文件中的0 Byte区块，也就是EOF。 -k或--keep-old-files 解开备份文件时，不覆盖已有的文件。 -K&lt;文件&gt;或--starting-file=&lt;文件&gt; 从指定的文件开始还原。 -l或--one-file-system 复制的文件或目录存放的文件系统，必须与tar指令执行时所处的文件系统相同，否则不予复制。 -L&lt;媒体容量&gt;或-tape-length=&lt;媒体容量&gt; 设置存放每体的容量，单位以1024 Bytes计算。 -m或--modification-time 还原文件时，不变更文件的更改时间。 -M或--multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。 -N&lt;日期格式&gt;或--newer=&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里。 -o或--old-archive或--portability 将资料写入备份文件时使用V7格式。 -O或--stdout 把从备份文件里还原的文件输出到标准输出设备。 -p或--same-permissions 用原来的文件权限还原文件。 -P或--absolute-names 文件名使用绝对名称，不移除文件名称前的&quot;/&quot;号。 -r或--append 新增文件到已存在的备份文件的结尾部分。 -R或--block-number 列出每个信息在备份文件中的区块编号。 -s或--same-order 还原文件的顺序和备份文件内的存放顺序相同。 -S或--sparse 倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。 -t或--list 列出备份文件的内容。 -T&lt;范本文件&gt;或--files-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让tar解开或建立符合设置条件的文件。 -u或--update 仅置换较备份文件内的文件更新的文件。 -U或--unlink-first 解开压缩文件还原文件之前，先解除文件的连接。 -v或--verbose 显示指令执行过程。 -V&lt;卷册名称&gt;或--label=&lt;卷册名称&gt; 建立使用指定的卷册名称的备份文件。 -w或--interactive 遭遇问题时先询问用户。 -W或--verify 写入备份文件后，确认文件正确无误。 -x或--extract或--get 从备份文件中还原文件。 -X&lt;范本文件&gt;或--exclude-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让ar排除符合设置条件的文件。 -z或--gzip或--ungzip 通过gzip指令处理备份文件。 -Z或--compress或--uncompress 通过compress指令处理备份文件。 -&lt;设备编号&gt;&lt;存储密度&gt; 设置备份用的外围设备编号及存放数据的密度。 --after-date=&lt;日期时间&gt; 此参数的效果和指定&quot;-N&quot;参数相同。 --atime-preserve 不变更文件的存取时间。 --backup=&lt;备份方式&gt;或--backup 移除文件前先进行备份。 --checkpoint 读取备份文件时列出目录名称。 --concatenate 此参数的效果和指定&quot;-A&quot;参数相同。 --confirmation 此参数的效果和指定&quot;-w&quot;参数相同。 --delete 从备份文件中删除指定的文件。 --exclude=&lt;范本样式&gt; 排除符合范本样式的文件。 --group=&lt;群组名称&gt; 把加入设备文件中的文件的所属群组设成指定的群组。 --help 在线帮助。 --ignore-failed-read 忽略数据读取错误，不中断程序的执行。 --new-volume-script=&lt;Script文件&gt; 此参数的效果和指定&quot;-F&quot;参数相同。 --newer-mtime 只保存更改过的文件。 --no-recursion 不做递归处理，也就是指定目录下的所有文件及子目录不予处理。 --null 从null设备读取文件名称。 --numeric-owner 以用户识别码及群组识别码取代用户名称和群组名称。 --owner=&lt;用户名称&gt; 把加入备份文件中的文件的拥有者设成指定的用户。 --posix 将数据写入备份文件时使用POSIX格式。 --preserve 此参数的效果和指定&quot;-ps&quot;参数相同。 --preserve-order 此参数的效果和指定&quot;-A&quot;参数相同。 --preserve-permissions 此参数的效果和指定&quot;-p&quot;参数相同。 --record-size=&lt;区块数目&gt; 此参数的效果和指定&quot;-b&quot;参数相同。 --recursive-unlink 解开压缩文件还原目录之前，先解除整个目录下所有文件的连接。 --remove-files 文件加入备份文件后，就将其删除。 --rsh-command=&lt;执行指令&gt; 设置要在远端主机上执行的指令，以取代rsh指令。 --same-owner 尝试以相同的文件拥有者还原文件。 --suffix=&lt;备份字尾字符串&gt; 移除文件前先行备份。 --totals 备份文件建立后，列出文件大小。 --use-compress-program=&lt;执行指令&gt; 通过指定的指令处理备份文件。 --version 显示版本信息。 --volno-file=&lt;编号文件&gt; 使用指定文件内的编号取代预设的卷册编号。常用示例：1、将文件全部打包成tar包： 1tar -cvf log.tar log2012.log 仅打包，不压缩！ 2tar -zcvf log.tar.gz log2012.log 打包后，以 gzip 压缩（常用） 3tar -jcvf log.tar.bz2 log2012.log 打包后，以 bzip2 压缩 2、列出压缩文件内容 1$tar -ztvf test1.tar.gz2-rw-rw-r-- wb-zjf497303/users 14202 2019-09-30 09:32 zufang2.txt 3、解压文件 1$tar -zxvf test1.tar.gz zufang2.txt会自动解压文件到当前目录，会生成一个zufang2.txt文件 2、rar压缩解压缩安装 Ubuntu安装 1sudo apt-get install rar unrar linux 安装： 或者可从http://www.rarsoft.com/download.htm下载 RAR for Linux 编译安装 # tar -xzpvf rarlinux-3.8.0.tar.gz # cd rar # make这样就安装好了，安装之后就有了rar和unrar这两个程序，rar是压缩程序，unrar是解压程序。它们的参数选项很多，可用命令rar -help和unrar -help查看。 压缩：rar a [目标文件名].rar [原文件名/目录名]解压：unrar e [原文件名].rar 实例：将test.jpg和test.png压缩成一个rar包：rar a test.rar test.jpg test.png将所有.jpg的文件压缩成一个rar包：rar a test.rar *.jpg将文件夹test压缩成一个rar包：rar a test.rar test将test.rar中的所有文件解压出来：unrar e test.rar 3、7z压缩解压缩参数含义： x 代表解压缩文件，并且是按原始目录树解压 -r 表示递归解压缩所有的子文件夹 -o 是指定解压到的目录，-o后是没有空格的，直接接目录。这一点需要注意。 a 代表添加文件／文件夹到压缩包 -t 是指定压缩类型，这里定为7z，可不指定，因为7za默认压缩类型就是7z。 -r 表示递归所有的子文件夹压缩：7z a [目标文件名].7z [原文件名/目录名]解压：7z x [原文件名].7z 实例：解压到指定当前目录文件夹demo下 17za x chrysanthemum_test_images.7z -r -o./demo 将filename.7z解压到当前目录： 17z x filename.7z -r -o./ 将当前目录下的所有文件压缩成test.7z文件： 17z a -t7z -r test.7z ./* 4、zip压缩解压缩linux下提供了zip和unzip程序，zip是压缩程序，unzip是解压程序。它们的参数选项很多，可用命令zip -help和unzip -help查看，这里只做简单介绍。 压缩： zip -r [目标文件名].zip [原文件/目录名]解压： unzip [原文件名].zip 实例：将test.jpg和test.png压缩成一个zip包：zip test.zip test.jpg test.png将所有.jpg的文件压缩成一个zip包：zip test.zip *.jpg将文件夹test压缩成一个zip包：zip -r test.zip test将test.zip中的所有文件解压出来：unzip test.zip将/home目录下面的mydata目录压缩为mydata.zip： 1zip -r mydata.zip mydata 将/home目录下面的mydata.zip解压到mydatabak目录里面： 1unzip mydata.zip -d mydatabak 5、7za7z，全称7-Zip，是一款开源软件，目前公认压缩比例最大的压缩解压软件。 centos安装， 1yum -y install p7zip 或者编译安装： 1wget http://nchc.dl.sourceforge.net/sourceforge/p7zip/p7zip_4.65_src_all.tar.bz22tar -xjvf p7zip_4.65_src_all.tar.bz23cd p7zip_4.654make5make install 主要特征： 全新的LZMA算法，加大7z压缩比 支持格式：压缩：7z，XZ,BZIP2,GZIP,TAR,ZIP 解压：ARJ,CAB,CHM,CPIO,DEB,DMG,FAT,HFS,ISO,LZH,LZMA,MBR,MSI,NAIS,NTFS,RAR,RPM,UDF,VHD,WIM,XAR,Z 退出代码： 0 正常 1 告警，没有致命错误。例如某些文件正在被使用，没有被压缩 2 致命问题 7 命令行错误 8 没有足够内存 255 用户停止操作使用： 然后说命令 最简单实用的压缩命令： 17za a /home/web.7z /home/wwwroot 将/home/wwwroot 打包压缩为 web.7z 放在home目录里面 解压缩的话 17za e src_fil command操作命令： a 添加到压缩文件 b 基准测试，测试7z当前性能 d 从压缩文件中删除 e 从压缩文件中解压缩，但不包含目录结构（即所有各级文件都解压到一个目录里） l 列出压缩文件的内容 t 测试压缩文件 u 更新文件到压缩文件 x 从压缩文件中解压缩，包含目录结构可见，最常用的指令是a, l和x. 1、压缩a.txt和b.txt到c.7z: 17za a c.7z a.txt b.txt （命令a后的第一个为目标压缩文档名，然后是文件列表） 2、压缩a.txt和b.txt到/home/www/c.7z: 17za a /home/www/c.7z a.txt b.txt （目录名包含空格，用引号）3、列出c.7z的内容： 17za l c.7z 4、解压缩c.7z到/home/www: 17za x c.7z -o/home/www （-o表示输出目录，其与目录路径之间没有空格）这样解压包含下级目录名，但不会在/home/www下新建一个c文件夹，如果需要，就把输出目录设为/home/www/c，这样会自动创建文件夹c。如果要生成zip压缩包，可以直接将目标压缩包名设为c.zip，则它会自动使用zip算法压缩。 五、Linux命令-用户、权限管理1、查看当前用户：whoamiwhoami该命令用户查看当前系统当前账号的用户名。可通过cat /etc/passwd查看系统用户信息。由于系统管理员通常需要使用多种身份登录系统，例如通常使用普通用户登录系统，然后再以su命令切换到root身份对传统进行管理。这时候就可以使用whoami来查看当前用户的身份。 2、查看登录用户：who语法 1who - [husfV] [user] 参数说明： -H 或 --heading：显示各栏位的标题信息列； -i 或 -u 或 --idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成&quot;.&quot;号，如果该用户已超过24小时没有任何动作，则标示出&quot;old&quot;字符串； -m：此参数的效果和指定&quot;am i&quot;字符串相同； -q 或--count：只显示登入系统的帐号名称和总人数； -s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题； -w 或-T或--mesg或--message或--writable：显示用户的信息状态栏； --help：在线帮助； --version：显示版本信息。实例1、显示当前登录系统的用户 1$who2zhao pts/0 2019-09-29 14:04 (123.8.10.1) 2、显示标题栏 1$who -H2NAME LINE TIME COMMENT3zhao pts/0 2019-09-29 14:04 (123.8.10.1) 3、显示用户登录来源 1$who -l -H2NAME LINE TIME IDLE PID COMMENT3LOGIN ttyS0 2019-06-19 17:32 567 id=tyS04LOGIN tty1 2019-06-19 17:32 568 id=tty1 4、显示终端属性 1$who -T -H2NAME LINE TIME COMMENT3zhao + pts/0 2019-09-29 14:04 (123.8.10.1) 5、只显示当前用户 1$who -m -H2NAME LINE TIME COMMENT3zhao pts/0 2019-09-29 14:04 (123.8.10.1) 6、精简模式显示 1$who -q2zhao 3# users=1 3、退出登录账户： exit如果是图形界面，退出当前终端；如果是使用ssh远程登录，退出登陆账户；如果是切换后的登陆用户，退出则返回上一个登陆账号。 4、添加用户账号：useradd在Unix/Linux中添加用户账号可以使用adduser或useradd命令，因为adduser命令是指向useradd命令的一个链接，因此，这两个命令的使用格式完全一样。useradd命令的使用格式如下： useradd [参数] 新建用户账号 在这里插入图片描述 相关说明： • Linux每个用户都要有一个主目录，主目录就是第一次登陆系统，用户的默认当前目录(/home/用户)；• 每一个用户必须有一个主目录，所以用useradd创建用户的时候，一定给用户指定一个主目录；• 用户的主目录一般要放到根目录的home目录下，用户的主目录和用户名是相同的；• 如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。 在这里插入图片描述 5、设置用户密码：passwd在Unix/Linux中，超级用户可以使用passwd命令为普通用户设置或修改用户口令。用户也可以直接使用该命令来修改自己的口令，而无需在命令后面使用用户名。 在这里插入图片描述 6、删除用户：userdel 在这里插入图片描述 1userdel -r laowang 7、切换用户：su可以通过su命令切换用户，su后面可以加“-”。su和su –命令不同之处在于，su -切换到对应的用户时会将当前的工作目录自动转换到切换后的用户主目录。 注意： 如果是ubuntu平台，需要在命令前加“sudo”，如果在某些操作需要管理员才能操作，ubuntu无需切换到root用户即可操作，只需加“sudo”即可。sudo是ubuntu平台下允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，减少了root 用户的登陆和管理时间，提高了安全性。 在这里插入图片描述 Ubuntu下切换到root的简单命令: 在这里插入图片描述 8、查看有哪些用户组1cat /etc/group 9、添加、删除组账号：groupadd、groupdelgroupadd 新建组账号 groupdel 组账号 cat /etc/group 查看用户组10、修改用户所在组：usermod1usermod -g 用户组 用户名 11、查看用户在哪些组1groups laowang 12、为创建的普通用户添加sudo权限新创建的用户，默认不能sudo，需要进行一下操作（sudo账户下使用命令） 1sudo usermod -a -G adm 用户名2sudo usermod -a -G sudo 用户名 六、Linux命令-系统管理1、ifconfig（显示网络设备） ifconfig命令用于显示或设置网络设备（类似于window的ipconfig，我一般常用也就查个ip地址）。 ifconfig可设置网络设备的状态，或是显示目前的设置。 语法 1ifconfig [网络设备][down up -allmulti -arp -promisc][add&lt;地址&gt;][del&lt;地址&gt;][&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;][io_addr&lt;I/O地址&gt;][irq&lt;IRQ地址&gt;][media&lt;网络媒介类型&gt;][mem_start&lt;内存地址&gt;][metric&lt;数目&gt;][mtu&lt;字节&gt;][netmask&lt;子网掩码&gt;][tunnel&lt;地址&gt;][-broadcast&lt;地址&gt;][-pointopoint&lt;地址&gt;][IP地址] 参数说明： add&lt;地址&gt; 设置网络设备IPv6的IP地址。 del&lt;地址&gt; 删除网络设备IPv6的IP地址。 down 关闭指定的网络设备。 &lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt; 设置网络设备的类型与硬件地址。 io_addr&lt;I/O地址&gt; 设置网络设备的I/O地址。 irq&lt;IRQ地址&gt; 设置网络设备的IRQ。 media&lt;网络媒介类型&gt; 设置网络设备的媒介类型。 mem_start&lt;内存地址&gt; 设置网络设备在主内存所占用的起始地址。 metric&lt;数目&gt; 指定在计算数据包的转送次数时，所要加上的数目。 mtu&lt;字节&gt; 设置网络设备的MTU。 netmask&lt;子网掩码&gt; 设置网络设备的子网掩码。 tunnel&lt;地址&gt; 建立IPv4与IPv6之间的隧道通信地址。 up 启动指定的网络设备。 -broadcast&lt;地址&gt; 将要送往指定地址的数据包当成广播数据包来处理。 -pointopoint&lt;地址&gt; 与指定地址的网络设备建立直接连线，此模式具有保密功能。 -promisc 关闭或启动指定网络设备的promiscuous模式。 [IP地址] 指定网络设备的IP地址。 [网络设备] 指定网络设备的名称。实例显示网络设备信息 1$ifconfig2eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 15003 inet 11.158.133.27 netmask 255.255.255.0 broadcast 11.158.133.2554 ether 00:16:3e:04:fe:5b txqueuelen 1000 (Ethernet)5 RX packets 187266929 bytes 210146326598 (195.7 GiB)6 RX errors 0 dropped 0 overruns 0 frame 07 TX packets 144879070 bytes 212301544384 (197.7 GiB)8 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0910lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 6553611 inet 127.0.0.1 netmask 255.0.0.012 loop txqueuelen 1 (Local Loopback)13 RX packets 172446 bytes 13930479 (13.2 MiB)14 RX errors 0 dropped 0 overruns 0 frame 015 TX packets 172446 bytes 13930479 (13.2 MiB)16 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 2、ping命令用于检测主机。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。语法 1ping [-dfnqrRv][-c&lt;完成次数&gt;][-i&lt;间隔秒数&gt;][-I&lt;网络界面&gt;][-l&lt;前置载入&gt;][-p&lt;范本样式&gt;][-s&lt;数据包大小&gt;][-t&lt;存活数值&gt;][主机名称或IP地址] 参数说明： -d 使用Socket的SO_DEBUG功能。 -c&lt;完成次数&gt; 设置完成要求回应的次数。 -f 极限检测。 -i&lt;间隔秒数&gt; 指定收发信息的间隔时间。 -I&lt;网络界面&gt; 使用指定的网络接口送出数据包。 -l&lt;前置载入&gt; 设置在送出要求信息之前，先行发出的数据包。 -n 只输出数值。 -p&lt;范本样式&gt; 设置填满数据包的范本样式。 -q 不显示指令执行过程，开头和结尾的相关信息除外。 -r 忽略普通的Routing Table，直接将数据包送到远端主机上。 -R 记录路由过程。 -s&lt;数据包大小&gt; 设置数据包的大小。 -t&lt;存活数值&gt; 设置存活数值TTL的大小。 -v 详细显示指令的执行过程。实例1、检测是否与主机连通（需要手动结束ctrl + C） ping w3c 1$ping www.w3cschool.cc2PING www.w3cschool.cc (203.107.43.165) 56(84) bytes of data.364 bytes from 203.107.43.165: icmp_seq=1 ttl=55 time=38.8 ms464 bytes from 203.107.43.165: icmp_seq=2 ttl=55 time=38.9 ms564 bytes from 203.107.43.165: icmp_seq=3 ttl=55 time=38.8 ms664 bytes from 203.107.43.165: icmp_seq=4 ttl=55 time=38.8 ms764 bytes from 203.107.43.165: icmp_seq=5 ttl=55 time=38.8 ms864 bytes from 203.107.43.165: icmp_seq=6 ttl=55 time=38.7 ms964 bytes from 203.107.43.165: icmp_seq=7 ttl=55 time=38.7 ms10^C64 bytes from 203.107.43.165: icmp_seq=8 ttl=55 time=38.7 ms1112--- www.w3cschool.cc ping statistics ---138 packets transmitted, 8 received, 0% packet loss, time 7009ms14rtt min/avg/max/mdev = 38.725/38.814/38.901/0.247 ms ping baidu 1$ping baidu.com2PING baidu.com (220.181.38.148) 56(84) bytes of data.364 bytes from 220.181.38.148: icmp_seq=1 ttl=51 time=7.21 ms464 bytes from 220.181.38.148: icmp_seq=2 ttl=51 time=7.16 ms564 bytes from 220.181.38.148: icmp_seq=3 ttl=51 time=7.26 ms664 bytes from 220.181.38.148: icmp_seq=4 ttl=51 time=7.23 ms7^C8--- baidu.com ping statistics ---94 packets transmitted, 4 received, 0% packet loss, time 3003ms10rtt min/avg/max/mdev = 7.168/7.219/7.268/0.092 ms 2、ping IP 地址： 1$ping 8.8.8.82PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.364 bytes from 8.8.8.8: icmp_seq=1 ttl=48 time=45.0 ms464 bytes from 8.8.8.8: icmp_seq=3 ttl=48 time=45.1 ms564 bytes from 8.8.8.8: icmp_seq=4 ttl=48 time=45.1 ms664 bytes from 8.8.8.8: icmp_seq=5 ttl=48 time=45.1 ms764 bytes from 8.8.8.8: icmp_seq=6 ttl=48 time=44.8 ms864 bytes from 8.8.8.8: icmp_seq=7 ttl=48 time=45.0 ms9^C10--- 8.8.8.8 ping statistics ---117 packets transmitted, 6 received, 14% packet loss, time 6046ms12rtt min/avg/max/mdev = 44.887/45.050/45.184/0.233 ms 3、自动停止ping 4次，每次间隔0.5秒ping4次后自动停止 1$ping -c 4 -i 0.5 8.8.8.82PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.364 bytes from 8.8.8.8: icmp_seq=1 ttl=47 time=40.7 ms464 bytes from 8.8.8.8: icmp_seq=2 ttl=47 time=40.8 ms564 bytes from 8.8.8.8: icmp_seq=3 ttl=47 time=40.7 ms664 bytes from 8.8.8.8: icmp_seq=4 ttl=47 time=40.8 ms78--- 8.8.8.8 ping statistics ---94 packets transmitted, 4 received, 0% packet loss, time 1504ms10rtt min/avg/max/mdev = 40.757/40.801/40.845/0.250 ms 3、查看当前日历：calcal命令用于查看当前日历，-y显示整年日历：Usage: 1cal [options] [[[day] month] year] Options: -1, --one show only current month (default)-只显示当前月份(默认) -3, --three show previous, current and next month--表示前一个月、当前的和下个月 -s, --sunday Sunday as first day of week--星期天是一周的第一天 -m, --monday Monday as first day of week--星期一是一周的第一天 -j, --julian output Julian dates -y, --year show whole current year（显示当前一整年的日历） -V, --version display version information and exit -h, --help display this help text and exit1、默认显示当前一整月的日历 在这里插入图片描述 2、显示上个月，这个月和下个月的日历： 在这里插入图片描述 4、显示或设置时间：date设置时间格式（需要管理员权限）： 1date -s 时间格式 CC为年前两位yy为年的后两位，前两位的mm为月，后两位的mm为分钟，dd为天，hh为小时，ss为秒。如： date 010203042016.55。显示时间格式（date ‘+%y,%m,%d,%H,%M,%S’）： 在这里插入图片描述 1$date '+%y/%m/%d'219/09/30 5、ps（用于显示当前进程 (process) 的状态）进程是一个具有一定独立功能的程序，它是操作系统动态执行的基本单元。ps命令可以查看进程的详细状况，常用选项(选项可以不加“-”)如下： 在这里插入图片描述 常用几个参数： -A 列出所有的行程 -w 显示加宽可以显示较多的资讯 -au 显示较详细的资讯 -aux 显示所有包含其他使用者的行程 au(x) 输出格式 : USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND USER: 行程拥有者 PID: pid %CPU: 占用的 CPU 使用率 %MEM: 占用的记忆体使用率 VSZ: 占用的虚拟记忆体大小 RSS: 占用的记忆体大小 TTY: 终端的次要装置号码 (minor device number of tty) STAT: 该行程的状态 START: 行程开始时间 TIME: 执行的时间 COMMAND:所执行的指令6、动态显示进程：toptop命令用来动态显示运行中的进程。 top命令能够在运行后，在指定的时间间隔更新显示信息。可以在使用top命令时加上-d 来指定显示信息更新的时间间隔。 在top命令执行后，可以按下按键得到对显示的结果进行排序：下面这些按键是top进入之后按的，然后会有效果 在这里插入图片描述 7、终止进程：killkill命令指定进程号的进程，需要配合 ps 使用，ps找到程序的pid,然后使用kill pid。使用格式： 1kill [-signal] pid 信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程。比如一个pid为9133 的，如果终止进程使用： 1kill 9133 9133 为应用程序所对应的进程号 有些进程不能直接杀死，这时候我们需要加一个参数“ -9 ”，“ -9 ” 代表强制结束： 1kill -9 pid 8、关机重启：reboot、shutdown、init命令参考如下图： 在这里插入图片描述 七、==Linux统计文件夹下的文件数目（新增）==Linux下有三个命令：ls、grep、wc。通过这三个命令的组合可以统计目录下文件及文件夹的个数。 1、统计当前目录下文件的个数（不包括目录）1ls -l | grep \"^-\" | wc -l 2、统计当前目录下文件的个数（包括子目录）1ls -lR| grep \"^-\" | wc -l 3、查看某目录下文件夹(目录)的个数（包括子目录）1ls -lR | grep \"^d\" | wc -l 4、查看当前目录下含有多少个文件（目录+文件）1ls | wc -l 截图下效果： 在这里插入图片描述 4、命令解析：1ls -l 长列表输出该目录下文件信息(注意这里的文件是指目录、链接、设备文件等)，每一行对应一个文件或目录，ls -lR是列出所有文件，包括子目录。 1grep \"^-\" 过滤ls的输出信息，只保留一般文件，只保留目录是grep “^d”。 1wc -l 统计输出信息的行数，统计结果就是输出信息的行数，一行信息对应一个文件，所以就是文件的个数。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"记录一下Ubuntu18.04安装python2.7和python3.6版本","slug":"b5e5ca9375e5c49bad2e7c6ea2d38d48","date":"2019-09-26T03:34:32.000Z","updated":"2019-12-02T07:00:36.955Z","comments":true,"path":"2019/09/26/b5e5ca9375e5c49bad2e7c6ea2d38d48/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/26/b5e5ca9375e5c49bad2e7c6ea2d38d48/","excerpt":"","text":"说明：在家里电脑Windows系统上装个Ubuntu18.04(其实为了装个docker，测试个项目，结果就是弄不好，然后我刚开始装的是Ubuntu16.04，结果怎么也弄不上，然后Windows系统因为是删减版的，也不支持docker，反正一言难尽。。。弄了一个周也没有最终安装一个Ubuntu18.04安装docker环境，如果周六休息一天有时能就整理个博客，今天先把我刚刚Ubuntu18.04安装python2.7和python3.6.8版本弄好，记录下我的误解和最终找到的安装方法) 1、安装python2.7和python3.6刚开始我想使用下载，发现安装步骤执行不了，Ubuntu，和Linux的centos系统下安装的python步骤还真不一样。 1、我错误的步骤1：我想着按安装Linux一下，下载，解压，然后安装，结果，发现下载都下载不动，后来才需要翻*一下，才可以 在这里插入图片描述 然后我就用我自己的（自己买的使用的），然后下载下来，传到Linux里面，以为这样就能安装成功了，结果。。。 在这里插入图片描述 以为马上就要安装好了，结果却执行不成功 在这里插入图片描述 在这里插入图片描述 2、正式安装python开始然后谷歌搜索了一番，找到一个安装不不错博主，安装成功立马给人家默默的点赞，虽然没有什么，但是我感觉是给博主一个鼓励，毕竟我写博客有时候也希望能帮助别人，点赞是对博主的一个认可（我感觉是这样的，嘻嘻） 在这里插入图片描述 其实也就下面三个命令就能安装成功了，第一个命令是安装python2.7，第二个命令是按照python2.7的pip，第三个是python3和python3的pip一起安装（这个我也是看到里面安装的log才看懂的。） 提醒：如果不需要python2版本，直接执行第三行命令就行了。 1sudo apt install python2.72sudo apt install python-pip3sudo apt install python3-pip 下面这几张图我只截图了一点开头，因为太长了，自己测试使用就行了。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 3、安装成功测试：1whereis pip2whereis pip33whereis python2.74whereis python3 在这里插入图片描述 1pip -V2pip3 -V3python -V4python3 -V 这个时候就知道了，如果直接使用python会使用python2，所以命令要分开。下面我就再整理下虚拟环境。 二、安装虚拟环境配置：1、安装虚拟环境我这个是安装python2里面的。然后要使用一个镜像源，这样安装快一点，不然太慢了。我这里使用的是清华大学的。 1sudo pip install virtualenv -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F; 在这里插入图片描述 然后想着安装管理虚拟环境的管理器virtualenvwrapper。 在这里插入图片描述 然后才知道需要这个在Ubuntu里面命令安装(截图的命令我在Linux的centos里面的命令可以安装。） 12sudo apt-get install virtualenvwrapper 2、配置虚拟环境：此时还不能使用virtualenvwrapper，实际上你需要运行virtualenvwrapper.sh文件才行。配置步骤如下：1、查看virtualenvwrapper的安装路径 1sudo find &#x2F; -name virtualenvwrapper.sh 在这里插入图片描述 2、创建目录用来存放虚拟环境（我选择在home目录下创建） 1mkdir ~&#x2F;myvirtualenvs 在这里插入图片描述 3、在~/.bashrc中添加行（vi ~/.bashrc）最后面加入俩行 /usr/share/virtualenvwrapper/virtualenvwrapper.sh 这个是第一步查到的位置。 /home/zhao/myvirtualenvs/是刚刚创建的新目录。 1export WORKON_HOME&#x3D;&#x2F;home&#x2F;zhao&#x2F;myvirtualenvs&#x2F;2source &#x2F;usr&#x2F;share&#x2F;virtualenvwrapper&#x2F;virtualenvwrapper.sh 在这里插入图片描述 4、运行： source ~/.bashrc 1source ~&#x2F;.bashrc 此时virtualenvwrapper就可以使用了。 3、virtualenvwrapper的功能1workon: 列出虚拟环境列表2lsvirtualenv: 列出虚拟环境列表3mkvirtualenv: 新建虚拟环境4workon [虚拟环境名称]: 切换&#x2F;进入虚拟环境5rmvirtualenv : 删除虚拟环境6deactivate: 离开虚拟环境 到此，达到我想要的要求了。 在这里插入图片描述 4、Ubuntu指定不同的python的版本配置虚拟环境（如果你安装一个python版本可以跳过）：前提是有俩个python版本，根据上面安装的我的默认python为python2.7版本，但是如果我的其他项目需要python3了怎么创建一个新的虚拟环境呐？有思考了尝试弄了一会，找到一个解决方案： 因为我们Ubuntu安装virtualenvwrapper时，不是使用pip安装，所以我就人为它是一个软件，相关Windows上面的一个文件或者软件管理软件。全局使用都可以。所以先查找如何制定版本 ①查找如何置顶版本1mkvirtualenv -h 在这里插入图片描述 ②、查找python的位置+解决方法：其实，这个很简单，就是后面跟个–python=python版本的绝对路径。 1whereis python32mkvirtualenv env2 --python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3.6m 在这里插入图片描述 参考：https://blog.csdn.net/gymaisyl/article/details/86563916","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://zhaojiafu.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://zhaojiafu.github.io/tags/Ubuntu/"}]},{"title":"Linux学习整理（持续更新中。。。）","slug":"73ca72104cdf805e07635840b4bb396a","date":"2019-09-24T03:34:32.000Z","updated":"2019-12-02T06:45:48.236Z","comments":true,"path":"2019/09/24/73ca72104cdf805e07635840b4bb396a/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/24/73ca72104cdf805e07635840b4bb396a/","excerpt":"","text":"一、获取Linux系统信息：①、查看Linux内核版本命令方法1、登陆Linux，在终端输入 cat /proc/version 方法2、登陆Linux，在终端输入 uname -a 方法3、登陆Linux，在终端输入 uname -r ②、查看Linux系统版本的命令1、lsb_release -a，即可列出所有版本信息 lsb_release -a 2、cat /etc/redhat-release，这种方法只适合Redhat系的Linux： cat /etc/redhat-release 3、cat /etc/issue，此命令也适用于所有的Linux发行版。 cat /etc/issue ③、当前系统相关信息1$ uname -a &#x2F;&#x2F;显示所有信息2Linux BigManing 4.4.0-83-generic #106-Ubuntu SMP Mon Jun 26 17:54:43 UTC 2017 x86_64 x86_64 x86_64 GNU&#x2F;Linux34$ uname -s &#x2F;&#x2F;显示内核名称5Linux67$ uname -n &#x2F;&#x2F;显示网络节点上的主机名8BigManing910$ uname -r &#x2F;&#x2F;显示内核发行号114.4.0-83-generic1213$ uname -v &#x2F;&#x2F;显示内核版本号14#106-Ubuntu SMP Mon Jun 26 17:54:43 UTC 20171516$ uname -m &#x2F;&#x2F;显示机器硬件名称 显示i686说明你安装了32位操作系统 显示 x86_64说明你安装了64位操作系统17x86_641819$ uname -p &#x2F;&#x2F;显示处理器类型20x86_642122$ uname -i &#x2F;&#x2F;显示硬件平台23x86_642425$ uname -o &#x2F;&#x2F;操作系统26GNU&#x2F;Linux 二、Linux 中配置python的虚拟环境1、安装virtualenv安装这里只介绍 Linux 系统下的安装。在 Linux 下的安装方法多种多样，可以通过源码源码安装，也可以用 Python 的包管理工具 easy_install 和 pip 安装，例如： sudo easy_install virtualenv 或者： sudo pip install virtualenv 如果你使用的是 Ubuntu 及其衍生版本，还可以通过如下方式安装： sudo apt-get install python-virtualenv 2、安装管理虚拟环境包vrtaulenvwrapper（和window上名字不一样） sudo easy_install vrtaulenvwrapper 或者： sudo pip install vrtaulenvwrapper 如果你使用的是 Ubuntu 及其衍生版本，还可以通过如下方式安装： sudo apt-get install virtualenvwrapper 3、创建虚拟环境俩都都安装成功之后就可以特意创建一个虚拟环境目录，用来存贮多个虚拟环境， 在当前目录下创建一个虚拟环境目录： virtualenv env1 其中env1就是虚拟环境的名字，会在当前目录下创建一个env1的目录，里面有python版本和pip。 4、管理虚拟环境命令：配置好virtualenvwrapper，就可以使用它的功能，方便管理虚拟环境 workon: 列出虚拟环境列表 lsvirtualenv: 列出虚拟环境列表 mkvirtualenv: 新建虚拟环境 workon [虚拟环境名称]: 切换/进入虚拟环境 rmvirtualenv : 删除虚拟环境 deactivate: 离开虚拟环境 三、Linux下安装docker1、安装一些必要的系统工具 sudo yum install -y yum-utils device-mapper-persistent-data lvm2 然后我的提醒： (try to add &apos;--allowerasing&apos; to command line to replace conflicting packages or &apos;--skip-broken&apos; to skip uninstallable packages) 在这里插入图片描述 然后我加上了 –allowerasing sudo yum install -y yum-utils device-mapper-persistent-data lvm2–allowerasing 安装成功： 在这里插入图片描述 2、添加软件源信息： sudo yum-config-manager –add-repohttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 在这里插入图片描述 3、更新 yum 缓存： sudo yum makecache fast 在这里插入图片描述 四、Ubuntu 16.04sudo apt-get update更新报错1、报错内容1E: Problem executing scripts APT::Update::Post-Invoke-Success &#39;if &#x2F;usr&#x2F;bin&#x2F;test -w &#x2F;var&#x2F;cache&#x2F;app-info -a -e &#x2F;usr&#x2F;bin&#x2F;appstreamcli; then appstreamcli refresh &gt; &#x2F;dev&#x2F;null; fi&#39;2E: Sub-process returned an error code 在这里插入图片描述 2、解决：依次下面三行命令执行完毕就可以了。 1sudo pkill -KILL appstreamcli 1wget -P &#x2F;tmp https:&#x2F;&#x2F;launchpad.net&#x2F;ubuntu&#x2F;+archive&#x2F;primary&#x2F;+files&#x2F;appstream_0.9.4-1ubuntu1_amd64.deb https:&#x2F;&#x2F;launchpad.net&#x2F;ubuntu&#x2F;+archive&#x2F;primary&#x2F;+files&#x2F;libappstream3_0.9.4-1ubuntu1_amd64.deb 1sudo dpkg -i &#x2F;tmp&#x2F;appstream_0.9.4-1ubuntu1_amd64.deb &#x2F;tmp&#x2F;libappstream3_0.9.4-1ubuntu1_amd64.deb 执行完上述命令之后再次运行sudo apt-get update就不会再出现上面的错误。 五、Linux安装yum命令Linux yum被删除或者命令失效，我的是我安装docker时出了问题，跟着其他博客步骤，结果把yum弄的不能用了，找了一下午，找到一个好的解决方法，原博客放到下面的参考链接里面了。 第一步，国内的yum仓库1http:&#x2F;&#x2F;mirrors.163.com&#x2F;centos&#x2F;7&#x2F;os&#x2F;x86_64&#x2F;Packages&#x2F;23http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;7&#x2F;os&#x2F;x86_64&#x2F;Packages&#x2F; 第二步：下载软件，文件版本可能有变化，根据列表里面进行下载 yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm yum-metadata-parser-1.1.4-10.el7.x86_64.rpm yum-3.4.3-132.el7.centos.0.1.noarch.rpm python-iniparse-0.4-9.el7.noarch.rpm 第三步：安装 python-iniparserpm -ivh python-iniparse-0.4-9.el7.noarch.rpm 第四步：安装 yum（记得要一起安装三个yum,不然可能会报错）rpm -ivh –force yum-3.4.3-132.el7.centos.0.1.noarch.rpm yum-metadata-parser-1.1.4-10.el7.x86_64.rpm yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm 安装完成后，yum命令可以正常使用。我的安装几个就完成了。我的这个是服务器Linux系统。我是先下载好的四个安装包，然后使用winscp（window软件）传输到服务器的。 六、rpm(RPM软件包管理器)命令RPM软件包管理器注解：一种用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。与Dpkg类似。作为一个软件包管理工具，RPM管理着系统已安装的所有RPM程序组件的资料。我们也可以使用RPM来卸载相关的应用程序。 ①、一般安装命令：1rpm -ivh 安装包地址2例如（这个是在当前目录下安装dejagnu-1.4.2-10.noarch.rpm）：3rpm -hvi dejagnu-1.4.2-10.noarch.rpm4警告：dejagnu-1.4.2-10.noarch.rpm: V3 DSA 签名：NOKEY, key ID db42a60e5准备...6########################################### [100%] ②、其他一些命令整理：rpm 命令：遵循GPL协议且功能强大的包管理，它可以建立、安装、请求、确认、和卸载软件包，间接的提升了Linux 的易用性。 1-e 卸载rpm包2-q 查询已安装的软件信息3-i 安装rpm包4-u 升级rpm包5--replacepkgs 重新安装rpm包6--justdb 升级数据库，不修改文件系统7--percent 在软件包安装时输出百分比8--help 帮助9--version 显示版本信息10-c 显示所有配置文件11-d 显示所有文档文件12-h 显示安装进度13-l 列出软件包中的文件14-a 显示出文件状态15-p 查询&#x2F;校验一个软件包文件16-v 显示详细的处理信息17--dump 显示基本文件信息18--nomd5 不验证文件的md5支持19--nofiles 不验证软件包中的文件20--nodeps 不验证软件包的依赖关系21--whatrequires 查询&#x2F;验证需要一个依赖性的软件包22--whatprovides 查询&#x2F;验证提供一个依赖性的软件包 七、Ubuntu下apt-get的一些命令汇总1、apt-get命令在Ubuntu下，apt-get近乎是最常用的shell命令之一了，因为他是Ubuntu通过新立得安装软件的常用工具命令。 本文列举了常用的APT命令参数： apt-cache search package 搜索软件包 apt-cache show package 获取包的相关信息，如说明、大小、版本等 sudo apt-get install package 安装包 sudo apt-get install package –reinstall 重新安装包 sudo apt-get -f install 修复安装 sudo apt-get remove package 删除包 sudo apt-get remove package –purge 删除包，包括配置文件等 sudo apt-get update 更新源 sudo apt-get upgrade 更新已安装的包 sudo apt-get dist-upgrade 升级系统 apt-cache depends package 了解使用该包依赖那些包 apt-cache rdepends package 查看该包被哪些包依赖 sudo apt-get build-dep package 安装相关的编译环境 apt-get source package 下载该包的源代码 sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 sudo apt-get check 检查是否有损坏的依赖 2、无法获得锁解决方法 在这里插入图片描述 参考： https://blog.csdn.net/m1585761297/article/details/80488617https://www.jianshu.com/p/c2e5b752c68ehttps://blog.csdn.net/qq_27818541/article/details/75207986https://www.runoob.com/docker/ubuntu-docker-install.htmlhttps://blog.csdn.net/hfmbook/article/details/52065639https://baike.baidu.com/item/RPM/3794648?fr=aladdin","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"Linux系统下安装python 2.7","slug":"adadb4351ca6bb855295fc7ba6526cdf","date":"2019-09-24T03:34:32.000Z","updated":"2019-12-02T07:00:37.184Z","comments":true,"path":"2019/09/24/adadb4351ca6bb855295fc7ba6526cdf/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/24/adadb4351ca6bb855295fc7ba6526cdf/","excerpt":"","text":"1、下载软件①、查找python2.7.13Linux版本软件地址：1、python官网：https://www.python.org2、下载python各种软件地址：https://www.python.org/ftp/python/ 在这里插入图片描述 3、进入python2.7.13，选择自己需要的Linux版本软件，右击复制地址： https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz 在这里插入图片描述 ②、Linux下载命令下载软件：mkdir ./software cd software/ wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz也可以使用另一种方法下载，如果是window上装的虚拟环境，可以直接下载软件包tgz，然后复制过来，是一样的。 2、解压安装命令解压安装：tar -zxf Python-2.7.13.tgz cd Python-2.7.13 ./configure --prefix=/usr/local/python2.7 --with-threads --enable-shared make &amp;&amp; make altinstall 2、测试一下，这样就说明安装成功了。 在这里插入图片描述 参考：https://www.jianshu.com/p/6425d18d3e47https://blog.csdn.net/singebogo/article/details/79698375","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"Linux 执行  apt install 时报错： Could not get lock _var_lib_dpkg_lock - open","slug":"53a2c58674441af1214063d4db878ac3","date":"2019-09-24T03:34:32.000Z","updated":"2019-12-02T07:40:52.816Z","comments":true,"path":"2019/09/24/53a2c58674441af1214063d4db878ac3/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/24/53a2c58674441af1214063d4db878ac3/","excerpt":"","text":"一、问题描述：今天在家里电脑Windows系统上装个Ubuntu，然后安装好python之后，使用命令安装pip时报错：然后谷歌搜索了找到了一个解决方法：安装命令： sudo apt install python-pip 报错内容： 1E: Could not get lock &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock - open (11: Resource temporarily unavailable)2E: Unable to lock the administration directory (&#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;), is another process using it? 在这里插入图片描述 二、解决方法：原因好像是有进程被锁着了，需要执行下面命令进行解决： 1、查找被锁的进程pid1sudo lsof &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock 在这里插入图片描述 2、使用命令结束进程：以后再有进程被锁也可以使用这个方法进行释放被锁的进程。 1sudo kill -9 7316 3、继续安装步骤：安装命令：这时候就正常安装了，我就截图了开头一点，下面太长了。 1sudo apt install python-pip 在这里插入图片描述 检查是否安装成功： 1pip -V 在这里插入图片描述 参考我搜到的连接：https://askubuntu.com/questions/15433/unable-to-lock-the-administration-directory-var-lib-dpkg-is-another-process","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"},{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"windows上安装ubuntu双系统，ubuntu无法连接有线网问题+如何将安装好的英文版的Ubuntu系统改为中文问题","slug":"476704b331f87fd74331e2fe9cd82b08","date":"2019-09-22T03:34:32.000Z","updated":"2019-12-02T06:45:48.212Z","comments":true,"path":"2019/09/22/476704b331f87fd74331e2fe9cd82b08/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/22/476704b331f87fd74331e2fe9cd82b08/","excerpt":"","text":"问题今天想在Windows上装个Ubuntu，然后装上之后，最后一次安装成功没有出现选择语言（今天弄网络问题，我删除了装装了删，后来就不出来语言选项了），先说我的网络问题怎么弄好的吧。 1、Ubuntu网络问题刚开始网上搜的是网络问题，然后我就在右下角网络进入却发现和网上搜的不一样，然后还有各种说的解决方法（BIOS设置，每次进入各种问题，后来弄了几个也没有弄成，然后我就很纳闷，因为我之前装个这个VMware和Ubuntu16.4没有什么问题，现在突然就各种问题了，估计也是因为之前系统重装（我装了几次没有弄好就开始怀疑系统，差点就重装系统了，还好我坚持没有装系统，重装系统很麻烦的，要各种模块重新配置，环境配置）） 下面这个图是我第一次按右下角网络，右击进入网络中心，但是没有找到我想要的界面。后来各种找，弄了一下午几个小的都在搞这个。。。 在这里插入图片描述 晚上吃了饭，又开始尝试，然后在Windows左下角的Windows图地方，右击， 在这里插入图片描述 然后进入网络连接，这个地方我截图老是自动关了，这个不截图了。 在这里插入图片描述 禁用之后，回头Ubuntu就好了。 在这里插入图片描述 成功解决网络问题，难了我一下午，结果就是这几个禁用就好了，还让我来来回回装了好几次，还差点重装系统（庆幸呀），希望帮到遇到此问题的你。 在这里插入图片描述 2、如何将安装好的英文版的Ubuntu系统改为中文1、进入设置setting，找到language，进入。 在这里插入图片描述 2、进入安装语言，找到Chinese语言 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 3、输入密码安装 在这里插入图片描述 在这里插入图片描述 然后注销退出重新登录试试。 在这里插入图片描述","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://zhaojiafu.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://zhaojiafu.github.io/tags/Ubuntu/"}]},{"title":"使用 2to3 模块可以初步将python2版本的文件一键转换为python3文件格式","slug":"71c5247eabdf2f897661db5e8af6bd2e","date":"2019-09-19T03:34:32.000Z","updated":"2019-12-02T07:40:52.764Z","comments":true,"path":"2019/09/19/71c5247eabdf2f897661db5e8af6bd2e/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/19/71c5247eabdf2f897661db5e8af6bd2e/","excerpt":"","text":"我的配置 window10系统 python3.6版本 需求：有时候在GitHub上下载一些项目时，人家用的是python2写的，和自己电脑安装的是python3.6，有时候一个项目很大py文件，这个时候一个一个文件改，耗时费力，如果在安装配置python2环境，也可行，但是也很费精力，而且有些更新的模块功能不支持python2的环境，也不少。所以就网上搜到还真有python2转换成python3的模块，然后自己再根据调试着，剩下的慢慢改，剩下不少精力和时间（对比一个一个改py文件） 解决方法：1、安装模块： pip install 2to3 模块地址：https://pypi.org/project/2to3/ 2、使用模块更改一个py文件（后缀不是py也可以）这个命令有点缺陷，就是每次只能改一个，但是却不错： 安装好直接在cmd中或者powershell，test_ci.py是需要更改的py文件 2to3 -w .\\test_ci.py 更改之后，会生成一个test_ci.py.bak，就是原来的文件名加上.bak的文件就是更改前的python2文件，test_ci.py文件变成了想要的python3文件 在这里插入图片描述 3、更改一个项目 命令： 2to3 –output-dir=python3 -W -n DeepVideoAnalytics-master 解释： python3 是改成之后的python3文件夹，可以不存在，之后会自动生成这个目录。 DeepVideoAnalytics-master 这个是需要更改的python2项目 注意点： 这里更改的只是后缀为py的文件，不是py后缀好像不会更改过来。 在这里插入图片描述 更改过后的目录： 在这里插入图片描述 4、项目同意更改为python3解决思路根据上面步骤3之后，可以进行以下操作: 1、既然这些更改成功了，我直接全部复制到原来的目录下， 在这里插入图片描述 然后复制到第一层目录下，选择替换全部 在这里插入图片描述 复制替换成功 在这里插入图片描述 验证猜想，果然没有py文件： 在这里插入图片描述 在这里插入图片描述 2、单独转换剩余不是py后缀的python文件（大多数项目都是py后缀就忽略这一步）然后还有个别不是py后缀的文件，单独使用命令更改一个一个文件（这种文件不会太多，一般就是目录第一层的文件（不是目录下的文件）中才有） 在这里插入图片描述 1、验证是否含有不是py后缀的python文件，pycharm打开项目，进入第一层一看就知道了。 在这里插入图片描述 2、单独转换：复制出来： 在这里插入图片描述 转换第一个python文件 在这里插入图片描述 转换第二个python文件 在这里插入图片描述 在这里插入图片描述 复制替换原来的python2文件 在这里插入图片描述 3、初步转换成功，剩下自己调试吧（和此项目无关，我也是随便找的一个python2项目） 在这里插入图片描述 参考：https://pypi.org/project/2to3/https://docs.python.org/zh-cn/3.7/library/2to3.html","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"2to3","slug":"2to3","permalink":"https://zhaojiafu.github.io/tags/2to3/"}]},{"title":"网页限制解除（国内国外都可以使用此方法解决问题：通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制）","slug":"a487ca618a8a5b24af27ad2757871bcc","date":"2019-09-19T03:34:32.000Z","updated":"2019-12-02T07:00:37.374Z","comments":true,"path":"2019/09/19/a487ca618a8a5b24af27ad2757871bcc/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/19/a487ca618a8a5b24af27ad2757871bcc/","excerpt":"","text":"一、问题 在这里插入图片描述 （尴尬）这个很好的脚本还是我工作2年了才知道这个插件的强大功能，之前是因为不会翻墙，也没有找到这种插件镜像的网站。今天正好又遇到这种问题，就把我收藏半年之久的好用插件和一些方法分享出来（当然早就有人分享这个插件了，但是我之前下载不了，也不会弄呀）。 今天遇到一个网页不能右击，不能复制，所以通过【Tampermonkey（俗称油猴）】，在里面搜索到一个很好的脚本：（网页限制解除） 差点忘记把我遇到的这个网站忘了，你可以试试，没安装之前不能选择任何文字，不能复制，右击等操作，安装脚本之后就好了。https://www.hack520.com/668.html 二、解决步骤1、下载谷歌插件Tampermonkey①、能翻墙者：如果你的电脑可以翻墙，那么直接谷歌商店搜索：Tampermonkey，安装即可， 在这里插入图片描述 ②、如果不能翻墙，使用我下面的方法 进入这个网站，进行下载谷歌插件，搜索这个网站我称之为插件镜像，这个网站还是我工作1年多才发现好用的网站（我不是推广这个网站或者他的公众号，只是作为一个程序员感觉很好的网站）https://www.extfans.com/ 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 验证之后可以下载成功： 在这里插入图片描述 解压之后：下面这个圈着的crx文件就是需要的插件，其他的用不到 在这里插入图片描述 然后依次点开谷歌浏览器：右上角三个点–更多工具–扩展程序 然后打开开发者模式 在这里插入图片描述 然后直接把解压的名称为tampermonkey的crx拖进来，点击确定安装就可以安装成功了。 2、下载 （网页限制解除）的脚本进入脚本网站：https://greasyfork.org/zh-CN/scripts 在这里插入图片描述 进入脚本，点击安装即可。 在这里插入图片描述 三、安装脚本成功之后，刷新下之前的网站测试网站：https://www.hack520.com/668.html看看，这时候就可以选择复制，也可以进行右击等各种操作了。 在这里插入图片描述 成功解决问题 在这里插入图片描述","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"},{"name":"代理ip","slug":"代理ip","permalink":"https://zhaojiafu.github.io/tags/%E4%BB%A3%E7%90%86ip/"}]},{"title":"使用openpyxl 进行excel文件读写","slug":"2a1b3339784f53fcde84bab4573189c8","date":"2019-09-17T03:34:32.000Z","updated":"2019-12-02T06:45:49.953Z","comments":true,"path":"2019/09/17/2a1b3339784f53fcde84bab4573189c8/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/17/2a1b3339784f53fcde84bab4573189c8/","excerpt":"","text":"1、配置 window10系统 python3.6 2、安装模块：pip install openpyxl3、读写：注意点1：写入日期时，要转换成字符串写入，不然打开日期的单元格会显示成乱码 注意点2：如果保存为的excel表格存在，并且你电脑打开了，会报错： PermissionError: [Errno 13] Permission denied: &apos;sample.xlsx&apos; 在这里插入图片描述 3、demo代码：参考官方修改的：https://pypi.org/project/openpyxl/ import datetime from openpyxl import Workbook wb = Workbook() # grab the active worksheet ws = wb.active # Data can be assigned directly to cells ws[&apos;A1&apos;] = 42 # Rows can also be appended ws.append([1, 2, 3]) # Python types will automatically be converted data = datetime.datetime.today() print(&quot;data1&quot;,data,type(data)) data,time1 = str(data).split(&apos; &apos;) # 注意我这里是转换成字符串写入，如果不转换，写入的excel是乱码，可以自己试试。 ws[&apos;A2&apos;] = data print(data) # Save the file wb.save(&quot;sample.xlsx&quot;)4、读取一个Excel表格的所有工作表下的所有行敏感人脸-明星人脸list0709.xlsx文件 在这里插入图片描述 具体解释我放到代码里面了，这里不过多解释了 from openpyxl import load_workbook wb = load_workbook(&quot;敏感人脸-明星人脸list0709.xlsx&quot;) print(wb.sheetnames) # 读取所有工作表的名字 sheetnames = wb.sheetnames for name in sheetnames: # 通过工作表的名字获取工作表wb.get_sheet_by_name(name) 等价于 wb[name] # sheet = wb.get_sheet_by_name(name) sheet = wb[name] # 获取最大行数 print(sheet.max_row) # 打印所有的属性 print(dir(sheet)) # 读取一个工作表的所有行 rows = sheet.iter_rows() print(rows, type(rows)) # 遍历所有行 for one in rows: print(one) print(dir(one)) # 遍历所有行的所有列 for cell in one: # 打印每一行下所有列的值 print(cell.value) break5、合并一个Excel表格下所有工作表（或者合并多个Excel表格也可以参考这个方法）提示下，我这里只是做个测试，这个方法可以合并，实际情况下可以根据需要进行相关修改就可以了。（比如，如果不需要每行就写入每个工作表的第一行，可以在写入时进行判断，如果列表等于第一行，不写入就行了，嘴和一个整表格插入一行就ok了，其他参考这个方法也可以到达数据去脏合并） 直接上带代码吧： from openpyxl import load_workbook, Workbook # 实例化准备写入的文件 hebing_wb = Workbook() # 激活 worksheet hebing_ws = hebing_wb.active wb = load_workbook(&quot;敏感人脸-明星人脸list0709.xlsx&quot;) print(wb.sheetnames) # 读取所有工作表的名字 sheetnames = wb.sheetnames for name in sheetnames: # 通过工作表的名字获取工作表wb.get_sheet_by_name(name) 等价于 wb[name] # sheet = wb.get_sheet_by_name(name) sheet = wb[name] # 获取最大行数 print(sheet.max_row) max_row = sheet.max_row # 打印所有的属性 print(dir(sheet)) # 读取一个工作表的所有行 rows = sheet.iter_rows() print(rows, type(rows)) # 遍历所有行 for one in rows: one_row = [] for cell in one: one_row.append(cell.value) hebing_ws.append(one_row) # 保存合并的表格 hebing_wb.save(&apos;hebing.xlsx&apos;)合并后效果展示： 在这里插入图片描述 6、读取一个Excel表格下所有工作表的所有列直接上代码了，解释看代码备注就懂了 from openpyxl import load_workbook wb = load_workbook(&quot;敏感人脸-明星人脸list0709.xlsx&quot;) print(wb.sheetnames) # 读取所有工作表的名字 sheetnames = wb.sheetnames for name in sheetnames: # 通过工作表的名字获取工作表wb.get_sheet_by_name(name) 等价于 wb[name] # sheet = wb.get_sheet_by_name(name) sheet = wb[name] # 获取最大行数 print(sheet.max_row) # 打印所有的属性 print(dir(sheet)) # 读取一个工作表的所有列 columns = sheet.iter_cols() print(columns, type(columns)) # 遍历所有列 for one in columns: print(one) # print(dir(one)) # 遍历所有列的单元格 for cell in one: # 打印每一列下所有单元格的值 print(cell.value) break7、指定列合并Excel表格下所有的工作表（或者合并多个Excel）直接上我的代码: from openpyxl import load_workbook,Workbook # 实例化准备写入的文件 hebing_wb = Workbook() # 激活 worksheet hebing_ws = hebing_wb.active wb = load_workbook(&quot;敏感人脸-明星人脸list0709.xlsx&quot;) print(wb.sheetnames) # 读取所有工作表的名字 sheetnames = wb.sheetnames for name in sheetnames: # 通过工作表的名字获取工作表wb.get_sheet_by_name(name) 等价于 wb[name] # sheet = wb.get_sheet_by_name(name) sheet = wb[name] # 获取最大行数 print(sheet.max_row) # 打印所有的属性 print(dir(sheet)) # 读取一个工作表的所有列 columns = sheet.iter_cols() print(columns, type(columns)) # 遍历所有列 for one in columns: print(one) # print(dir(one)) # 遍历所有列的单元格 print(one[0].value) if one[0].value == &apos;姓名&apos;: # print(&quot;是姓名列&quot;) for cell in one: # 打印每一列下所有单元格的值 # print(&quot;是姓名列cell&quot;,cell.value) value = cell.value if value != &apos;姓名&apos;: print(&quot;value2&quot;,value) # 把每一个工作表的姓名写入新的Excel表格 hebing_ws.append([value]) # break # 保存合并的表格 hebing_wb.save(&apos;hebing2.xlsx&apos;)效果图： 在这里插入图片描述 合并后： 在这里插入图片描述 当然这个效果，如果数量很少没有必要用代码合并，但是如果这种需要合并的表格很多，每个表格又有很多行，代码操作就会很快了，优势就体现出来了。 参考：https://blog.csdn.net/weixin_43094965/article/details/82226263 https://blog.csdn.net/longshenlmj/article/details/51706010 https://blog.csdn.net/dongfei2033/article/details/79743067 https://pypi.org/project/openpyxl/","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"openpyxl","slug":"openpyxl","permalink":"https://zhaojiafu.github.io/tags/openpyxl/"}]},{"title":"使用img2pdf 模块将目录下图片合并成pdf","slug":"8a08accef09989519abc9c48f86daeb7","date":"2019-09-11T03:34:32.000Z","updated":"2019-12-02T07:40:53.083Z","comments":true,"path":"2019/09/11/8a08accef09989519abc9c48f86daeb7/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/11/8a08accef09989519abc9c48f86daeb7/","excerpt":"","text":"@[toc] 配置 window 10系统 python3.6版本 说明：之前做些测试，将本地的一些图片合并成功pdf，然后搜到的一些博客都是用PIL，而且博客都是一俩年前的了，找了几个都没用弄成，今天突然又看到这几张突然，然后就再次搜索测试，最终经过不懈努力找到一个好的模块：img2pdf 1、安装img2pdf pip3 install img2pdf 2、直接上代码如过你也是window系统，可以直接修改一些photo_path图片的绝对路径就能用了，生成的pdf就在图片目录里面，其系统自行修改相关不同代码吧。（记得目录里面要都是图片，我没有进行图片判断） import img2pdf import os def from_photo_to_pdf(photo_path): # 1、生成地址列表 photo_list = os.listdir(photo_path) photo_list = [os.path.join(photo_path,i) for i in photo_list] # 1、指定pdf的单页的宽和高 # A4纸张 # a4inpt = (img2pdf.mm_to_pt(210), img2pdf.mm_to_pt(297)) # 我的自定义： a4inpt = (img2pdf.mm_to_pt(720), img2pdf.mm_to_pt(1080)) layout_fun = img2pdf.get_layout_fun(a4inpt) with open(photo_path+&apos;\\\\1result.pdf&apos;, &apos;wb&apos;) as f: f.write(img2pdf.convert(photo_list, layout_fun=layout_fun)) if __name__ == &apos;__main__&apos;: photo_path = r&apos;图片目录的绝对地址&apos; from_photo_to_pdf(photo_path)3、生成的效果图： 在这里插入图片描述 在这里插入图片描述 参考：https://pypi.org/project/img2pdf/https://blog.csdn.net/cloveses/article/details/79142533","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"pdf","slug":"pdf","permalink":"https://zhaojiafu.github.io/tags/pdf/"},{"name":"img2pdf","slug":"img2pdf","permalink":"https://zhaojiafu.github.io/tags/img2pdf/"}]},{"title":"window10系统下nodejs一些知识（后续学到用的知识会持续更新。。。）","slug":"d7129ace2f4b92f2a04c044df02ae5ab","date":"2019-09-07T03:34:32.000Z","updated":"2019-12-02T07:26:18.029Z","comments":true,"path":"2019/09/07/d7129ace2f4b92f2a04c044df02ae5ab/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/07/d7129ace2f4b92f2a04c044df02ae5ab/","excerpt":"","text":"系统配置 Windows 10 64位系统下学习使用 一、说明：nodejs笔者目前还不是特别会，最近需要使用python的execjs模块执行js代码，然后需要学习了解一下nodejs，如果写的有不好的或者我理解不对的，欢迎这方面的大牛指点一下，如果有自己整理或者收藏的nodejs更好的博客，希望能在评论中回复给我，我也去学习学习，Thanks♪(･ω･)ﾉ 二、nodejs的介绍（其实就是JavaScript的运行环境）1、node.js是构建在Chrome v8 引擎上的一个javascript 运行环境2、node和Chrome一样都是基于事件驱动的异步架构！Chrome是基于事件的交互，而node是基于事件的I/O；3、node没有HTML、Webkit和显卡驱动等UI技术支持； 三、nodejs一些常用命令nodejs下载官方地址：https://nodejs.org/zh-cn/download/ 0、【后来添加补充笔者遇到问题】安装好之后配置下NodeJS（不配置，Windows下 不然后面可能使用出问题，我是弄了将近俩个小时才解决这个问题，所以为了防止以后再遇到，记录下来） 我这个问题是出现在家里电脑使用时，公司电脑当时我都忘记怎么装好的了，但是家里使用只是装个node，但是只能在win+R的cmd中使用，不能在其他目录下打开命令窗口使用node和npm。 所以，搜索设置了一番，还是不能用，结果电脑关机重启就可以使用了。我也奇怪具体那个地方的问题。 下面说下我的步骤吧： 1. 配置npm的全局模块存放路径以及cache。在nodejs的安装主目录中新建文件夹：node_cache和node_global（此处我的安装路径是D:\\python_study_tools\\nodejs） 在这里插入图片描述 2、在cmd中输入命令：npm config set prefix &quot;D:\\python_study_tools\\nodejs\\node_global&quot; npm config set cache &quot;D:\\python_study_tools\\nodejs\\node_cache&quot;3、现在可尝试安装模块：选择安装express模块在命令行中输入：npm install express -g (-g表示全局安装即安装到node_global目录下)如何D:\\python_study_tools\\nodejs\\node_global这个目录下面有模块，说明设置成功了。 4、我还配置了一个镜像源：配置 NPM 镜像源我们可以指定 npm 的镜像源达到网络加速的效果，默认的源为：https://registry.npmjs.org，在国内访问速度较慢。此时，我们就可以使用一些国内优秀的 npm 镜像源，如： CNPM：https://r.cnpmjs.org/ 淘宝 NPM 镜像：https://registry.npm.taobao.org/ 临时使用 npm --registry https://registry.npm.taobao.org install express -g 持久使用 npm config set registry https://registry.npm.taobao.org # 配置后可通过下面方式来验证是否成功 npm config get registry # 或 npm info express通过 cnpm 使用 npm install -g cnpm --registry=https://registry.npm.taobao.org # 使用 cnpm install express -g # 如果不能使用 cnpm，可能是指定了 npm 的全局模块目录导致，需要配置相应的系统环境，自行参考上面的「进入安装」模块 注意：此时的 cnpm 也会有默认的配置，同样需要进行「NPM 配置」模块那样进行 全局模块目录 （我的：D:\\python_study_tools\\nodejs\\node_global）及 缓存目录（我的：D:\\python_study_tools\\nodejs\\node_cache）的相关设置。自定义配置会保存在 C:\\Users%USERNAME%.cnpmrc 文件中 5、然后电脑关机重启，我的就可以在任意目录使用node了。之前只安装node的msi安装包，任何在任意目录下打开命令窗口是无效的，现在就可以了。这样Windows下就能愉快的使用nodejs了。 在这里插入图片描述 在这里插入图片描述 1、查看npm安装的模块和位置：cmd 进入 然后node 进入node然后输入： npm list -g 2、导入模块保存问题解决2.1、 问题描述及寻找解决方法过程安装模块之后cmd进入命名窗口，然后node进入node环境,结果require报错： {% image /imgs/20190801110146298.png '在这里插入图片描述' '' %} 然后找到了一个这个：问题：https://github.com/visionmedia/debug/issues/261 其中又一个解决方法，然后就进去连接看了，试试结果真的解决了我的问题http://weaintplastic.github.io/web-development-field-guide/Development/Frontend_Development/Setting_up_your_project/Setup_Dependency_Managers/Node_Package_Manager/Initialize_NPM_on_a_new_project.html {% image /imgs/20190801110416238.png '在这里插入图片描述' '' %} 2.2、解决方法（1）、新建一个目录（2）、按住shift 然后右击空白，然后选择再此处打开cmd或者paweshell窗口，进入黑窗口（3）、输入npm init然后填入一些信息： name: (project-name) project-name version: (0.0.0) 0.0.1 description: The Project Description entry point: //leave empty test command: //leave empty git repository: //the repositories url keywords: //leave empty author: // your name license: N/A比如我的，我就填写，项目名称和版本信息，其他直接回车，最后出先让输入yes，填写yes即可 在这里插入图片描述 这时候会再你的目录下生成一个package.json文件，比如我的文件内容： { &quot;name&quot;: &quot;project-name&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;description&quot;: &quot; The Project Description&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: { &quot;globals&quot;: &quot;^12.0.0&quot;, &quot;jsdom&quot;: &quot;^15.1.1&quot; } }（4）、安装需要的模块这时候就可以直接安装，会在目录下生成node_modules这个模块目录，下载的模块会安装的这个目录下面，（我的理解就是和python的虚拟环境一样，每个项目拥有自己的模块版本，之间互不影响） 比如我的安装一个全局模块测试： npm i globals等待完成，模块目录下会有俩个模块包，一个是 gloglbals，另一个是type-fest，为什么会有type-fest这是因为type-fest是gloglbals的依赖包。 {% image /imgs/20190801112537414.png '在这里插入图片描述' '' %} 下面是我安装成功了，俩个模块。进入目录下的模块目录，确实又俩个，就是gloglbals和type-fest {% image /imgs/20190801112641177.png '在这里插入图片描述' '' %} 使用参考：https://www.npmjs.com/package/globals （5）、检测模块是否安装成功，看下图就懂了{% image /imgs/20190801113006922.png '在这里插入图片描述' '' %} 3、npm的国内镜像这个我直接把下面这个博主的弄过来了，标明，觉得不错可以给人家点个赞。参考的博客：https://www.cnblogs.com/yoyotl/p/7826255.html主要命令：一.通过命令配置 命令 npm config set registry https://registry.npm.taobao.org 验证命令 npm config get registry如果返回https://registry.npm.taobao.org，说明镜像配置成功。 二、通过使用cnpm安装 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org 使用cnpm cnpm install xxx 参考：1、nodejs的一些常用命令：https://my.oschina.net/jediKnight/blog/525793https://blog.csdn.net/weixin_37806077/article/details/821111172、nodejs的一些库搜索：https://www.npmjs.com/package/jsdom3、nodejs的升级命令：https://blog.csdn.net/adeyi/article/details/510762744、导入模块报错：问题：https://github.com/visionmedia/debug/issues/261 解决：http://weaintplastic.github.io/web-development-field-guide/Development/Frontend_Development/Setting_up_your_project/Setup_Dependency_Managers/Node_Package_Manager/Initialize_NPM_on_a_new_project.html 5、python的execjs中使用window对象：https://www.cnblogs.com/huchong/p/11044238.html6、nodejs的jsdom模块：https://www.npmjs.com/package/jsdom 7、npm的国内镜像参考的博客：https://www.cnblogs.com/yoyotl/p/7826255.html淘宝镜像：http://npm.taobao.org/8、NodeJS必知基础知识：https://blog.csdn.net/qq_32842925/article/details/82759789","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://zhaojiafu.github.io/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://zhaojiafu.github.io/tags/nodejs/"}]},{"title":"ffmpeg 常用命令总结：（avi转MP4、MP4转ts、视频压缩、去除视频声音、合并音频和视频）","slug":"f683db1ab016de1b7c508fe5583a4dff","date":"2019-09-06T03:34:32.000Z","updated":"2019-12-02T07:26:18.098Z","comments":true,"path":"2019/09/06/f683db1ab016de1b7c508fe5583a4dff/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/06/f683db1ab016de1b7c508fe5583a4dff/","excerpt":"","text":"@[toc] 配置 window10 64位系统 说明： 整理一下自己用到过的几个常用命令，记录，方便帮助到需求和我一样的人，也方便以后备用。后续用到学到了会持续更新： 0、ffmpeg一些命令参数： {% image /imgs/20190906122228456.png '在这里插入图片描述' '' %} a) 通用选项-L license -h 帮助 -fromats 显示可用的格式，编解码的，协议的。。。 -f fmt 强迫采用格式fmt -I filename 输入文件 -y 覆盖输出文件 -t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持 -ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持 -title string 设置标题 -author string 设置作者 -copyright string 设置版权 -comment string 设置评论 -target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg -hq 激活高质量设置 -itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持 b) 视频选项-b bitrate 设置比特率，缺省200kb/s -r fps 设置帧频 缺省25 -s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576 -aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777 -croptop size 设置顶部切除带大小 像素单位 -cropbottom size –cropleft size –cropright size -padtop size 设置顶部补齐的大小 像素单位 -padbottom size –padleft size –padright size –padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色) -vn 不做视频记录 -bt tolerance 设置视频码率容忍度kbit/s -maxrate bitrate设置最大视频码率容忍度 -minrate bitreate 设置最小视频码率容忍度 -bufsize size 设置码率控制缓冲区大小 -vcodec codec 强制使用codec编解码方式。 如果用copy表示原始编解码数据必须被拷贝。 -sameq 使用同样视频质量作为源（VBR） -pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率 -passlogfile file 选择两遍的纪录文件名为file c)高级视频选项-g gop_size 设置图像组大小 -intra 仅适用帧内编码 -qscale q 使用固定的视频量化标度(VBR) -qmin q 最小视频量化标度(VBR) -qmax q 最大视频量化标度(VBR) -qdiff q 量化标度间最大偏差 (VBR) -qblur blur 视频量化标度柔化(VBR) -qcomp compression 视频量化标度压缩(VBR) -rc_init_cplx complexity 一遍编码的初始复杂度 -b_qfactor factor 在p和b帧间的qp因子 -i_qfactor factor 在p和i帧间的qp因子 -b_qoffset offset 在p和b帧间的qp偏差 -i_qoffset offset 在p和i帧间的qp偏差 -rc_eq equation 设置码率控制方程 默认tex^qComp -rc_override override 特定间隔下的速率控制重载 -me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full -dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC -idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM -er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE -ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled) -bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4 -mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD -4mv 使用4个运动矢量 仅用于mpeg4 -part 使用数据划分 仅用于mpeg4 -bug param 绕过没有被自动监测到编码器的问题 -strict strictness 跟标准的严格性 -aic 使能高级帧内编码 h263+ -umv 使能无限运动矢量 h263+ -deinterlace 不采用交织方法 -interlace 强迫交织法编码 仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大 -psnr 计算压缩帧的psnr -vstats 输出视频编码统计到vstats_hhmmss.log -vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开 d)音频选项-ab bitrate 设置音频码率 -ar freq 设置音频采样率 -ac channels 设置通道 缺省为1 -an 不使能音频纪录 -acodec codec 使用codec编解码 e)音频/视频捕获选项-vd device 设置视频捕获设备。比如/dev/video0 -vc channel 设置视频捕获通道 DV1394专用 -tvstd standard 设置电视标准 NTSC PAL(SECAM) -dv1394 设置DV1394捕获 -av device 设置音频设备 比如/dev/dsp f)高级选项-map file:stream 设置输入流映射 -debug 打印特定调试信息 -benchmark 为基准测试加入时间 -hex 倾倒每一个输入包 -bitexact 仅使用位精确算法 用于编解码测试 -ps size 设置包大小，以bits为单位 -re 以本地帧频读数据，主要用于模拟捕获设备 -loop 循环输入流。只工作于图像流，用于ffserver测试 1、avi转MP4命令： ffmpeg -i .\\Video.avi -c copy -map 0 video.mp4 或 ffmpeg -i .\\Video.avi -c:v libx264 -crf 19 -preset slow -c:a aac -b:a 192k -ac 2 video.mp4 //剪切视频 ffmpeg -ss 0:1:30 -t 0:0:50 -i 1.avi -vcodec copy -acodec copy 3.mp4 //-r 提取图像的频率，-ss 开始时间，-t 持续时间 在这里插入图片描述 在这里插入图片描述 2、MP4转ts 这个功能很好，而且不影响观看，大小还小了不少。 ffmpeg -i .\\video.mp4 output.ts{% image /imgs/20190904180657848.png '在这里插入图片描述' '' %} 3、视频压缩 压缩命令： 1）ffmpeg -i 123_ffmpeg.mp4 (压缩的文件更大更清晰，一般情况下不用） 2）ffmpeg.exe -i 123.MP4 -b:v 700k 1231_ffmpeg.mp4(压缩的更小，相对模糊一些）第二个压缩成更小的，压缩成2M多的视频，真厉害。 在这里插入图片描述 在这里插入图片描述 4、去除视频声音 ffmpeg -i 1.avi -vcodec copy -an 2.avi 5、合并音频和视频 ffmpeg -i a.wav -i a.avi out.avi 若音频比视频长，画面停留在最后一帧，继续播放声音。 6、给视频添加水印 ffmpeg -i result2.mp4 -vf &quot;drawtext=fontfile=FZBaoHTJW_Xi.TTF: text=&apos;创作者：奮乧妑_仯姩&apos;:x=100:y=10:fontsize=24:fontcolor=yellow:shadowy=2&quot; drawtext.mp4记得下载需要的字体，或者自己电脑去复制都行。你需要更改： FZBaoHTJW_Xi.TTF ：我的字体文件（放在和视频一个目录下，可以网上去下载，或者window电脑目录下复制： C:\\Windows\\Fonts） result2.mp4 ：我的需要添加水印视频 text=’创作者：奮乧妑_仯姩’ ：’创作者：奮乧妑_仯姩’这个是我的水印内容，更改为你自己的 drawtext.mp4 ：添加水印之后生成的视频名字 7、flv 转MP4 ffmpeg -i input.flv output.mp4 8、视频剪辑： //截取从头开始的30s ffmpeg -ss 00:00:00 -t 00:00:30 -i keyoutput.mp4 -vcodec copy -acodec copy split.mp4 //截取从30s开始的30s ffmpeg -ss 00:00:30 -t 00:00:30 -i keyoutput.mp4 -vcodec copy -acodec copy split1.mp4 9、给视频添加字幕srt 参考博主：https://moejj.com/ffmpeg-add-subtitles-and-watermark/ ffmpeg -i video.avi -vf subtitles=subtitle.srt out.avi 10、同时给视频添加音乐+字幕 ffmpeg -i .\\1111.mp4 -i .\\2222.mp3 -vf subtitles=all_mp3_srt.srt out2.avi 11、使用ffmpeg webm 转换 mp4 参考：http://www.voidcn.com/article/p-evqojtvk-bta.html ffmpeg -fflags +genpts -i .\\111.webm -r 24 1.mp4解释： -r 24 代码生成的视频时24帧，你也可以改成30或者60 -i .\\111.webm 111.webm 是我的当前目录下 webm格式的视频 1.mp4 会在当前目录下生成 这个mp4视频 {% image /imgs/20190909125346253.png '在这里插入图片描述' '' %} 12、合并俩个mp4视频 1、先创建个name.txtfile &apos;split1.mp4&apos; file &apos;split2.mp4&apos; 2、命令合并：ffmpeg -f concat -i name.txt -c copy output.mp4{% image /imgs/20190909150212750.png '在这里插入图片描述' '' %} 13、提取视频的音频为MP3 命令： ffmpeg -i .\\result.mp4 -vn .\\result.mp3 生成之前是这种一个MP4文件 在这里插入图片描述 命令处理： 在这里插入图片描述 成功提取出mp3文件 在这里插入图片描述","categories":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://zhaojiafu.github.io/categories/ffmpeg/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://zhaojiafu.github.io/tags/ffmpeg/"}]},{"title":"qqpcmgr_docpro 这个隐藏文件无法删除的问题解决方法","slug":"627ce7ae913664b48ff83e5b4021aa49","date":"2019-09-01T03:34:32.000Z","updated":"2019-12-02T06:45:49.576Z","comments":true,"path":"2019/09/01/627ce7ae913664b48ff83e5b4021aa49/","link":"","permalink":"https://zhaojiafu.github.io/2019/09/01/627ce7ae913664b48ff83e5b4021aa49/","excerpt":"","text":"说明1、这个问题我昨天删除了好一会没有弄成功，然后百度搜索了一下啊，果然找到原因了，其实这个文件夹是我安装的腾讯电脑管家生成的文件，7天，我看我的有4G多，然后搜索到方法测试之后其实很简单。 解决不步骤：1、打开进入电脑管家一次点击进入：工具箱 –&gt; 文档 –&gt; 文档守护者 在这里插入图片描述 2、进入文档守护者的设置中心选择右上角的三个横线，进入设置中心 3、清除设备+修改储存位置 在这里插入图片描述 参考：https://jingyan.baidu.com/article/d7130635960a9213fdf47594.html","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"qqpcmgr_docpro","slug":"qqpcmgr-docpro","permalink":"https://zhaojiafu.github.io/tags/qqpcmgr-docpro/"}]},{"title":"windows下删除HBuilder解压文件夹报错：源文件名长度大于文件系统支持的长度。请尝试将其移动到具有较短路径名称的位置,或者在执行此操作前尝试将其重命名为较短的名称。","slug":"70485ec3ae988b60b613851c34f14fa8","date":"2019-08-31T03:34:32.000Z","updated":"2019-12-02T06:45:48.099Z","comments":true,"path":"2019/08/31/70485ec3ae988b60b613851c34f14fa8/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/31/70485ec3ae988b60b613851c34f14fa8/","excerpt":"","text":"说明今天我打算清理一下电脑的空间，因为确实是之前存的东西太乱了，所以打算今天休息整理一下，但是在进行移动时就报错说源文件名长度大于文件系统支持的长度，然后我就纳闷，百度搜索了一个博客写的，他的就很好删除了，但是我使用确实无效的还是提醒，后来就使用最笨的方法，文件夹一层层进去，然后修改最内侧文件或者文件夹名称为1或者其他单子母也行，然后从内往外一层层删除即可。 问题删除提示: 在这里插入图片描述 方法一 步骤：1、一层层进去，直到看到多个文件夹，点击删除测试看看前面有很多都是单文件夹，我随便截图俩张看懂就行 在这里插入图片描述 在这里插入图片描述 下面就是出现多个文件夹了，可以点击删除看看效果是否也提示长度报错。 在这里插入图片描述 2、这个时候可以将这三个文件夹后面的文件夹都改为1，改个大概三四层就可以删除了。方法 二 步骤（强烈推荐，比较省时省力）：因为刚刚我截图三个的时候，我就已经尝试删除掉俩个文件了，然后才开始写个博客出来，希望帮助到遇到这个问题的人。后来一层一层删除的烦了，想着我官网下载的，既然解压能够使用，应该也可以删除，既然能够用这个软件，那么就应该最使用最内层的模块json数据，所以，把方法一的思路逆向过来 从前面开始更改文件名，直到遇见多个文件夹，然后直接删除所有文件夹尝试，就可以了。（也是修改三次层）有图有真相： 在这里插入图片描述 至此，问题解决，如果有什么问题不懂可以留言给我，如果帮助到你，可以给我点个赞哈，这样以后别人搜索这个问题，搜索到这个解决方法的文章更快一点，也帮助到别人呐 在这里插入图片描述 突然发现都23：01了，收拾下洗漱睡觉，明天接着整理电脑。","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python使用danmaku2ass 将xml字幕转换成ass字幕+ffmpeg将ass字幕合并成含有字幕的视频","slug":"ac081ae484b386b7968f8412323c4d23","date":"2019-08-29T03:34:32.000Z","updated":"2019-12-02T07:00:36.846Z","comments":true,"path":"2019/08/29/ac081ae484b386b7968f8412323c4d23/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/29/ac081ae484b386b7968f8412323c4d23/","excerpt":"","text":"配置window10系统python3.6 说明：今天看到一个很好的GitHub，使用python将xml字幕合并成功ass字幕，如标题所说，注意完成俩件事： 使用danmaku2ass 将xml字幕转换成ass字幕 ffmpeg将ass字幕合并成含有字幕的视频 一、使用danmaku2ass 将xml字幕转换成ass字幕项目地址（记得给人家点个赞，我已经默默的点过了）：https://github.com/m13253/danmaku2ass 使用步骤：1、将项目下载下来， 在这里插入图片描述 2、保留danmaku2ass.py文件（这个是主要的）解压之后，只需要保留py文件，其他用不到，不过人家写的使用方法还是可以去读读，如果只想转下字幕，不读也可以，因为我已经花时间读过了，会用就行了。 在这里插入图片描述 3、使用you-get下载一个B站视频如果不会使用you-get,可以看我之前的一个博客，如果看完会了可以给我点个赞哈，看不会找我算账（留言）：https://blog.csdn.net/weixin_42081389/article/details/87101229 在这里插入图片描述 测试视频推荐下载这个（也是我随便找的，字幕比较多，视频还不大，嘻嘻），你也可以随便下载一个含有字幕的，为了测试省时间，我没有下载项目推荐的哪一个太大的。https://www.bilibili.com/video/av5075910 在这里插入图片描述 4、开始转换字幕默认你会python呀，不会自己去B站或者其他网上学习吧。记得先把字幕文件xml和视频名字改一下，因为cmd下中文影响，我这边改为001了： python .\\danmaku2ass.py -o .\\001.ass -s 1920x1080 -fn &quot;MS PGothic&quot; -fs 48 -a 0.8 -dm 10 -ds 5 .\\001.xml解释下命令： 项目原命令使用解释如图： 在这里插入图片描述 我的中文解释（根据自己需要，不够看项目吧） python .\\danmaku2ass.py 这个不用将都懂了 -o :后面是转换ass成功之后的报存地址和名称 -s ：像素这个我直接按项目的，没有改 -fn : 指定的字体 -a : 文本不透明度 -fs ：字体大小 -dm ：滚动字幕的时间（我的理解是出现在屏幕上的时间，默认是5秒，弄成之后，感觉太快了，后来就设置10秒） -ds ：静态字幕的时间（默认5秒） 后面最后根据就是需要转换的xml字幕。 5、使用播放器打开视频就会出现字幕了注意事项： 视频和字幕名称要一样 视频和字幕要在一个目录下面 效果图： 在这里插入图片描述 6、测试一下没有字幕文件的视频新建一个文件夹，只复制视频过来。 在这里插入图片描述 二、ffmpeg将ass字幕合并成含有字幕的视频0、来源这个合成是我看到项目里面的一句话，就想着以前没有弄个，尝试一下。 在这里插入图片描述 1、ffmpeg不会安装的参考我之前的博客：https://blog.csdn.net/weixin_42081389/article/details/90172120 2、ffmpeg一条命令合成字幕视频这个就简单了，一条命令搞定： ffmpeg -i .\\001.flv -vf ass=001.ass -vcodec libx264 -acodec copy foo-with-danmaku.flv命令解释： -i 后面跟的是视频文件 -vf 后面跟单是字幕文件（-vf ass=字幕名字） -acodec copy 后面跟的就是后面合成之后的名字，可以自己更改 -vcodec libx264 这个好像是视频的一种编码，我不太了解，反正不用更改。 {% image /imgs/20190829152131221.png '在这里插入图片描述' '' %} 3、将合成的视频单独复制到一个文件夹，看看是否含有字幕：有图有真相，看图就懂了，基本上我截图都在一个位置， {% image /imgs/20190829153447671.png '在这里插入图片描述' '' %} {% image /imgs/20190829153846962.png '在这里插入图片描述' '' %} 到此结束，又get到一个技能{% image /imgs/20190829154148625.png '在这里插入图片描述' '' %} 三、将danmaku2ass.py文件打包成exe(后来补充)1、灵感来源这个测试灵感是因为我想到you-get 可以直接使用，想着danmaku2ass.py文件是不是可以像you-get一样，不用前面的pytho,也能一样，然后开始测试寻找方法了。 2、看看you-get在哪里{% image /imgs/20190829163302214.png '在这里插入图片描述' '' %} {% image /imgs/20190829161824278.png '在这里插入图片描述' '' %} 3、打包开始：1、不会打包参考：如果不会打包的，参考我的另一个之前博客：https://blog.csdn.net/weixin_42081389/article/details/94899316 2、直接打包命令：pyinstaller -F .\\danmaku2ass.py -i .\\cbb7t-eo59j-001.ico 生成如图： dist目录下面就是我们生成的exe 在这里插入图片描述 4、将打包之后的danmaku2ass.exe复制到和you-get一样的目录下 在这里插入图片描述 5、测试是否成功进入cmd，然后命令： danmaku2ass ：看看是否出现参数说明 where danmaku2ass ：是否出现位置 在这里插入图片描述 6、下载视频和字幕（前面有命令，我不解释了） 在这里插入图片描述 7、更改名字 在这里插入图片描述 8、打包命令： 在这里插入图片描述 是不是已经达到和you-get命令一样的效果了，嘿嘿 在这里插入图片描述 直接点开视频看看效果是不是一样，哈哈，果然一样。截图给你看看 在这里插入图片描述 后面合成测试我就没有必要再弄了，至此打包使用结束了，觉得不错点个赞再走吧 在这里插入图片描述","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"pyinstaller 打包报错： AttributeError_ 'str' object has no attribute 'decode'","slug":"755ec4031b51cb0075e88fe283a2aba0","date":"2019-08-28T03:34:32.000Z","updated":"2019-12-02T07:40:52.740Z","comments":true,"path":"2019/08/28/755ec4031b51cb0075e88fe283a2aba0/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/28/755ec4031b51cb0075e88fe283a2aba0/","excerpt":"","text":"说明：这个错误的原因我也不太清楚，因为我之前打包是没有问题的，这次突然想打包一个文件，然后就报错了，所以，搜索了一番，找到一个大概意思看懂了，但是没有写出解决步骤，所以自己尝试一下，成功解决。所以记录下来，嘻嘻 在这里插入图片描述 一、问题：pyinstaller 打包报错： 具体错误代码： PS D:\\zjf_workspace\\000、爬虫代码-基础的\\scrapy_100_工具\\11、视频处理&gt; pyinstaller -F .\\cv2视频截帧.py 525 INFO: PyInstaller: 3.5 525 INFO: Python: 3.6.8 527 INFO: Platform: Windows-10-10.0.17134-SP0 530 INFO: wrote D:\\zjf_workspace\\000、爬虫代码-基础的\\scrapy_100_工具\\11、视频处理\\cv2视频截帧.spec 566 INFO: UPX is not available. 575 INFO: Extending PYTHONPATH with paths [&apos;D:\\\\zjf_workspace\\\\000、爬虫代码-基础的\\\\scrapy_100_工具\\\\11、视频处理&apos;, &apos;D:\\\\zjf_workspace\\\\000、爬虫代码-基础的\\\\scrapy_100_工具\\\\11、视频处理&apos;] 576 INFO: checking Analysis 577 INFO: Building Analysis because Analysis-00.toc is non existent 577 INFO: Initializing module dependency graph... 601 INFO: Initializing module graph hooks... 604 INFO: Analyzing base_library.zip ... Traceback (most recent call last): File &quot;d:\\tools\\python3.6\\lib\\runpy.py&quot;, line 193, in _run_module_as_main &quot;__main__&quot;, mod_spec) File &quot;d:\\tools\\python3.6\\lib\\runpy.py&quot;, line 85, in _run_code exec(code, run_globals) File &quot;D:\\tools\\Python3.6\\Scripts\\pyinstaller.exe\\__main__.py&quot;, line 9, in &lt;module&gt; File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\__main__.py&quot;, line 111, in run run_build(pyi_config, spec_file, **vars(args)) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\__main__.py&quot;, line 63, in run_build PyInstaller.building.build_main.main(pyi_config, spec_file, **kwargs) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\building\\build_main.py&quot;, line 844, in main build(specfile, kw.get(&apos;distpath&apos;), kw.get(&apos;workpath&apos;), kw.get(&apos;clean_build&apos;)) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\building\\build_main.py&quot;, line 791, in build exec(code, spec_namespace) File &quot;D:\\zjf_workspace\\000、爬虫代码-基础的\\scrapy_100_工具\\11、视频处理\\cv2视频截帧.spec&quot;, line 17, in &lt;module&gt; noarchive=False) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\building\\build_main.py&quot;, line 243, in __init__ self.__postinit__() File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\building\\datastruct.py&quot;, line 158, in __postinit__ self.assemble() File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\building\\build_main.py&quot;, line 349, in assemble excludes=self.excludes, user_hook_dirs=self.hookspath) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\depend\\analysis.py&quot;, line 608, in initialize_modgraph required_mods += collect_submodules(m) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\utils\\hooks\\__init__.py&quot;, line 624, in collect_submodules repr(pkg_dir), package)) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\utils\\hooks\\__init__.py&quot;, line 83, in exec_statement return __exec_python_cmd(cmd) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\utils\\hooks\\__init__.py&quot;, line 72, in __exec_python_cmd txt = exec_python(*cmd, env=pp_env) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\compat.py&quot;, line 637, in exec_python return exec_command(*cmdargs, **kwargs) File &quot;d:\\tools\\python3.6\\lib\\site-packages\\PyInstaller\\compat.py&quot;, line 427, in exec_command out = out.decode(encoding) AttributeError: &apos;str&apos; object has no attribute &apos;decode&apos;错误图： 在这里插入图片描述 二、解决步骤：1、谷歌或者百度搜索： 在这里插入图片描述 上面这俩个我都看了，但是第一个我按他的步骤没有解决问题，博客地址： https://blog.csdn.net/jylonger/article/details/86537290 第二个：大概意思看懂了，其实错误人家也说出来了，https://blog.csdn.net/qq_41185868/article/details/82079079 错误提示，意思就是他是字符串类型的，不能再decode,所以,我复制错误的地址，使用pycharm打开，然后复制out = out.decode(encoding)一句，然后搜索进行修改人家的模块（记得先备份一份，防止改错，如果改错还能还原） 在这里插入图片描述 打开之后，下面是我改的方法，很简单，就是在原先的基础上增加个条件，做个判断，如果是字符串类行的，直接跳过，如果是其他的还和之前代码功能一样。 在这里插入图片描述 三、成功运行再次执行打包命令，成功运行：高兴 在这里插入图片描述 效果图： 在这里插入图片描述","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"python打包","slug":"python打包","permalink":"https://zhaojiafu.github.io/tags/python%E6%89%93%E5%8C%85/"}]},{"title":"文件访问被拒绝XXX 你需要权限才能执行此操作你需要计算机管理员提供的权限才能对此文件进行更改","slug":"4e43a71e6cf8eb412ede54c6bd9c2c27","date":"2019-08-28T03:34:32.000Z","updated":"2019-12-02T06:45:48.338Z","comments":true,"path":"2019/08/28/4e43a71e6cf8eb412ede54c6bd9c2c27/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/28/4e43a71e6cf8eb412ede54c6bd9c2c27/","excerpt":"","text":"1、问题，今天window上下载个视频，但是打不开了，直接删除，还弹出无法删除：图我 在这里插入图片描述 就是类似的说文件无法删除，没有权限。 文件访问被拒绝 你需要权限才能执行此操作你需要计算机管理员提供的权限才能对此文件进行更改2、解决办法：shitf + delete（强制删除）刚开始，网上搜了一个办法，谷歌第一个推荐的，但是不好用（对我自己这个电脑来说，无效），https://blog.csdn.net/lanluyug/article/details/76559748 后来我使用shitf + delete 强制删除就可以了。 3、补充一下（这个是我新遇见的问题，电脑关机重启）强制删除无效如果第二步的强制删除都删除不了的，可以把电脑关机重启一下哈，然后再次使用shitf + delete（强制删除），就解决了，这次忘记截图了，如果遇到，可以尝试试试。","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python 使用execjs执行接js解密时报错execjs UnicodeDecodeError_ 'gbk' codec can't decode byte","slug":"c874a52b55520ef216408aef77566b68","date":"2019-08-21T03:34:32.000Z","updated":"2019-12-02T07:00:36.871Z","comments":true,"path":"2019/08/21/c874a52b55520ef216408aef77566b68/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/21/c874a52b55520ef216408aef77566b68/","excerpt":"","text":"@[toc] 需求：python使用execjs执行解密js代码时候，发现报错，然后经过俩个多小时最终找到问题所在，解决问题。 在这里插入图片描述 一、报错内容报错内容：UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xa1 in position 26: illegal multibyte sequence 具体： Exception in thread Thread-1: Traceback (most recent call last): File &quot;D:\\tools\\Python3.6\\lib\\threading.py&quot;, line 916, in _bootstrap_inner self.run() File &quot;D:\\tools\\Python3.6\\lib\\threading.py&quot;, line 864, in run self._target(*self._args, **self._kwargs) File &quot;D:\\tools\\Python3.6\\lib\\subprocess.py&quot;, line 1083, in _readerthread buffer.append(fh.read()) UnicodeDecodeError: &apos;gbk&apos; codec can&apos;t decode byte 0xa1 in position 26: illegal multibyte sequence Traceback (most recent call last): File &quot;D:/zjf_workspace/003、自己测试用的/002加密和验证码破解/02-js加密破解/022、梦幻西游藏宝阁/执行.py&quot;, line 11, in &lt;module&gt; result = ct.call(&apos;decode_desc&apos;, _0x1c0cdf) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_abstract_runtime_context.py&quot;, line 37, in call return self._call(name, *args) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 92, in _call return self._eval(&quot;{identifier}.apply(this, {args})&quot;.format(identifier=identifier, args=args)) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 78, in _eval return self.exec_(code) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_abstract_runtime_context.py&quot;, line 18, in exec_ return self._exec_(source) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 87, in _exec_ output = self._exec_with_pipe(source) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 103, in _exec_with_pipe stdoutdata, stderrdata = p.communicate(input=input) File &quot;D:\\tools\\Python3.6\\lib\\subprocess.py&quot;, line 863, in communicate stdout, stderr = self._communicate(input, endtime, timeout) File &quot;D:\\tools\\Python3.6\\lib\\subprocess.py&quot;, line 1133, in _communicate stdout = stdout[0] IndexError: list index out of range二、解决方法1：用python实现内部错误的地方，主要我还是找到了。 问题起源，代码放在浏览器中直接执行代码和nodejs中执行也是可以的，就是python的execjs不能执行。 所以，这就让我纳闷了，明明就破解出来了，然后各种谷歌搜索，寻找答案：最终结果是，python的execjs只支持一些常规的js代码，我哪里知道什么是常规，别慌，用笨方法一步一步return js函数的主要步骤，最终让我找到了原因，用python使用Unicode反编译转中文报错，可能就认为这个不是常规的语句吧，把需要编译的数组返回的python中，使用python chr()函数，自己用python实现就可以了，（这个问题弄了将近我俩个小时才找到原因。。。伤心 在这里插入图片描述 ） 知道了一个python 执行execjs不能识别的问题， 在这里插入图片描述 错误图 在这里插入图片描述 将js的fromCharCode用python chr函数处理报错地方。==主要的代码逻辑(后续补充)：== 1print('result111', result)2 # result111 ['100011', '1110010', '111101101001001', '111111010100111', '100000', '110001', '110010', '110000', '100000', '100000', '100111010010100', '1000100001001100', '100000', '110110000110100', '100011', '1110010', '100011', '1110010', '100111100100100', '101101110110011', '100000', '101011', '110011', '111001', '110110', '100000', '101010001111101', '100111000101101', '100000', '101011', '110110', '111000', '110000', '100011', '1110010', '1000000000010000', '100111001000101', '101111010100110', '100000', '110010', '110000', '110111', '100000', '100000', '100111111101110', '111010000000110', '101100100110001', '1000110100100101', '100000', '110001', '110101100100001', '100011', '1110010', '1001010100111011', '111000010111100', '111101101001001', '111111010100111', '100000', '110001', '110001', '100000', '100000', '1001010101110110', '101110101001100', '101101110011101', '111011111110011', '100000', '101100100101010', '1001011000110011', '111011111110011', '11000000000001', '100000', '111111010100010', '111001110011011', '111010001011001', '100011', '1011001', '100011', '1110010', '100011', '1100011', '110100', '1000100', '1000010', '1000001', '1000110', '110100', '111001001111001', '110010101001000', '1111111100011010', '100011', '1100011', '110100', '1000100', '1000010', '1000001', '1000110', '110100', '110010111100000', '111111010100111', '101001000101011', '1001011001010000', '101001000110110', '100011', '1011001', '100011', '1110010', '100011', '1000111', '101111100000000', '1000111111010000', '101101101010100', '110010101110000', '1111111100011010', '110100', '101101101010100', '101111', '110100', '101101101010100', '100000', '101000', '101001111001100', '110100', '101101101010100', '101001', '100011', '1000111', '100011', '1110010', '111101100100110', '111011111110011', '111010', '100000', '100111101010011', '1000110100101000', '100000', '101011', '110001', '100000', '100111100100100', '101101110110011', '100000', '101011', '110001', '101110', '110101', '100011', '1101110', '100011', '1000111', '100011', '1110010', '111101100100110', '111011111110011', '111010', '100000', '101001010011011', '1001000111001111', '100000', '101011', '110001', '100000', '110110000010100', '1000100001000000', '100000', '101011', '110001', '110000', '100011', '1101110', '100011', '1000111', '100011', '1110010', '111101100100110', '111011111110011', '111010', '100000', '101001010011011', '1001000111001111', '100000', '101011', '110001', '100000', '110110000010100', '1000100001000000', '100000', '101011', '110001', '110000', '100011', '1101110', '100011', '1000111', '100011', '1110010', '111101100100110', '111011111110011', '111010', '100000', '110110000010100', '1000100001000000', '100000', '101011', '110001', '110101', '100000', '1001000000011111', '101111010100110', '100000', '101011', '110001', '101110', '110101', '100011', '1101110', '100011', '1000111', '100011', '1110010', '110011000011111', '100111101001101', '1111111100011010', '1001000000011111', '101111010100110', '100000', '101011', '110010', '100011', '1101110', '100011', '1000111', '100011', '1110010', '110011000011111', '111011011111000', '100111010010010', '101010000001000', '1111111100011010', '100111101010011', '1000110100101000', '100000', '101011', '110010', '100011', '1110010', '100011', '1100011', '1000101', '1000101', '111000', '110010', '1000101', '1000101', '111101100100110', '111011111110011', '111111011000100', '101010000001000', '111010', '100000', '101100110000010', '110000100001111', '1001000111010001', '111101110001101', '111101100100110', '111011111110011', '100011', '1110010', '1001010111101000', '110110100111110', '110011101100001', '100111011110110', '1111111100011010', '1000001010110001', '110011110011100', '101110001110001', '100000', '100011', '1110010', '1001000011101000', '100111101001101', '110011101100001', '100111011110110', '1111111100011010', '110101101100110', '101011001101000', '100000', '100011', '1110010', '101100010011110', '101001010100000', '1001010111101000', '110110100111110', '110001010000000', '1000000011111101', '101100110000010', '110000100001111', '1001000111010001', '111101110001101', '111101101001001', '111111010100111', '110100', '111111010100111', '100011', '1011001', '100011', '1110010', '100011', '1010111', '101001000110110', '1001000000100000', '1000000000000101', '1111111100011010', '11000001010000', '110001100011010', '110000011000101', '1000110100011101', '1000101111111010', '10110000', '100011', '1011001', '100000', '100000']3 _0x36ab38 = []4 for i in result:5 print('int(i, 2)',i,int(i, 2))6 _0x36ab38.append(chr(int(i, 2)))78 return ''.join(_0x36ab38) 其实，int(i, 2)就是将二进制转换成十进制，然后将十进制，使用chr()函数转换为正常的中文字符或者其他字符串。 下面是使用window自带的计算器，二进制转换的结果。和代码的比对。 在这里插入图片描述 为了是看到的理解的更清楚，我这里使用python的chr和js的fromCharCode函数将Unicode编码转换成汉语和汉语的标点符号再或者其他语言字符都可以的。下面是我特意把对比图弄出来，方便不懂得了解下。其实这个就是我当时找到python执行execjs不支持的地方，可能有其他更简单方法，只不过我没有找到。如果帮助到你可以给我点个赞哈，加油！ 在这里插入图片描述 python实现之后效果图 在这里插入图片描述 高兴，美滋滋，晚上能多吃个馒头，哈哈 在这里插入图片描述 三、解决方法2、修改编码文件的默认编码格式为utf-8,默认window下是gbk。 这个是我再次遇见错误，特意来补充一下： Exception in thread Thread-1: Traceback (most recent call last): File &quot;D:\\tools\\Python3.6\\lib\\threading.py&quot;, line 916, in _bootstrap_inner self.run() File &quot;D:\\tools\\Python3.6\\lib\\threading.py&quot;, line 864, in run self._target(*self._args, **self._kwargs) File &quot;D:\\tools\\Python3.6\\lib\\subprocess.py&quot;, line 1083, in _readerthread buffer.append(fh.read()) UnicodeDecodeError: &apos;gbk&apos; codec can&apos;t decode byte 0xb4 in position 211: illegal multibyte sequence Traceback (most recent call last): File &quot;D:/zjf_workspace/003、自己测试用的/002加密和验证码破解/02-js加密破解/023、烯牛数据/执行.py&quot;, line 44, in &lt;module&gt; result_decode = get_decode(data) File &quot;D:/zjf_workspace/003、自己测试用的/002加密和验证码破解/02-js加密破解/023、烯牛数据/执行.py&quot;, line 34, in get_decode result_decode = ct.call(&apos;decode_get_data&apos;, data) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_abstract_runtime_context.py&quot;, line 37, in call return self._call(name, *args) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 92, in _call return self._eval(&quot;{identifier}.apply(this, {args})&quot;.format(identifier=identifier, args=args)) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 78, in _eval return self.exec_(code) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_abstract_runtime_context.py&quot;, line 18, in exec_ return self._exec_(source) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 87, in _exec_ output = self._exec_with_pipe(source) File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\execjs\\_external_runtime.py&quot;, line 103, in _exec_with_pipe stdoutdata, stderrdata = p.communicate(input=input) File &quot;D:\\tools\\Python3.6\\lib\\subprocess.py&quot;, line 863, in communicate stdout, stderr = self._communicate(input, endtime, timeout) File &quot;D:\\tools\\Python3.6\\lib\\subprocess.py&quot;, line 1133, in _communicate stdout = stdout[0] IndexError: list index out of range解决步骤1、进去错误这个D:\\tools\\Python3.6\\lib\\subprocess.py文件 在这里插入图片描述 2、搜索：encoding=这个搜索方式，是我找了好一会才懂，所以记录下来，大家可以参考下。 3、修改编码格式为utf-8注意事项： 建议备份一行，毕竟修改的是模块的源码，万一弄错了好改回来。敲代码最忌不懂，乱改还不保留，这样很招人烦的，尤其团队合作时。 在这里插入图片描述 至此修改完毕，可以尝试运行了看我的运行，没有错误了，当然这个不是我第一个发现的，这个方法是我觉得之前应该有人遇到过，不过第一个方法是自己当时没有搜到这个方法，自己一点一点断点调试出问题所在，然后用python重写实现的解密逻辑。这个比较简单，原博客我看到的也是一头雾水，因为我看到时，他的图片已经无法打开了，全凭感觉自己搜索的关键词修改，还好让我蒙对了，嘻嘻 在这里插入图片描述 在这里插入图片描述 参考搜到的博客：https://www.twblogs.net/a/5c9fb281bd9eee5b1a06835a/zh-cn","categories":[{"name":"JS反反爬","slug":"JS反反爬","permalink":"https://zhaojiafu.github.io/categories/JS%E5%8F%8D%E5%8F%8D%E7%88%AC/"},{"name":"python爬虫","slug":"JS反反爬/python爬虫","permalink":"https://zhaojiafu.github.io/categories/JS%E5%8F%8D%E5%8F%8D%E7%88%AC/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"JS反反爬","slug":"JS反反爬","permalink":"https://zhaojiafu.github.io/tags/JS%E5%8F%8D%E5%8F%8D%E7%88%AC/"}]},{"title":"爬虫解决--反调试之无限debugger","slug":"631ee538bd13e908439a70593365e051","date":"2019-08-20T03:34:32.000Z","updated":"2019-12-02T07:40:52.614Z","comments":true,"path":"2019/08/20/631ee538bd13e908439a70593365e051/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/20/631ee538bd13e908439a70593365e051/","excerpt":"","text":"需求：对于一些网站，人家是不让使用前端调试，不然就无限出现debugger，然后自己也很无奈，说下我学到的俩个解决方法思路吧。 方法一：对debugger编写断点false，使之失效。在debugger处，前面对应的行数右击，（记得指针在行数位置上，这个点我也弄了好久才弄出来），选择第三项 Add conditional breakpoint，然后填写一个false回车确定即可，然后如果 在这里插入图片描述 在这里插入图片描述 后来我发现，也可以先点个断点变成蓝色，然后编辑，填写false，效果是一样的。 在这里插入图片描述 在这里插入图片描述 效果一夜，然后点击右上角，继续断点，结果无限debugger消失了，至此解决。 方法二、使用fiddler替换我是默认为你电脑上的fiddler可以直接使用的，配置使用本文章不讲解，可以百度搜索。 1、先将需要替换的js下载保存到本地，然后进行修改debugger处。2、然后进入fiddler，按下图步骤进入填写。 在这里插入图片描述 在这里插入图片描述 关闭替换之后，就是原来的代码了。 在这里插入图片描述 参考：https://segmentfault.com/a/1190000012359015https://mp.weixin.qq.com/s?__biz=MzIwNDI1NjUxMg==&amp;mid=2651261739&amp;idx=1&amp;sn=1403385e24bc8be953b5c930a7164f63&amp;scene=19#wechat_redirect","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"},{"name":"JS反反爬","slug":"JS反反爬","permalink":"https://zhaojiafu.github.io/tags/JS%E5%8F%8D%E5%8F%8D%E7%88%AC/"}]},{"title":"搜狗拼音带来的俩个烦人的弹窗解决方法","slug":"c69443b0b8ae87a5811a5391e498adc6","date":"2019-08-19T03:34:32.000Z","updated":"2019-12-02T07:00:36.638Z","comments":true,"path":"2019/08/19/c69443b0b8ae87a5811a5391e498adc6/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/19/c69443b0b8ae87a5811a5391e498adc6/","excerpt":"","text":"1、搜狐的新闻进入你安装的搜狗拼音的目录下，进入数字的文件夹，把SohuNews 这个选中它，shift+delete，将它彻底删除。直接delete还会出来，这样就解决了。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 2、提示安装搜狗浏览器清理垃圾我没安装搜狗浏览器，却是弹窗显示搜狗浏览器说要清理垃，这个就很烦人了，而且我点击关闭什么的都无效。 解决办法，按ctrl + alt 就会关闭了。图片忘记截图了，按了之后俩天没有出来了。 参考：http://www.jiaochengzhijia.com/tool/4358.html","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python 使用twilio进行发短信","slug":"63a00381203bdbc6a39c22c5f25f80a6","date":"2019-08-12T03:34:32.000Z","updated":"2019-12-02T06:45:48.828Z","comments":true,"path":"2019/08/12/63a00381203bdbc6a39c22c5f25f80a6/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/12/63a00381203bdbc6a39c22c5f25f80a6/","excerpt":"","text":"1、说明：这个主意我还是看到一个公众号，然后有说可以发短信，然后就搜索了一下，确实有这些第三方平台，好像可以免费用一定次数，因为注册后送了15美元，我只是测试，目前还没有过多使用。 2、开始注册账号：1、官网：https://www.twilio.com/注册过程我直接截图，看图就懂了。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 输完账号和密码后，会弹出一个验证：（因为我刚刚注册成功了，现在找不到手机输入界面了，所以如果你看需要手机验证的界面。要输入手机账号，手机会收到验证码，然后才可以成功注册。） 如过遇到这种点击验证码，把动物的图像调正就行了。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 2、寻找python的使用案例demo需要安装一个模块： pip install twilio代码案例：https://www.twilio.com/docs/sms/quickstart/python或者 https://www.twilio.com/docs/python/install 也可以直接使用我下面给你的： https://www.twilio.com/console 访问这个出现下面你的sid\\token\\申请成功的手机号 {% image /imgs/20190812144758969.png '在这里插入图片描述' '' %} # Download the helper library from https://www.twilio.com/docs/python/install from twilio.rest import Client # Your Account Sid and Auth Token from twilio.com/console # DANGER! This is insecure. See http://twil.io/secure account_sid = &apos;你自己的sid&apos; auth_token = &apos;你注册成功之后的token&apos; client = Client(account_sid, auth_token) message = client.messages.create( body=&quot;你好，这是我的第一个测试短信&quot;, from_=&apos;+自己申请的手机号&apos;, to=&apos;+86自己需要接收短信的手机号（国内前面要带+86），不然报错&apos; ) print(message.sid)注意一点，我收到短信的手机号和我申请成功的手机号不是同一个，不知道什么原因谷歌平台隐藏了。参考：https://blog.csdn.net/Gents_hu/article/details/86434542","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"发短信","slug":"发短信","permalink":"https://zhaojiafu.github.io/tags/%E5%8F%91%E7%9F%AD%E4%BF%A1/"}]},{"title":"Fiddler抓包工具总结（转载）","slug":"9a53b0313e2eba536dc91640d28c3a2f","date":"2019-08-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.367Z","comments":true,"path":"2019/08/02/9a53b0313e2eba536dc91640d28c3a2f/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/02/9a53b0313e2eba536dc91640d28c3a2f/","excerpt":"","text":"说明：做下说明，我的这个博客是个转载，我本来想一点一点弄，但是觉得很费时间，觉得不错，就留着链接这个只是我写的代码，进行一个全图截屏的图片，多余的用画图删减了，如果原博客还能看，推荐去看原博客，原博客地址：https://www.cnblogs.com/yyhh/p/5140852.html#!comments下面只是一个图片哈，再次说明，弄成一个截屏，是为了防止，博主删除博客，这样我就看不到可，下面图片只是备用，O(∩_∩)O哈哈~如果不删减是5.5M，大于博客支持上传的最大图片（小于5M），所以删除了多余部分，如果很的很大，还可以将图片分割小点。 其他是我学习和后来慢慢学习搜索积累整理的新增的。 一些自己认为需要掌握的点新增一个官网doc地址：https://docs.telerik.com/fiddler/knowledgebase/quickexec 1、https的选项如果抓手机的网络选择第四个，如果抓取浏览器选择第二个，其他的自己看自己需要吧。 在这里插入图片描述 from all processes : 抓取所有的 https 程序, 包括 本机 和 手机 from browsers only : 只抓取浏览器中的 https 请求 from non-browsers only : 只抓取除了浏览器之外的所有 https 请求 from remote clients only ： 抓取远程的客户端的 https ,可以代表手机2、抓取手机设置 需要把下图的打开 然后需要电脑能开热点，手机连接电脑开启的热点，并且再WiFi里面设置设置手动代理（ip为热点电脑的ip，端口就和下图的8888一致） 设置上一步的HTTPS为from remote clients only（建议）或者 from all processes 在手机里面浏览器，搜索刚刚开热点的电脑ip+8888(比如ip为123.32.2.123，在手机浏览器输入123.32.2.123:8888),然后在页面点击最下方的FiddlerRoot certificate，下载证书安装，就可以监控手机了。 不需要监控手机抓包时记得把WiFi代理去掉，不然可能手机链接这个热点时，不开启fiddler上不了网。 再不懂就参考这个吧：https://jingyan.baidu.com/article/03b2f78c7b6bb05ea237aed2.html 在这里插入图片描述 在这里插入图片描述 3、find的使用 在这里插入图片描述 1. Search下拉菜单，指定搜索范围默认为Requests and responses，请求和响应都在搜索范围内 Requests only 只搜索请求 Responses only 只搜索响应 URLs only 只搜索URL ，当我们选择URLs only 时，Search下方的Examine下拉菜单不可以使用，因为Url没有Headers和bodies 2、Examine检测当我们选择搜索请求/响应时，可以选择只搜索Headers或只搜索Bodies，默认是Headers和bodies都搜索 3、范围选定后，Fiddler还提供了一组复选框 在这里插入图片描述 Match case 大小写敏感 Regular Expression 使用正则表达式 Search binaries 二进制搜索，如音频，视频，Flash对象等 Decode compressed content 解码压缩内容，返回的body是encoded的，将所有的Responses decode后搜索，比较耗时 Search only selected sessions 只搜索选中的回话。选中多个Sessions会默认激活选中 Select matches 选择匹配。选中符合条件的搜索结果 Unmark old results 取消标记旧的搜索结果 Result Highlight 结果高亮显示。 当不勾选Unmark old results时，每次搜索的结果会在Unmark old results循环使用不同的颜色作为背景高亮显示转载的图片 在这里插入图片描述","categories":[{"name":"python抓包Fiddler","slug":"python抓包Fiddler","permalink":"https://zhaojiafu.github.io/categories/python%E6%8A%93%E5%8C%85Fiddler/"}],"tags":[{"name":"Fiddler","slug":"Fiddler","permalink":"https://zhaojiafu.github.io/tags/Fiddler/"},{"name":"抓包工具","slug":"抓包工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/"}]},{"title":"ImportError_ numpy.core.multiarray failed to import","slug":"1b800e4286ceac2d22ecba334bb261b7","date":"2019-08-02T03:34:32.000Z","updated":"2019-12-02T06:45:49.175Z","comments":true,"path":"2019/08/02/1b800e4286ceac2d22ecba334bb261b7/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/02/1b800e4286ceac2d22ecba334bb261b7/","excerpt":"","text":"问题今天再GitHub上下载一个去重马赛克的源码，然后测试，安装好相关模块之后，解决运行报错：地址：https://github.com/deeppomf/DeepCreamPy/releases/tag/v1.3.0-beta 其中后面的错误就是由于numpy.core.multiarray failed to import这个错误引起的然后开始寻找解决方法，谷歌搜索，看看人家解决办法。 Using TensorFlow backend. ModuleNotFoundError: No module named &apos;numpy.core._multiarray_umath&apos; ImportError: numpy.core.multiarray failed to import The above exception was the direct cause of the following exception: Traceback (most recent call last): File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 968, in _find_and_load SystemError: &lt;class &apos;_frozen_importlib._ModuleLockManager&apos;&gt; returned a result with an error set ImportError: numpy.core._multiarray_umath failed to import ImportError: numpy.core.umath failed to import 2019-08-02 10:42:07.615740: F tensorflow/python/lib/core/bfloat16.cc:675] Check failed: PyBfloat16_Type.tp_base != nullptr 解决方法：搜索到的问题链接，里面有个解决方法： pip install numpy --upgrade","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"numpy","slug":"numpy","permalink":"https://zhaojiafu.github.io/tags/numpy/"}]},{"title":"ERROR_ tensorflow 1.13.1 has requirement tensorboard","slug":"9e0c069b6480441ea09639d4c77da2dd","date":"2019-08-02T03:34:32.000Z","updated":"2019-12-02T06:45:47.762Z","comments":true,"path":"2019/08/02/9e0c069b6480441ea09639d4c77da2dd/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/02/9e0c069b6480441ea09639d4c77da2dd/","excerpt":"","text":"问题：今天安装一个GitHub分享的代码，结果说有俩个模块不支持，后来numpy模块更新，还提示这个错误。然后我就开始寻找解决方法。。。 ERROR: tensorflow 1.13.1 has requirement tensorboard&lt;1.14.0,&gt;=1.13.0, but you&apos;ll have tensorboard 1.10.0 which is incompatible. 解决方法三个命令就可以了， 1. pip uninstall tensorflow 2. pip uninstall tensorboard 3. pip install --upgrade tensorflow谷歌搜到一个链接：https://github.com/tensorflow/tensorboard/issues/1255 里面我找到一个方法就是我上面的三个步骤，想看可以看看，下面是我的过程图： 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"tensorflow","slug":"tensorflow","permalink":"https://zhaojiafu.github.io/tags/tensorflow/"}]},{"title":"The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.","slug":"e13391827d99c80f7480a09835ac74b3","date":"2019-08-02T03:34:32.000Z","updated":"2019-12-02T07:26:18.308Z","comments":true,"path":"2019/08/02/e13391827d99c80f7480a09835ac74b3/","link":"","permalink":"https://zhaojiafu.github.io/2019/08/02/e13391827d99c80f7480a09835ac74b3/","excerpt":"","text":"问题今天执行一个大牛的代码，报了好几个错误，然后有出现一个警告，然后我开始寻找解决办法。 Using TensorFlow backend. WARNING: Logging before flag parsing goes to stderr. W0802 12:33:26.441805 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead. W0802 12:33:26.454814 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead. W0802 12:33:26.458796 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead. W0802 12:33:26.539761 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead. W0802 12:33:26.539761 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:181: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead. W0802 12:33:26.585739 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:1834: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead. W0802 12:33:27.051462 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:2018: The name tf.image.resize_nearest_neighbor is deprecated. Please use tf.compat.v1.image.resize_nearest_neighbor instead. W0802 12:33:27.818015 67068 deprecation_wrapper.py:119] From D:\\tools\\_virtualenv_dir\\myproject_2_quchumasaike\\env2_py36_quchumasaike\\lib\\site-packages\\keras\\optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead. 解决方法我找到一个问题连接：https://github.com/keras-team/keras/issues/13004 先按里面有个说版本不对，测试换个tensorflow版本，卸载已经安装的版本（我是已经为这个项目创建个虚拟环境，window系统，如果不会可以看我之前的博客，关于window虚拟环境的） 1、先卸载 pip uninstall tensorflow 2、安装1.5.0版本 pip install tensorflow==1.5.0然后问题解决了，看看效果： 在这里插入图片描述","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"TensorFlow","slug":"TensorFlow","permalink":"https://zhaojiafu.github.io/tags/TensorFlow/"}]},{"title":"etree.HTML 报错： ValueError_ Unicode strings with encoding declaration","slug":"5344e71683b2b1a5dadf140ec0446fc7","date":"2019-07-26T03:34:32.000Z","updated":"2019-12-02T06:45:49.261Z","comments":true,"path":"2019/07/26/5344e71683b2b1a5dadf140ec0446fc7/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/26/5344e71683b2b1a5dadf140ec0446fc7/","excerpt":"","text":"@[toc] 1、报错内容 在这里插入图片描述 ValueError: Unicode strings with encoding declaration are not supported. Please use bytes input or XML fragments without declaration.我的代码：报错定位到是html = etree.HTML(resp_text)解析页面，但是我页面打出来，是没有问题的。 resp_text = resp.text html = etree.HTML(resp_text)最后我用笨方法，翻译一下，看看具体意思就是传如的有问题 然后我开始使用： resp_text = resp.content html = etree.HTML(resp_text)结果还是不行，后来多次找原因，改成resp.content.decode(“utf-8”)什么都不行， 后来代码改为下面这个就好了： resp_text = resp.text html = etree.HTML(resp_text.encode(&apos;utf-8&apos;))这样就好了，之前直接传入resp.text是没有问题的，这样的我也是第一次遇到，所以记录下来，标题页和错误前面一致，希望帮助到需要的你。 如果觉得帮助到你，希望给我点个赞哈（只想给自己的努力多打打气?）","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"},{"name":"问题解决","slug":"python模块/问题解决","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"etree","slug":"etree","permalink":"https://zhaojiafu.github.io/tags/etree/"}]},{"title":"window安装MySQL5.7 的压缩包安装过程（实测有效）（中间报错：_mysql.connector.errors.NotSupportedError和由于找不到msvcr120.dll无法继续","slug":"078fdd0d3c7b63124fe6048eebe05ec2","date":"2019-07-24T03:34:32.000Z","updated":"2019-12-02T07:40:52.909Z","comments":true,"path":"2019/07/24/078fdd0d3c7b63124fe6048eebe05ec2/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/24/078fdd0d3c7b63124fe6048eebe05ec2/","excerpt":"","text":"说明：今天有个python程序，找到网上一个获取代理ip的，然后我的电脑（widow系统），程序运行一直报错，报错类似于，然后网上查找解决方法，意思是我的MySQL版本过高，然后开始寻找安装低版本5.7的方法，但是就是安装不成功，经过多次，安装过成又报了一个错，所以觉得下来了，既方便下载需要，也能给他人一个参考。 mysql.connector.errors.NotSupportedError: Authentication plugin &apos;caching_sha2_password&apos; is not supported1、下载mysql5.7的 zip包直接下再5.7的压缩包地址(64位的)：https://dev.mysql.com/downloads/file/?id=487427 {% image /imgs/20190724151713724.png '在这里插入图片描述' '' %} 如果需求其他版本，请去Windows官网https://dev.mysql.com/downloads/windows/ {% image /imgs/20190724151922125.png '在这里插入图片描述' '' %} {% image /imgs/20190724152037414.png '在这里插入图片描述' '' %} 然后其他版本进来之后，选择自己需要的下载即可 {% image /imgs/20190724152125837.png '在这里插入图片描述' '' %} 2、配置安装压缩包，解压之后，放到想要安装的位置，我放到软件盘。其中my.ini，需要自己写的配置文件，我看了好多博客写的这个，但是就没有说放到哪个位置，我把我成功的图片截屏出来。 {% image /imgs/20190724152336687.png '在这里插入图片描述' '' %} 里面的内容：basedir和datadir 你要改成自己的 [client] default-character-set=utf8 [mysqld] #设置3306端口 port=3306 #设置mysql的安装目录 basedir=D:/tools/mysql-5.7.24-winx64 #设置mysql数据库的数据的存放目录 datadir=D:/tools/mysql-5.7.24-winx64/data #允许最大连接数 max_connections=200 #服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 collation-server=utf8_general_ci #创建新表时将使用的默认存储引擎 default-storage-engine=INNODB 然后把当前的bin文件夹，加到环境变量中。比如我的是 D:\\tools\\mysql-5.7.25-winx64\\mysql-5.7.25-winx64\\bin然后cmd中，命令安装：mysqld -install 报错 1、找不到msvcr120.dll我的这个时候保错，（由于找不到msvcr120.dll无法继续执行代码） {% image /imgs/20190724153540598.png '在这里插入图片描述' '' %} 这个时候百度找到了原因，需要安装一个软件软件地址：https://www.microsoft.com/zh-CN/download/details.aspx?id=40784 点击下载之后，选择自己对应的版本软件，下载好安装即可解决这个问题。 {% image /imgs/20190724153726913.png '在这里插入图片描述' '' %} 成功之后，我重新打开进入cmd，然后再次报错： 报错 2、mysqld -install（这个时候我已经添加环境变量了）{% image /imgs/20190724153934616.png '在这里插入图片描述' '' %} 这个时候解决办法，就是使用管理员重新进入cmd即可： {% image /imgs/20190724154122463.png '在这里插入图片描述' '' %} 这个时候，显示成功了。 {% image /imgs/2019072415422861.png '在这里插入图片描述' '' %} 3、一些配置命令3.1 、初始化命令mysqld –initialize –user=mysql –console（注意执行命令后会出现一个password的关键字，这是一个随机密码，一定要记住一会会使用）。 {% image /imgs/20190724154447614.png '在这里插入图片描述' '' %} 其中最后一行的后面一堆字符就是随机密码，一会是使用，比如我的：a4P0t;hgo?kf 3.2、安装命令mysqld –install 安装命令 mysqld –install {% image /imgs/20190724154807222.png '在这里插入图片描述' '' %} 3.3、启动服务 net start mysql{% image /imgs/20190724154851504.png '在这里插入图片描述' '' %} 3.4、登陆mysql，命令 mysql -uroot -p ，回车后输入或粘贴上面的随机密码。这个时候登陆成功： {% image /imgs/20190724155141642.png '在这里插入图片描述' '' %} 3.5、肯定需要先修改密码登陆成功后必须更改密码，方式很多这是一种： set password = password(&apos;你的新密码&apos;);比如我的密码设置为123456，好记。 在这里插入图片描述 为了测试是否成功，这时候我们就可以退出，然后再次登陆，这时候我的新密码就可以使用了，至此安装成功。 在这里插入图片描述 执行到这里表示你已经成功了，可以本地使用了。 参考：https://blog.csdn.net/zhongaiyisheng_/article/details/85924378https://blog.csdn.net/qq_27868061/article/details/86923020https://blog.csdn.net/tangyaliang11/article/details/86299902","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://zhaojiafu.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://zhaojiafu.github.io/tags/MySQL/"}]},{"title":"python Windows 下配置虚拟环境","slug":"ca7bf4aa92439c665eec5013d2765119","date":"2019-07-24T03:34:32.000Z","updated":"2019-12-02T07:00:36.752Z","comments":true,"path":"2019/07/24/ca7bf4aa92439c665eec5013d2765119/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/24/ca7bf4aa92439c665eec5013d2765119/","excerpt":"","text":"说明：虚拟环境有时候项目不同，可以需要不同的模块版本，这个时候就需要这个虚拟环境了，但是，我之前弄了很多次就没有成功，这一次参考一个博客就成功了，我也很纳闷。不管了，先记录下来，剩下下次再不会了。 0、管理虚拟环境virtualenvwrapper：#安装一virtualenv 的windows版本 pip install virtualenvwrapper-win # 创建一个虚拟环境 mkvirtualenv myproject #使用，激活该环境，这样以后使用pip安装包将安装到该环境下 workon myproject 配置好virtualenvwrapper，就可以使用它的功能，方便管理虚拟环境 workon: 列出虚拟环境列表 lsvirtualenv: 列出虚拟环境列表 mkvirtualenv: 新建虚拟环境 workon [虚拟环境名称]: 切换/进入虚拟环境 rmvirtualenv : 删除虚拟环境 deactivate: 离开虚拟环境1、安装模块virtualenvpip install virtualenv我的这个现实是之前安装成功了，但是没有弄成，如果你没有安装过会显示安装成功。 {% image /imgs/20190724112447416.png '在这里插入图片描述' '' %} 2、为项目安装虚拟环境建议放到软件盘，然后cmd中到指定文件夹比如我创建_virtualenv_dir目录，用来存放所以的虚拟环境，然后在创建一个myporject_1目录，用来存放第一个虚拟环境，如果后来还有项目需要，可以接着创建虚拟环境目录。比如我的这个在 D:\\tools\\_virtualenv_dir\\myporject_1然后执行 virtualenv env virtualenv env等待安装完成我的这个就是安装完成了，这个时候就可以使用虚拟环境了 {% image /imgs/2019072411375143.png '在这里插入图片描述' '' %} 创建失败第二个方法创建：上面的方法之前是可以的，后来我的突然不可以了，然后晚上回家自己电脑测试可以，也没有找到确定原因。下面是这个错误截图，特意演示了一次，需要的可以看看： {% image /imgs/20190920104326832.png '在这里插入图片描述' '' %} 后来通过谷歌搜索到一个官方的文档中有个window创建虚拟环境命令，然后我把python3改为python就成功了。具体之前的命令公司电脑上突然不可以使用了，至此还没有找到上面截图错误的原因，我也尝试修改代码，但是修改之后还有其他错误，然后就放弃了，不知道是不是我后来安装的其他模块和virtualenv 模块有版本不兼容问题，下面的命令可以创建虚拟环境，会在当前执行的目录下生成虚拟环境，如果你也纠结这个问题可以参加我的这个。 参考官方：https://docs.python.org/zh-cn/3.8/tutorial/venv.html 如果创建失败，可以使用官方是这个： python3 -m venv tutorial-env但是我执行报错：，意思是powershell下不识别python3 在这里插入图片描述 然后我使用：python成功创建 python -m venv deep 3、启动虚拟环境3.1、方法1：可以直接在刚刚命令下使用env\\Scripts\\activate 在这里插入图片描述 3.2、方法2：添加刚刚的虚拟环境的Scripts到环境变量中不知道大家看到上面方法1，有没有想到这一步，加到环境变量中，这样就可以直接使用activate 在这里插入图片描述 在这里插入图片描述 这个时候说明，环境变量添加成功，这个时候就可以在环境变量里面随意安装需要模块了。如果再多个环境变量，继续创建新的文件夹就行。 3、退出、deactivate 在这里插入图片描述 参考：https://blog.csdn.net/liuchunming033/article/details/46008301https://virtualenv-chinese-docs.readthedocs.io/en/latest/#windows","categories":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/categories/python/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"},{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/tags/python/"},{"name":"虚拟环境","slug":"虚拟环境","permalink":"https://zhaojiafu.github.io/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"}]},{"title":"安装Twisted 报错：Microsoft Visual C++ 14.0 is required。。。","slug":"9d9ad2c06f02e8462f035ff310e5afb1","date":"2019-07-24T03:34:32.000Z","updated":"2019-12-02T06:45:49.041Z","comments":true,"path":"2019/07/24/9d9ad2c06f02e8462f035ff310e5afb1/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/24/9d9ad2c06f02e8462f035ff310e5afb1/","excerpt":"","text":"1、需求，安装Twisted报错Microsoft Visual C++ 14.0 is required. Get it with &quot;Microsoft Visual C++ Build Tools&quot;: https://visualstudio.microsoft.com/downloads/报错如下图，因为很长，我只截取了，开头和结尾，结尾显示报错原因，这个错误我之前安装scrapy时遇见过，当时也是搜了很多博客，才找到最终解决方法，如果你是安装scrapy，没有成功可以参考我的另一个博客：https://blog.csdn.net/weixin_42081389/article/details/84932026但是如果只是解决这个问题，我下给出。 {% image /imgs/20190724124519461.png '在这里插入图片描述' '' %} 2、解决方法直接说解决方法，很简单，只需要俩步 2.1、下载对应版本的模块地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/进去之后直接搜索：Twisted然后选择自己的下载对于的模块版本。 {% image /imgs/2019072412514818.png '在这里插入图片描述' '' %} 2.2、安装即可：右击下载好的模块属性，找到文件的绝对路径，复制下来 {% image /imgs/20190724125337477.png '在这里插入图片描述' '' %} 然后 pip install 你的模块文件觉得路径比如我的： pip install D:\\tools\\_virtualenv_dir\\Twisted-19.2.1-cp37-cp37m-win_amd64.whl然后等待一会就成功了。 在这里插入图片描述 至此问题解决，成功安装Twisted。 之前遇到过这个问题，所有这次很快解决，这次有遇到，然后记录下来，以防万一下次在遇到。如果帮助到你，希望给我点个赞哈","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"安装Twisted","slug":"安装Twisted","permalink":"https://zhaojiafu.github.io/tags/%E5%AE%89%E8%A3%85Twisted/"}]},{"title":"python 安装PIL模块，并且查看图片大小","slug":"30ec5fdfab8d98a2c34a56115f709982","date":"2019-07-19T03:34:32.000Z","updated":"2019-12-02T07:40:52.883Z","comments":true,"path":"2019/07/19/30ec5fdfab8d98a2c34a56115f709982/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/19/30ec5fdfab8d98a2c34a56115f709982/","excerpt":"","text":"1、安装PIL（pip install Pillow）图片是我第一次安装命令错误，后来才发现是 pip install Pillow但是导入模块使用是PIL： from PIL import Image 在这里插入图片描述 2、使用python查看图片大小2.1 爬取图片的响应字节，查看图片大小（个人项目需求）注意：我这里省获取图片的request的返回response from PIL import Image from io import BytesIO import sys img_name = img_url[img_url.rindex(&apos;/&apos;) + 1:] image = Image.open(BytesIO(response.body)) if int((sys.getsizeof(image))) &gt;= 15: with open(&apos;./images_CCTVdalou/img_360_&apos; + img_name, &apos;wb&apos;) as file: file.write(response.body) else: print(&apos;%s此图片过小不符合要求&apos; % img_url)2.2 使用os模块查看本地文件的大小（包括但不限图片）import os def get_size(path): # 转到文件目录下 os.chdir(path) # print(os.getcwd()) # 将当前的所以文件名提取出来。 key_list = os.listdir() is_del = [] for i in key_list: ret = os.path.getsize(i) print(i) # 将爬取的图片小于5kb的和不是图片的文件删除 if ret//1024 &lt;= 5 or i.endswith(&apos;html&apos;) or i == &apos;img_&apos;: is_del.append(i) os.remove(i) print(is_del) print(len(is_del)) if __name__ == &apos;__main__&apos;: path = r&apos;文件的目录&apos; get_size(path)","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"},{"name":"安装PIL模块","slug":"安装PIL模块","permalink":"https://zhaojiafu.github.io/tags/%E5%AE%89%E8%A3%85PIL%E6%A8%A1%E5%9D%97/"}]},{"title":"爬虫之accept-encoding坑","slug":"df8a0835b94234c15420d1acf0c58d5e","date":"2019-07-12T03:34:32.000Z","updated":"2019-12-02T07:26:18.518Z","comments":true,"path":"2019/07/12/df8a0835b94234c15420d1acf0c58d5e/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/12/df8a0835b94234c15420d1acf0c58d5e/","excerpt":"","text":"1、情况1，加上accept-encoding会解码不出来，这时可以去掉即可。说明，对于一些网站，有时候爬取的时候，如果headers中加入这个accept-encoding参数之后会有一些乱码返回，这个时候可以把这个参数去掉，查看是否有些正常的html格式，如果有些正常，还有些乱码，这个时候需要进行一些编码转换即可： if-modified-since 这个参数是403错误，去掉就可以了，我之前写过一个博客，具体这里不解释了。 比如：我加上全部参数，返回=的是乱码，然后找了测试找原因。。。。 这个时候我使用这个返回的， text = resp.text 在这里插入图片描述 在这里插入图片描述 然后尝试使用resp.content.decode(“utf-8”)和gbk，都尝试无效最后把参数注销再次尝试； 在这里插入图片描述 在这里插入图片描述 这个时候，返现html界面有了，就是中文有问题，这个时候我就知道哪里的原因了（别问我为什么，因为我经过过这种次数多了，见得多了就知道了）这个时候把 text = resp.text 改为使用resp.content.decode(“utf-8”)就可以了 到此基本结束，因为我第一次见得这种情况，所以。。。想知道为什么会刚刚那样，经验猜想告诉我，应该刚刚第一次乱码是压缩，所以，尝试测试。。。 在这里插入图片描述 在这里插入图片描述 果然如此，所以，以后在遇见这个问题就知道网哪里考虑了，不用一直纠结了。 结束！！！！ 2、第二种情况，也是我刚遇到这，加上这个参数会正确响应返回结果，这时候加上这个参数即可。具体网站不方便公示，如果有人遇到爬取网站响应返回的如果是有验证码，或者乱码，可以考虑下这个参数。我也是找了很久才发现，刚开始一直以为换ip好了，发现还是响应的结果时好时坏，然后一点点找原因，基本上一下午都在找这个原因。遇到我这种情况可以考虑下这个参数吧。 在这里插入图片描述 “accept-encoding”: “gzip, deflate, br” 把这个参数正常就可以了。","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"window下ffmpeg的安装 + ffmpeg视频合并方法","slug":"ef3742d9530e4268d443ab7d00224c1d","date":"2019-07-06T03:34:32.000Z","updated":"2019-12-02T07:26:18.498Z","comments":true,"path":"2019/07/06/ef3742d9530e4268d443ab7d00224c1d/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/06/ef3742d9530e4268d443ab7d00224c1d/","excerpt":"","text":"需求：需要把多个短视频合并成一个视频系统：我的是Windows10系统 一、需要安装ffmpeg1、下载压缩包：官网地址：http://www.ffmpeg.org/download.html直接下载地址：https://ffmpeg.zeranoe.com/builds/ 在这里插入图片描述 2、解压之后，添加到path环境变量下载之后是个压缩包，解压之后把文件夹放到一个不用的磁盘固定不动位置，我这边放到安装软件的D盘，然后把把文件下面的bin路径添加到系统path路径下面。具体步骤不会可以参考：https://blog.csdn.net/chy466071353/article/details/54949221 在这里插入图片描述 在这里插入图片描述 3、测试是否安装成功cmd中运行ffmpeg出现如下图，说明ffmpeg安装成功。 二、准备name.txt注意事项：name.txt里面的名字就是合成视频的顺序，可以使用python的一个模块natsort，这个模块的natsorted功能，它可以使识别列表中的任何元素中数字的位置，根据数字和字母进行派人， 安装：pip install natsort官网地址：https://pypi.org/project/natsort/ 主要是使用了这个功能： &gt;&gt;&gt; from natsort import natsorted &gt;&gt;&gt; a = [‘2 ft 7 in’, ‘1 ft 5 in’, ‘10 ft 2 in’, ‘2 ft 11 in’, ‘7 ft 6 in’] &gt;&gt;&gt; natsorted(a) [‘1 ft 5 in’, ‘2 ft 7 in’, ‘2 ft 11 in’, ‘7 ft 6 in’, ‘10 ft 2 in’] 在这里插入图片描述 把需要的视频文件准备到一个文件夹下，把file ‘视频文件名1’file ‘视频文件名2’…按行写入一个name.txt文本下，我用python写入的代码，可以作为参考： import os from natsort import natsorted path = r&quot;视频列表目录&quot; files = os.listdir(path) files = natsorted(files) print(files) file_w = open(&apos;{}\\\\name.txt&apos;.format(path),&apos;w&apos;,encoding=&apos;utf-8&apos;) for i in files: if &apos;out&apos; in i: file_w.write(&apos;file &apos;+ &quot;&apos;{}&apos;&quot;.format(i)+&apos;\\n&apos;) file_w.close() 在这里插入图片描述 生成name.txt 文件，格式生成如下： 在这里插入图片描述 三、合并视频方法1：在cmd中，到视频列表文件下ffmpeg -f concat -i name.txt -c copy output_set.mp4 完成后会再当前目录下生成一个output_set.mp4视频，至此完成。 方法2：python的os模块 import os path = 视频列表地址 os.chdir(path) start_time = time.time() os.system(&apos; ffmpeg -f concat -i name.txt -c copy output_set.mp4&apos;)","categories":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://zhaojiafu.github.io/categories/ffmpeg/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://zhaojiafu.github.io/tags/ffmpeg/"}]},{"title":"python 连接redis数据库报错redis.exceptions.ResponseError、Windows下redis安装与配置","slug":"bdf9cbb2bf352cd49e95578fa5389de2","date":"2019-07-06T03:34:32.000Z","updated":"2019-12-02T07:00:36.707Z","comments":true,"path":"2019/07/06/bdf9cbb2bf352cd49e95578fa5389de2/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/06/bdf9cbb2bf352cd49e95578fa5389de2/","excerpt":"","text":"一、redis连接报错：redis.exceptions.ResponseError: Client sent AUTH, but no password is set：Traceback (most recent call last): File &quot;G:/000阿里工作文件夹/zjf_workspace/000爬虫代码-基础的/scrapy_100_工具/16、redis对url去重/2、redis_set_md5/模块方法/redis_set_filter_myself/redis_set_filter.py&quot;, line 39, in &lt;module&gt; is_haved = redis_set.is_haved(name) File &quot;G:/000阿里工作文件夹/zjf_workspace/000爬虫代码-基础的/scrapy_100_工具/16、redis对url去重/2、redis_set_md5/模块方法/redis_set_filter_myself/redis_set_filter.py&quot;, line 24, in is_haved is_haved = self.server.sismember(self.key,name_md5) File &quot;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\redis\\client.py&quot;, line 1912, in sismember return self.execute_command(&apos;SISMEMBER&apos;, name, value) File &quot;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\redis\\client.py&quot;, line 772, in execute_command connection = pool.get_connection(command_name, **options) File &quot;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\redis\\connection.py&quot;, line 994, in get_connection connection.connect() File &quot;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\redis\\connection.py&quot;, line 502, in connect self.on_connect() File &quot;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\redis\\connection.py&quot;, line 570, in on_connect if nativestr(self.read_response()) != &apos;OK&apos;: File &quot;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages\\redis\\connection.py&quot;, line 642, in read_response raise response redis.exceptions.ResponseError: Client sent AUTH, but no password is set这个原因就是因为我的Python与redis交互的接口，的密码问题，我的接口中没有填写密码，但是我的Windows数据redis设置中没有设置密码，所以报错，这个时候，只需要在redis文件夹下设置密码即可： 解决方法：1、将password字段去除即可解决方法：2、将Windows下redis数据库设置相同的密码（我的这个原因是因为工作时公司电脑设置密码了，家里电脑测试没有设置密码）server = redis.Redis(host=host, port=port, db=db, password=password,decode_responses=True)二、Windows下redis的安装与配置：1、下载redis Windows版本这个可以下载msi，因为我找到一个官网上面没有Windows版本，这个是github上人家做的，不过最早至我现在写博客时间已经有3年时间没有更新了，最早三年前的更新。 想了解的可以去了解了解：https://github.com/microsoftarchive/redis 在这里插入图片描述 msi软件地址：https://github.com/microsoftarchive/redis/releases/download/win-3.0.504/Redis-x64-3.0.504.msi 直接下载地址：https://github.com/MicrosoftArchive/redis/releases 在这里插入图片描述 2、可以直接执行安装redis，可以选择一个制定目录下可以参考这个进行设置： https://www.cnblogs.com/imstrive/p/9346388.html 3、设置密码：在安装目录下面的如下图来个文件，打开搜索：requirepass foobared将前面复制一行如下图：自己的后面密码自己设定： 在这里插入图片描述 在这里插入图片描述 4、在服务里面重新启动redis服务快捷键启动任务管理器： ctrl + shift + esc 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 这个时候就可以使用redis数据库了。 5、测试是否安装成功如果不成功，或者和环境变量有关系，那就把redis的安装目录加到环境变量path中。 在这里插入图片描述 三、redis可视化工具参考博客地址：https://blog.csdn.net/zwq912318834/article/details/78770209 下载github地址：https://github.com/uglide/RedisDesktopManagerhttps://github.com/uglide/RedisDesktopManager/releases/tag/0.8.8 推荐直接下载软件地址：，然后直接安装即可https://github.com/uglide/RedisDesktopManager/releases/download/0.8.8/redis-desktop-manager-0.8.8.384.exe 下面是连接redis 在这里插入图片描述 然后填写名称，地址，端口默认就可以了。地址如果是链接本地电脑，就不用更改了，如果其他电脑可以更改地址，密码如果设置就填上，如果没有设置就忽略就行。 在这里插入图片描述 成功之后就是这一种。 在这里插入图片描述","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"redis","slug":"redis","permalink":"https://zhaojiafu.github.io/tags/redis/"}]},{"title":"pyinstaller 打包python文件成exe","slug":"8ceb8b932c7f6c26557d58d77c1b3d77","date":"2019-07-06T03:34:32.000Z","updated":"2019-12-02T06:45:49.601Z","comments":true,"path":"2019/07/06/8ceb8b932c7f6c26557d58d77c1b3d77/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/06/8ceb8b932c7f6c26557d58d77c1b3d77/","excerpt":"","text":"说明：本文主要是在b站上面看到一个打包成exe的简单小程序，然后想着把我的之前做过的项目程序打包成试试，然后把子自己的成功过程记录下来，后续如果遇到相关知识再来扩展博客。注意事项1：记住代码中尽量少些其他的功能，不然换台电脑会报错，或者不能执行exe。（比如：代码中涉及redis，mongodb等数据库功能，因为这些可能需要密码什么的，其他电脑也要一样才可以。） 注意事项2：第2步，和第3步的命令都是在你的程序的那个文件夹下执行的，cmd要切换到那个目录下 1、使用安装pyinstaller我的是Windows系统，直接cmd窗口命令安装： pip install pyinstaller2、使用pyinstaller 打包单个py程序文件可以直接命令： pyinstaller file.py 或者 pyinstaller -F file.py这个参考了一些b站的视频，起源来自于对这个b站视频的好奇心。b站地址：https://www.bilibili.com/video/av57903803?from=search&amp;seid=12947904709335042045视频主要讲了这么几个命令： 在这里插入图片描述 图片中的 -i favicon.ico 的-i 是参数， favicon.ico是个exe图标的图片，不懂可以看b站视频，很简单。 下面这个是我找到的一个png在线转换ico的网站，本人不喜欢为了一个不常用的小东西在装个软件。 图标转换网站https://www.aconvert.com/cn/icon/png-to-ico/ 3、使用pyinstaller 打包多个py程序文件直接代把我的成功的代码复制出来： pyinstaller -F spiders_all_4.py -p spider_360.py -p spider_baidu.py -p spider_bing.py -p spider_sogou.py代码中-F 参数后面紧跟的spiders_all_4.py 文件，是我的主程序文件，-p 参数后面跟的文件都是我主程序需要使用的文件。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 然后点开程序exe，可以成功运行，嘿嘿。。。喜欢 在这里插入图片描述 在这里插入图片描述 如果在不懂可以参考这个博客：https://blog.csdn.net/CholenMine/article/details/80964272 4、使用pyinstaller 打包飞机大战（涉及到字体，图片，等文件）这时候就需要先命令生产exe文件，然后把需要的图片等数据复制到dist文件夹下（和exe统一目录下面） 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述","categories":[{"name":"python打包","slug":"python打包","permalink":"https://zhaojiafu.github.io/categories/python%E6%89%93%E5%8C%85/"}],"tags":[{"name":"python打包","slug":"python打包","permalink":"https://zhaojiafu.github.io/tags/python%E6%89%93%E5%8C%85/"}]},{"title":"分享一个学习充电的电子书下载网站（目前可以免费下载电子书）","slug":"160bfa6f0d757bf70353d5fde61392ac","date":"2019-07-02T03:34:32.000Z","updated":"2019-12-02T06:45:48.365Z","comments":true,"path":"2019/07/02/160bfa6f0d757bf70353d5fde61392ac/","link":"","permalink":"https://zhaojiafu.github.io/2019/07/02/160bfa6f0d757bf70353d5fde61392ac/","excerpt":"","text":"1、电子书网站：http://ebook.lorefree.com/可以搜索相关的自己感兴趣的电子书，比如我搜索python，出来不少电子书，可以进行看。但是我遇到一个问题，因为公司有时间闲时，我也想看怎么办，格式是mobi格式文件，需要下载相关软件，但是公司电脑有要求，不能下载私自安装盗版、绿色、破解版软件，这时候想着百度搜索一些转换软件，结果真的有： 2、mobi文件转换pdfhttps://www.aconvert.com/cn/ebook/mobi-to-pdf/ 不知mobi格式，好多格式，如果自己需要什么格式，也可以根据自己需求百度或者谷歌搜索，也可以搜狗搜索都行。寻找相关资源。直接按步骤就可以了。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 3、补充一个外文书籍网站：http://gen.lib.rus.ec/","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"},{"name":"电子书下载网站","slug":"电子书下载网站","permalink":"https://zhaojiafu.github.io/tags/%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/"}]},{"title":"python 运算符优先级顺序","slug":"3b1dda7668cc82f3688f6443bd994f0b","date":"2019-06-28T03:34:32.000Z","updated":"2019-12-02T06:45:49.284Z","comments":true,"path":"2019/06/28/3b1dda7668cc82f3688f6443bd994f0b/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/28/3b1dda7668cc82f3688f6443bd994f0b/","excerpt":"","text":"注意事项建议：使用多个运算符时，建议加上小括号，使得一看就懂，毕竟程序员工作代码不是只有自己看，别人也会看的。网时找到一个优先级表，保留下来，方便日后需要使用，不用找花时间找了。技术慢慢积累。。。 优先级从上往下执行 在这里插入图片描述","categories":[{"name":"Python","slug":"Python","permalink":"https://zhaojiafu.github.io/categories/Python/"}],"tags":[{"name":"python运算符","slug":"python运算符","permalink":"https://zhaojiafu.github.io/tags/python%E8%BF%90%E7%AE%97%E7%AC%A6/"}]},{"title":"pycharm的便捷命令（后续更新）","slug":"4f4526766a3c0e2974fab50dd5dd4c0e","date":"2019-06-27T03:34:32.000Z","updated":"2019-12-02T06:45:49.224Z","comments":true,"path":"2019/06/27/4f4526766a3c0e2974fab50dd5dd4c0e/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/27/4f4526766a3c0e2974fab50dd5dd4c0e/","excerpt":"","text":"工作了这么久，觉得开始积累写博客吧，不然过久了，知识都忘了。（后续想起来什么技巧接着更新。。。） 1、文件显示技巧 在这里插入图片描述 2、换行技巧（在设置的keymap里面可以自定义设置为自己喜欢的快捷键）这个快捷键我工作时常用，因为这个不管你在当前这一行什么位置，都可以直接在下方新插入一行，自动匹配位置，方便写代码。 在这里插入图片描述 在这里插入图片描述","categories":[{"name":"pycharm","slug":"pycharm","permalink":"https://zhaojiafu.github.io/categories/pycharm/"}],"tags":[{"name":"pycharm","slug":"pycharm","permalink":"https://zhaojiafu.github.io/tags/pycharm/"}]},{"title":"JavaScript 学习笔记（记录下）","slug":"d87371c991b53f29600fcd7a1bd411e9","date":"2019-06-27T03:34:32.000Z","updated":"2019-12-02T07:26:17.968Z","comments":true,"path":"2019/06/27/d87371c991b53f29600fcd7a1bd411e9/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/27/d87371c991b53f29600fcd7a1bd411e9/","excerpt":"","text":"0、前言写这个出发点是为了整理和收集自己认为自己学习以后有用的知识点，以前了解过一点JavaScript，现在想深入的学习JavaScript，如果想熟练一门语言，我还是偏向系统的从基础学习，不要眼高手低，也为了以方便以后找到，而不用在谷歌什么搜索，防止二次耽误时间。所以以后养成随时把搜集的一些知识点记录下来。加油！！！ 推荐一个自己学习JavaScript的一些网站：1、B站资源（小白尽量更正敲，会其他语言的可以看懂就行，我是会python语言，所以学习这个，看懂思路和区别点就行，需要记不住再网上搜索和记录一些学习笔记）通过对比好多JavaScript资源，发现这个还是讲解还是不错的，如果想学JavaScript的可以看看，讲解很全，适合我的深入了解js：https://www.bilibili.com/video/av340877912、菜鸟教程JavaScript： 这个自学IT的都知道，但是我还是把网站写出来吧，里面都是很基础的，主要还能在线测试，改代码，很不错。https://www.runoob.com/js/js-tutorial.html 3、w3school：和菜鸟差不多，也很方便http://www.w3school.com.cn/js/index.asp 一、Unicode编码与数值转换1.1、charCodeAt（类似于python的ord（））语法string.charCodeAt(index)参数值参数 描述index 必需。表示字符串中某个位置的数字，即字符在字符串中的下标。返回值类型 描述Number 返回在指定的位置的字符的 Unicode 编码。 实例： var str=&quot;HELLO WORLD&quot;; var n=str.charCodeAt(1); 此时n就是指str字符串中下表为1的字母是E的Unicode编码：1.2、fromCharCode（类似于python的chr（））语法String.fromCharCode(n1, n2, …, nX)参数值参数 描述n1, n2, …, nX 必需。一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。返回值类型 描述String 返回代表 Unicode 编码的字符。 实例 将 Unicode 编码转换为一个字符串: var n = String.fromCharCode(72,69,76,76,79); n 输出结果: HELLO二、base64加密解密base64编码表 在这里插入图片描述 1、代码实现1代码实现： &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;js base64加密解密&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; // 创建Base64对象 var Base64 = { _keyStr: &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;, encode: function(e) { var t = &quot;&quot;; var n, r, i, s, o, u, a; var f = 0; e = Base64._utf8_encode(e); while (f &lt; e.length) { n = e.charCodeAt(f++); r = e.charCodeAt(f++); i = e.charCodeAt(f++); s = n &gt;&gt; 2; o = (n &amp; 3) &lt;&lt; 4 | r &gt;&gt; 4; u = (r &amp; 15) &lt;&lt; 2 | i &gt;&gt; 6; a = i &amp; 63; if (isNaN(r)) { u = a = 64 } else if (isNaN(i)) { a = 64 } t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a) } return t }, decode: function(e) { var t = &quot;&quot;; var n, r, i; var s, o, u, a; var f = 0; e = e.replace(/[^A-Za-z0-9+/=]/g, &quot;&quot;); while (f &lt; e.length) { s = this._keyStr.indexOf(e.charAt(f++)); o = this._keyStr.indexOf(e.charAt(f++)); u = this._keyStr.indexOf(e.charAt(f++)); a = this._keyStr.indexOf(e.charAt(f++)); n = s &lt;&lt; 2 | o &gt;&gt; 4; r = (o &amp; 15) &lt;&lt; 4 | u &gt;&gt; 2; i = (u &amp; 3) &lt;&lt; 6 | a; t = t + String.fromCharCode(n); if (u != 64) { t = t + String.fromCharCode(r) } if (a != 64) { t = t + String.fromCharCode(i) } } t = Base64._utf8_decode(t); return t }, _utf8_encode: function(e) { e = e.replace(/rn/g, &quot;n&quot;); var t = &quot;&quot;; for (var n = 0; n &lt; e.length; n++) { var r = e.charCodeAt(n); if (r &lt; 128) { t += String.fromCharCode(r) } else if (r &gt; 127 &amp;&amp; r &lt; 2048) { t += String.fromCharCode(r &gt;&gt; 6 | 192); t += String.fromCharCode(r &amp; 63 | 128) } else { t += String.fromCharCode(r &gt;&gt; 12 | 224); t += String.fromCharCode(r &gt;&gt; 6 &amp; 63 | 128); t += String.fromCharCode(r &amp; 63 | 128) } } return t }, _utf8_decode: function(e) { var t = &quot;&quot;; var n = 0; var r = c1 = c2 = 0; while (n &lt; e.length) { r = e.charCodeAt(n); if (r &lt; 128) { t += String.fromCharCode(r); n++ } else if (r &gt; 191 &amp;&amp; r &lt; 224) { c2 = e.charCodeAt(n + 1); t += String.fromCharCode((r &amp; 31) &lt;&lt; 6 | c2 &amp; 63); n += 2 } else { c2 = e.charCodeAt(n + 1); c3 = e.charCodeAt(n + 2); t += String.fromCharCode((r &amp; 15) &lt;&lt; 12 | (c2 &amp; 63) &lt;&lt; 6 | c3 &amp; 63); n += 3 } } return t } } // 定义字符串 var string = &apos;hello！&apos;; // 加密 var encodedString = Base64.encode(string); console.log(encodedString); // 输出: &quot;SGVsbG8gV29ybGQh&quot; // 解密 var decodedString = Base64.decode(encodedString); console.log(decodedString); // 输出: &quot;Hello World!&quot; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;2、还找到一个base64封装的实现：1.加密、解密算法封装：function Base64() { // private property _keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;; // public method for encoding this.encode = function(input) { var output = &quot;&quot;; var chr1, chr2, chr3, enc1, enc2, enc3, enc4; var i = 0; input = _utf8_encode(input); while (i &lt; input.length) { chr1 = input.charCodeAt(i++); chr2 = input.charCodeAt(i++); chr3 = input.charCodeAt(i++); enc1 = chr1 &gt;&gt; 2; enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4); enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6); enc4 = chr3 &amp; 63; if (isNaN(chr2)) { enc3 = enc4 = 64; } else if (isNaN(chr3)) { enc4 = 64; } output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4); } return output; } // public method for decoding this.decode = function(input) { var output = &quot;&quot;; var chr1, chr2, chr3; var enc1, enc2, enc3, enc4; var i = 0; input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, &quot;&quot;); while (i &lt; input.length) { enc1 = _keyStr.indexOf(input.charAt(i++)); enc2 = _keyStr.indexOf(input.charAt(i++)); enc3 = _keyStr.indexOf(input.charAt(i++)); enc4 = _keyStr.indexOf(input.charAt(i++)); chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4); chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2); chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4; output = output + String.fromCharCode(chr1); if (enc3 != 64) { output = output + String.fromCharCode(chr2); } if (enc4 != 64) { output = output + String.fromCharCode(chr3); } } output = _utf8_decode(output); return output; } // private method for UTF-8 encoding _utf8_encode = function(string) { string = string.replace(/\\r\\n/g, &quot;\\n&quot;); var utftext = &quot;&quot;; for (var n = 0; n &lt; string.length; n++) { var c = string.charCodeAt(n); if (c &lt; 128) { utftext += String.fromCharCode(c); } else if ((c &gt; 127) &amp;&amp; (c &lt; 2048)) { utftext += String.fromCharCode((c &gt;&gt; 6) | 192); utftext += String.fromCharCode((c &amp; 63) | 128); } else { utftext += String.fromCharCode((c &gt;&gt; 12) | 224); utftext += String.fromCharCode(((c &gt;&gt; 6) &amp; 63) | 128); utftext += String.fromCharCode((c &amp; 63) | 128); } } return utftext; } // private method for UTF-8 decoding _utf8_decode = function(utftext) { var string = &quot;&quot;; var i = 0; var c = c1 = c2 = 0; while (i &lt; utftext.length) { c = utftext.charCodeAt(i); if (c &lt; 128) { string += String.fromCharCode(c); i++; } else if ((c &gt; 191) &amp;&amp; (c &lt; 224)) { c2 = utftext.charCodeAt(i + 1); string += String.fromCharCode(((c &amp; 31) &lt;&lt; 6) | (c2 &amp; 63)); i += 2; } else { c2 = utftext.charCodeAt(i + 1); c3 = utftext.charCodeAt(i + 2); string += String.fromCharCode(((c &amp; 15) &lt;&lt; 12) | ((c2 &amp; 63) &lt;&lt; 6) | (c3 &amp; 63)); i += 3; } } return string; } }2.加密解密方法使用：//1.加密 var str = &apos;124中文内容&apos;; var base = new Base64(); var result = base.encode(str); document.write(&quot;base64加密: &quot; + result + &quot;\\t&quot;); //2.解密 var result2 = base.decode(result); document.write(result2);3、找到一个不错的博客自己用JavaScript写的base64这个是博主的链接：https://my.oschina.net/goal/blog/201032 &lt;script type=&quot;text/javascript&quot;&gt; /** * UTF16和UTF8转换对照表 * U+00000000 – U+0000007F 0xxxxxxx * U+00000080 – U+000007FF 110xxxxx 10xxxxxx * U+00000800 – U+0000FFFF 1110xxxx 10xxxxxx 10xxxxxx * U+00010000 – U+001FFFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx * U+00200000 – U+03FFFFFF 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx * U+04000000 – U+7FFFFFFF 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */ var Base64 = { // 转码表 table: [ &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;I&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;, &apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;+&apos;, &apos;/&apos; ], UTF16ToUTF8: function(str) { var res = [], len = str.length; for (var i = 0; i &lt; len; i++) { var code = str.charCodeAt(i); if (code &gt; 0x0000 &amp;&amp; code &lt;= 0x007F) { // 单字节，这里并不考虑0x0000，因为它是空字节 // U+00000000 – U+0000007F 0xxxxxxx res.push(str.charAt(i)); } else if (code &gt;= 0x0080 &amp;&amp; code &lt;= 0x07FF) { // 双字节 // U+00000080 – U+000007FF 110xxxxx 10xxxxxx // 110xxxxx var byte1 = 0xC0 | ((code &gt;&gt; 6) &amp; 0x1F); // 10xxxxxx var byte2 = 0x80 | (code &amp; 0x3F); res.push( String.fromCharCode(byte1), String.fromCharCode(byte2) ); } else if (code &gt;= 0x0800 &amp;&amp; code &lt;= 0xFFFF) { // 三字节 // U+00000800 – U+0000FFFF 1110xxxx 10xxxxxx 10xxxxxx // 1110xxxx var byte1 = 0xE0 | ((code &gt;&gt; 12) &amp; 0x0F); // 10xxxxxx var byte2 = 0x80 | ((code &gt;&gt; 6) &amp; 0x3F); // 10xxxxxx var byte3 = 0x80 | (code &amp; 0x3F); res.push( String.fromCharCode(byte1), String.fromCharCode(byte2), String.fromCharCode(byte3) ); } else if (code &gt;= 0x00010000 &amp;&amp; code &lt;= 0x001FFFFF) { // 四字节 // U+00010000 – U+001FFFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx } else if (code &gt;= 0x00200000 &amp;&amp; code &lt;= 0x03FFFFFF) { // 五字节 // U+00200000 – U+03FFFFFF 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx } else /** if (code &gt;= 0x04000000 &amp;&amp; code &lt;= 0x7FFFFFFF)*/ { // 六字节 // U+04000000 – U+7FFFFFFF 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx } } return res.join(&apos;&apos;); }, UTF8ToUTF16: function(str) { var res = [], len = str.length; var i = 0; for (var i = 0; i &lt; len; i++) { var code = str.charCodeAt(i); // 对第一个字节进行判断 if (((code &gt;&gt; 7) &amp; 0xFF) == 0x0) { // 单字节 // 0xxxxxxx res.push(str.charAt(i)); } else if (((code &gt;&gt; 5) &amp; 0xFF) == 0x6) { // 双字节 // 110xxxxx 10xxxxxx var code2 = str.charCodeAt(++i); var byte1 = (code &amp; 0x1F) &lt;&lt; 6; var byte2 = code2 &amp; 0x3F; var utf16 = byte1 | byte2; res.push(Sting.fromCharCode(utf16)); } else if (((code &gt;&gt; 4) &amp; 0xFF) == 0xE) { // 三字节 // 1110xxxx 10xxxxxx 10xxxxxx var code2 = str.charCodeAt(++i); var code3 = str.charCodeAt(++i); var byte1 = (code &lt;&lt; 4) | ((code2 &gt;&gt; 2) &amp; 0x0F); var byte2 = ((code2 &amp; 0x03) &lt;&lt; 6) | (code3 &amp; 0x3F); var utf16 = ((byte1 &amp; 0x00FF) &lt;&lt; 8) | byte2 res.push(String.fromCharCode(utf16)); } else if (((code &gt;&gt; 3) &amp; 0xFF) == 0x1E) { // 四字节 // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx } else if (((code &gt;&gt; 2) &amp; 0xFF) == 0x3E) { // 五字节 // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx } else /** if (((code &gt;&gt; 1) &amp; 0xFF) == 0x7E)*/ { // 六字节 // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx } } return res.join(&apos;&apos;); }, encode: function(str) { if (!str) { return &apos;&apos;; } var utf8 = this.UTF16ToUTF8(str); // 转成UTF8 var i = 0; // 遍历索引 var len = utf8.length; var res = []; while (i &lt; len) { var c1 = utf8.charCodeAt(i++) &amp; 0xFF; res.push(this.table[c1 &gt;&gt; 2]); // 需要补2个= if (i == len) { res.push(this.table[(c1 &amp; 0x3) &lt;&lt; 4]); res.push(&apos;==&apos;); break; } var c2 = utf8.charCodeAt(i++); // 需要补1个= if (i == len) { res.push(this.table[((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &gt;&gt; 4) &amp; 0x0F)]); res.push(this.table[(c2 &amp; 0x0F) &lt;&lt; 2]); res.push(&apos;=&apos;); break; } var c3 = utf8.charCodeAt(i++); res.push(this.table[((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &gt;&gt; 4) &amp; 0x0F)]); res.push(this.table[((c2 &amp; 0x0F) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6)]); res.push(this.table[c3 &amp; 0x3F]); } return res.join(&apos;&apos;); }, decode: function(str) { if (!str) { return &apos;&apos;; } var len = str.length; var i = 0; var res = []; while (i &lt; len) { code1 = this.table.indexOf(str.charAt(i++)); code2 = this.table.indexOf(str.charAt(i++)); code3 = this.table.indexOf(str.charAt(i++)); code4 = this.table.indexOf(str.charAt(i++)); c1 = (code1 &lt;&lt; 2) | (code2 &gt;&gt; 4); res.push(String.fromCharCode(c1)); if (code3 != -1) { c2 = ((code2 &amp; 0xF) &lt;&lt; 4) | (code3 &gt;&gt; 2); res.push(String.fromCharCode(c2)); } if (code4 != -1) { c3 = ((code3 &amp; 0x3) &lt;&lt; 6) | code4; res.push(String.fromCharCode(c3)); } } return this.UTF8ToUTF16(res.join(&apos;&apos;)); } }; var msg = &apos;Hello, oschina！又是一年春来到~!&apos;; console.group(&apos;Test Base64: &apos;); var b64 = Base64.encode(msg); console.log(b64); d64 = Base64.decode(b64); console.log(d64, d64 === msg); console.groupEnd(); &lt;/script&gt;三、JavaScript 运算符学习参考：https://www.runoob.com/jsref/jsref-operators.html 3.1 JavaScript 算术运算符y=5，下面的表格解释了这些算术运算符： 在这里插入图片描述 3.2 JavaScript 赋值运算符赋值运算符用于给 JavaScript 变量赋值。 给定 x=10 和 y=5，下面的表格解释了赋值运算符： 在这里插入图片描述 3.3 JavaScript 字符串运算符 运算符， += 运算符可用于连接字符串。 给定 text1 = “Good “, text2 = “Morning”, 及 text3 = “”, 下面的表格解释了字符串运算符的使用： 在这里插入图片描述 3.4 比较运算符比较运算符用于逻辑语句的判断，从而确定给定的两个值或变量是否相等。 给定 x=5, 下表展示了比较运算符的使用： 在这里插入图片描述 3.5 条件运算符（也称之为三目运算）条件运算符用于基于条件的赋值运算。 给定 x=6 and y=3, 下表演示了条件运算符的运算： 在这里插入图片描述 3.6 逻辑运算符逻辑运算符用来确定变量或值之间的逻辑关系。 给定 x=6 and y=3, 以下实例演示了逻辑运算符的使用： 在这里插入图片描述 3.7 JavaScript 位运算符位运算符工作于32位的数字上。任何数字操作都将转换为32位。结果会转换为 JavaScript 数字。 在这里插入图片描述 3.8 JavaScript运算符优先级 在这里插入图片描述 在这里插入图片描述 四、prompt() 函数这个函数相当于python的input()函数 定义和用法prompt()方法用于显示可提示用户进行输入的对话框。 这个方法返回用户输入的字符串。 语法prompt(msg,defaultText) 参数 描述msg 可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）。defaultText 可选。默认的输入文本。 示例： var score = prompt(&quot;请输入你的成绩&quot;) console.log(score)五、数组Array（）Array 对象Array 对象用于在变量中存储多个值:var cars = [“Saab”, “Volvo”, “BMW”];第一个数组元素的索引值为 0，第二个索引值为 1，以此类推。 也可以新创建一个new Array()对象，再进行添加。 5.1 、数字排序示例：这个是从大到小排序。 var num1 = parseInt(prompt(&quot;请输入num1&quot;)), num2 = parseInt(prompt(&quot;请输入num2&quot;)), num3 = parseInt(prompt(&quot;请输入num3&quot;)); var num_list = new Array(num1,num2,num3); num_list.sort(function(a,b){ return b-a }) alert(num_list)示例：这个是从小到大排序。 var num1 = parseInt(prompt(&quot;请输入num1&quot;)), num2 = parseInt(prompt(&quot;请输入num2&quot;)), num3 = parseInt(prompt(&quot;请输入num3&quot;)); var num_list = new Array(num1,num2,num3); num_list.sort(function(a,b){ return a - b }) alert(num_list)5.2 数组属性和方法：可以参考菜鸟教程：https://www.runoob.com/jsref/jsref-obj-array.html 在这里插入图片描述 数组方法比较多，等着日后用到什么，感觉不熟练再更新博客，可以参考上面链接学习。 六、JavaScript switch 语句请使用 switch 语句来选择要执行的多个代码块之一。 语法switch(n){ case 1: 执行代码块 1 break; case 2: 执行代码块 2 break; default: 与 case 1 和 case 2 不同时执行的代码} 工作原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行。 示例： var d=new Date().getDay(); switch (d) { case 0:x=&quot;今天是星期日&quot;; break; case 1:x=&quot;今天是星期一&quot;; break; case 2:x=&quot;今天是星期二&quot;; break; case 3:x=&quot;今天是星期三&quot;; break; case 4:x=&quot;今天是星期四&quot;; break; case 5:x=&quot;今天是星期五&quot;; break; case 6:x=&quot;今天是星期六&quot;; break; }七、JavaScript while 循环7.1、while 循环while 循环会在指定条件为真时循环执行代码块。 语法while (条件){ 需要执行的代码}实例本例中的循环将继续运行，只要变量 i 小于 5： 实例 while (i&lt;5) { x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;; i++; }7.2、do/while 循环do/while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。 语法do{ 需要执行的代码}while (条件);实例下面的例子使用 do/while 循环。该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行： 实例 do { x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;; i++; } while (i&lt;5);八、构造函数（类似于python创建的class类） 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 8.1、原型b站学习地址：https://www.bilibili.com/video/av34087791/?p=66 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 示例1： 在这里插入图片描述 在这里插入图片描述 示例2： 在这里插入图片描述 8.2、检查是否含有某个属性如果用 “属性” in 构造函数实例，会在实例或者实例的原型中检查是否存在，如果存在返回true，否则返回false；而构造函数的hasOwnProperty()方法只会检测实例中是否存在，不会件查原型中是否存在。 在这里插入图片描述 在这里插入图片描述 九、垃圾回收机制（变量不用试设置为null） 在这里插入图片描述 十、函数的call()和apply()方法 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 十一、函数的arguments 在这里插入图片描述 在这里插入图片描述 十二、Date对象参考：https://www.runoob.com/jsref/jsref-obj-date.html 常用的方法：其他需要时网上搜索着用。 在这里插入图片描述 12.1、俩种获取时间戳的方法：var data = new Date() time = data.getTime() console.log(time) var time2 = Date.now() console.log(time2)十三、Math 对象Math 对象用于执行数学任务。Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()。方法详情：https://www.runoob.com/jsref/jsref-obj-math.html 13.1、math的常量 在这里插入图片描述 13.2、math的方法 在这里插入图片描述 可以使用math.random(),生成随机数。（类似于python的random.randint(a,b)） 在这里插入图片描述 十四、String对象14.1、方法表 在这里插入图片描述 14.2、方法示例 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 14.3、注意事项（split方法和python有区别） 在这里插入图片描述 区别点1：JavaScript的字符串split，search、match、replace方法里面可以写正则，而python中不支持按正则匹配进行分割。注意点：split和其他三个有一点不一样，不用写g全局匹配模块，默认就是自动全局匹配，其他三个（search，match、replace）默认只匹配第一个 在这里插入图片描述 区别点2：search，也可以使用正则（类似于python正则模块re.search） 在这里插入图片描述 区别点3：match返回是数组： 正则的/[A-z]/ig中的ig的意思：i忽略大小写，g是全局模式，如果不写g,则会指找到一个字母就返回，如果写上g就会全部匹配下来，返回一个数组（python成为列表，而且类似于python re模块的find和findall功能）。 在这里插入图片描述 区别4：replace（类似于python的re模块的sub功能） 在这里插入图片描述 在这里插入图片描述 十五、RegExp（正则表达式） 对象正则表达式是描述字符模式的对象。 正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。 语法var patt=new RegExp(pattern,modifiers); 或者更简单的方式: var patt=/pattern/modifiers;pattern（模式） 描述了表达式的模式modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \\）。 15.1、基本使用修饰符也就是下面图的匹配模式。 在这里插入图片描述 在这里插入图片描述 15.2、字面量 在这里插入图片描述 15.3、示例 在这里插入图片描述 在这里插入图片描述 15.4、使用字符串的replace结合正在去重字符串前后的空格。 在这里插入图片描述 十六、字符串转josn参考：https://www.w3cschool.cn/json/nopz1pp7.htmlJavaScript中字符串(string)转json的方法主要有四种，详细介绍如下： 第一种方式：使用js函数eval();testJson=eval(testJson);是错误的转换方式。 正确的转换方式需要加(): testJson = eval(“(“ + testJson + “)”); eval()的速度非常快，但是他可以编译以及执行任何javaScript程序，所以会存在安全问题。在使用eval()。来源必须是值得信赖的。需要使用更安全的json解析器。在服务器不严格的编码在json或者如果不严格验证的输入，就有可能提供无效的json或者载有危险的脚本，在eval()中执行脚本，释放恶意代码。 js代码： 代码如下: function ConvertToJsonForJs() { //var testJson = &quot;{ name: &apos;小强&apos;, age: 16 }&quot;;(支持) //var testJson = &quot;{ &apos;name&apos;: &apos;小强&apos;, &apos;age&apos;: 16 }&quot;;(支持) var testJson = &apos;{ &quot;name&quot;: &quot;小强&quot;, &quot;age&quot;: 16 }&apos;; //testJson=eval(testJson);//错误的转换方式 testJson = eval(&quot;(&quot; + testJson + &quot;)&quot;); alert(testJson.name); }第二种方式：使用jquery.parseJSON()方法对json的格式要求比较高，必须符合json格式jquery.parseJSON() js:代码 代码如下: function ConvertToJsonForJq() { var testJson = &apos;{ &quot;name&quot;: &quot;小强&quot;, &quot;age&quot;: 16 }&apos;; //不知道 //&apos;{ name: &quot;小强&quot;, age: 16 }&apos; (name 没有使用双引号包裹) //&quot;{ &apos;name&apos;: &quot;小强&quot;, &apos;age&apos;: 16 }&quot;(name使用单引号) testJson = $.parseJSON(testJson); alert(testJson.name); }第三种方式：使用Function来进行转换（python使用execjs调用需要转json时推荐使用这个）js:代码 代码如下: var jsonStr = &apos;{&quot;userName&quot;: &quot;tiu&quot;,&quot;userAge&quot;: 26,&quot;isMale&quot;: true}&apos;; var json = (new Function(&quot;return &quot; + jsonStr))();可以看到其原理就是拼接js代码字符串，然后使用Function创建一个匿名方法然后调用之！ 第四种方式：使用JSON全局对象，不过比较可惜的是IE8以下的版本没有这个对象，如果不考虑兼容IE8一下版本的话JSON全局对象是个很有用的东西代码如下： var jsonStr = &apos;{&quot;userName&quot;: &quot;tiu&quot;,&quot;userAge&quot;: 26,&quot;isMale&quot;: true}&apos;; var json = JSON.parse(jsonStr); var str = JSON.stringify(json);第五种、使用node.js的JSON模块模块地址：https://www.npmjs.com/package/JSON安装：npm i JSON json转字符串JSON.stringify(obj)将JSON转为字符串。 obj传入的为json,返回结果是字符串类型的json 字符串转jsonJSON.parse(string)将字符串转为JSON格式 string为传入的json类型的字符串，返回的结果为json 再不懂可以参考：https://blog.csdn.net/chy555chy/article/details/52552548","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhaojiafu.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhaojiafu.github.io/tags/JavaScript/"}]},{"title":"mysql常用命令总结","slug":"aca6d6dcd4c6a587fdb6abca824afc69","date":"2019-06-26T03:34:32.000Z","updated":"2019-12-02T07:00:37.416Z","comments":true,"path":"2019/06/26/aca6d6dcd4c6a587fdb6abca824afc69/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/26/aca6d6dcd4c6a587fdb6abca824afc69/","excerpt":"","text":"mysql常用命令总结1、连接数据库mysql -h ip地址 -P 端口号 -u 用户名 -p 密码2、显示所有数据库show databases;3、创建数据库create database 数据库名字 default charset=utf8;4、使用数据库use 数据库名字;5、删除数据库drop 数据库名字;6、查询数据库下所有的表use 数据库名; show tables;7、创建表create table 表名( 列名 类型, 列名 类型, 列名 类型 );8、常用的类型数字 int,float,decimal 字符串 char,varchar,longtext 日期 date,datetime9、删除表drop table 表名10、约束1、主键约束 2、非空约束 3、唯一约束 4、默认约束 5、外键约束 /*外键表*/ create table student( id int primary key, name varchar(100) not null, idcard char(18) unique, addres varchar(100) default &apos;郑州&apos;, gid int not null, foreign key(gid) references grade(id) ); /*主键表*/ create table grade( id int primary key, name varchar(100) not null );11、描述表的信息desc 表名12、显示表的创建sql语句show create table 表名13、主键的生成策略1、int 自动增长 auto_increment 2、字符串 uuid 了解 create table grade( id int auto_increment primary key, name varchar(100) not null ); create table grade2( id char(36) primary key, name varchar(100) not null ); insert into grade(name) values(&apos;a&apos;); insert into grade(name) values(&apos;b&apos;); insert into grade2(id,name) values(uuid(),&apos;a&apos;); insert into grade2(id,name) values(uuid(),&apos;b&apos;);14、基本的增删改查create table student( id int auto_increment primary key, name varchar(100) not null, sex char(1) not null, address varchar(100) default &apos;郑州&apos;, phone varchar(11), birthday date ); insert into student(name,sex,address,phone,birthday) values(&apos;老王&apos;,&apos;男&apos;,&apos;开封&apos;,&apos;11111111111&apos;,&apos;1998-2-2&apos;); select * from student; select name,phone from student; select name 姓名,phone 电话 from student; delete from student where id = 3; update student set address=&apos;开封&apos; where id = 5; update student set sex=&apos;女&apos;,address=&apos;曼谷&apos; where id = 5; UPDATE student SET sex=&apos;女&apos;,address=&apos;曼谷&apos; WHERE id = 5;15、单表查询15.0、三个表结构图基于三个表完成下面的常用命令训练，表结构如图所示：{% image /imgs/20190626224127107.png '在这里插入图片描述' '' %} 15.1、查询所有/*1、查询所有EMP信息*/ select * from EMP; /*2、查询所有job*/ select job from EMP;15.2、去重查询/*3、去重：查询所有job*/ select distinct job from EMP; /*4、去重：查询所有deptno,job的组合*/ select distinct deptno,job from EMP;15.3、条件查询/*5、条件：查询工资大于2000的*/ select * from EMP where sal &gt; 2000; /*6、条件：查询工资大于2000的并且部门编号是10的*/ select * from EMP where sal &gt; 2000 and deptno = 10; /*7、条件：查询工资2000-3000之间的*/ select * from EMP where sal &gt;= 2000 and sal &lt;= 3000; select * from EMP where sal between 2000 and 3000;15.4、模糊查询/*8、模糊：查询以S开头的员工信息*/ select * from EMP where ename like &apos;S%&apos;; /*9、模糊：查询含有S的员工信息*/ select * from EMP where ename like &apos;%S%&apos;; /*10、模糊：查询含第三个字符是R的员工信息*/ select * from EMP where ename like &apos;__R%&apos;;15.5、条件范围查询/*11、范围：查询部门编号是10，20的员工信息*/ select * from EMP where (deptno = 10) or (deptno=20); select * from EMP where deptno in (10,20); /*12、空：查询没有有奖金的员工信息*/ select * from EMP where comm is null; /*13、空：查询奖金大于400的员工信息*/ select * from EMP where comm &gt; 400; /*14、空：查询员工的编号，年薪 null参与的运算，结果还是null*/ select empno 编号,(sal+ifnull(comm,0))*12 年薪 from EMP;15.6、聚合查询/*15、聚合：统计员工的数量*/ select count(*) from EMP; /*16、聚合：统计有奖金员工的数量*/ select count(*) from EMP where comm is not null; select count(comm) from EMP; /*17、聚合：最高的工资，最低的工资，平均工资,工资的总和*/ select max(sal),min(sal),avg(sal),sum(sal) from EMP;15.6、分组查询/* 分组需要注意： 1、分组之后只能查询两种 1、被分组的列 2、聚合函数 2、数据过滤 1、过滤的数据是分组之前，where 2、过滤的数据是分组之后，having 3、关键词的顺序 select from where 分组之前的过滤 group by having 分组之后的过滤 order by limit */ /*18、分组：每个部门的平均工资~~~*/ select deptno,avg(sal) from EMP group by deptno; /*19、分组：每个部门员工工资高于1000的平均工资*/ select deptno,avg(sal) from EMP where sal &gt; 1000 group by deptno; /*20、分组：每个部门员工工资高于1000的平均工资,平均工资高于2000*/ select deptno,avg(sal) from EMP where sal &gt; 1000 group by deptno having avg(sal)&gt;2000; select deptno,avg(sal) avg_sal from EMP where sal &gt; 1000 group by deptno having avg_sal&gt;2000; /*21、分组：每个部门每个工种的最高工资*/ select deptno,job,max(sal) from EMP group by deptno,job;15.7、排序查询/*22、排序：查询所有员工信息，按照工资排序*/ select * from EMP order by sal asc; select * from EMP order by sal desc; /*23、排序：查询所有员工信息，按照按照部门正序，按照工资倒序*/ select * from EMP order by deptno,sal desc;15.8、分页查询/*24、分页*/ select * from EMP order by empno; select * from EMP order by empno limit 3; select * from EMP order by empno limit 2,3; /*25、分页：按照编号排序，每页显示2(page_size)条，查第5(page_now)页信息*/ /* 0 1 2 3 4 5 ... limit (page_now-1)*page_size,page_size */ select * from EMP order by empno limit 8,2;16、三种映射关系/* 1:1 任选一个表当作主键表，另一个表当作外键表 并且外键列必须唯一 */ drop table if exists husband; drop table if exists wife; create table wife( id int auto_increment primary key, name varchar(100) ); create table husband( id int auto_increment primary key, name varchar(100), wid int unique, foreign key(wid) references wife(id) ); /* 1:M 设置外键 */ create table dept( id int auto_increment primary key, name varchar(100) ); create table emp( id int auto_increment primary key, name varchar(100), did int, foreign key(did) references dept(id) on delete cascade ); /* M:N 创建中间表 一般中间表也有用 */ create table student( id int auto_increment primary key, name varchar(100) ); create table subject( id int auto_increment primary key, name varchar(100) ); create table student_subject( id int auto_increment primary key, stuid int, subid int, foreign key(stuid) references student(id), foreign key(subid) references subject(id) );17、关联查询17.1、内连接/*1、内连接*/ select * from DEPT,EMP where DEPT.DEPTNO = EMP.DEPTNO; select EMP.EMPNO,EMP.ENAME,DEPT.DNAME from DEPT inner join EMP on DEPT.DEPTNO = EMP.DEPTNO; /*查询员工的编号，姓名，所在部门的名字*/ select EMP.EMPNO,EMP.ENAME,DEPT.DNAME from DEPT,EMP where DEPT.DEPTNO = EMP.DEPTNO; select EMP.EMPNO,EMP.ENAME,DEPT.DNAME from DEPT,EMP where DEPT.DEPTNO = EMP.DEPTNO and DEPT.DEPTNO = 10;17.2、外连接/*外连接*/ select t2.EMPNO,t2.ENAME,t1.DEPTNO,t1.DNAME from DEPT t1 left join EMP t2 on t1.DEPTNO = t2.DEPTNO; /*创建自关联的表*/ create table EMP2( id int auto_increment primary key, name varchar(100), mgr int foreign key(mgr) references EMP2(id) ); /*查询员工的编号，姓名，上级名字*/ select t1.empno,t1.ename,t2.ename from EMP t1,EMP t2 where t1.mgr = t2.empno select t1.empno 员工的编号 ,t1.ename 员工的姓名,t2.ename 上级的姓名 from EMP t1 left join EMP t2 on t1.mgr = t2.empno;简单小题练手/*1、一个表能完成不？*/ 1、查询emp中最高薪水人的名字 1、查询最高的薪水 select max(sal) from EMP; 2、将1作为条件 select ename from EMP where sal = (select max(sal) from EMP); 2、查询每个部门中的最高薪水人的名字和所在的部门编号 1、各个部门的最高薪水 select max(sal),deptno from EMP group by deptno; 2、将1的结果作为一个新的表，联表查询 select t1.ename,t1.deptno from EMP t1 inner join (select max(sal) max_sal,deptno from EMP group by deptno) t2 on t1.deptno = t2.deptno and sal = t2.max_sal; 3、查询薪水在平均薪水之上的雇员的名字 select ename from EMP where sal &gt;(select avg(sal) from EMP); 4、查询雇员的名字和所在部门的名字 select t1.ename,t2.dname from EMP t1,DEPT t2 where t1.deptno = t2.deptno; 5、查询薪水在在本部门平均薪水之上的雇员的名字 select t1.ename,t1.deptno from EMP t1 inner join (select avg(sal) avg_sal,deptno from EMP group by deptno) t2 on t1.deptno = t2.deptno and sal &gt; t2.avg_sal; 6、查询每个员工的薪水的等级,员工的姓名 select * from EMP; select * from SALGRADE; select t1.ename,t2.grade from EMP t1,SALGRADE t2 where t1.sal between t2.losal and t2.hisal; 7、查询每个部门的平均薪水的等级,部门的编号 1、各个部门的平均薪水 select avg(sal),deptno from EMP group by deptno; 2、将1的结果当作一个表 select t1.grade,t2.deptno from SALGRADE t1,(select avg(sal) avg_sal,deptno from EMP group by deptno) t2 where t2.avg_sal between t1.losal and t1.hisal 8、查询雇员的名字，所在部门的名字，工资的等级 select t1.ename,t2.dname,t3.grade from EMP t1,DEPT t2,SALGRADE t3 where t1.deptno = t2.deptno and t1.sal between t3.losal and t3.hisal; select t1.ename,t2.dname,t3.grade from EMP t1 inner join DEPT t2 on t1.deptno = t2.deptno inner join SALGRADE t3 on t1.sal between t3.losal and t3.hisal; 9、查询雇员的名字和其经理的名字 select employee.ename,employer.ename from EMP employer,EMP employee where employee.mgr = employer.empno; 10、查询雇员中是经理人的名字 select * from EMP; 1、经理上的编号 select distinct mgr from EMP; 2、将1当作条件 select ename from EMP where empno in(select distinct mgr from EMP); 11、查询平均薪水最高的部门的编号和名称 1、每个部门的平均薪水 select avg(sal) avg_sal,deptno from EMP group by deptno; 2、求1表中的最高平均薪水 select max(t.avg_sal) from (select avg(sal) avg_sal,deptno from EMP group by deptno) t 3、将2的结果当作条件 select t1.deptno from (select avg(sal) avg_sal,deptno from EMP group by deptno) t1 where t1.avg_sal = (select max(t2.avg_sal) from (select avg(sal) avg_sal,deptno from EMP group by deptno) t2) 4、将3作为条件 select t.deptno,t.dname from DEPT t where deptno in ( select t1.deptno from (select avg(sal) avg_sal,deptno from EMP group by deptno) t1 where t1.avg_sal = (select max(t2.avg_sal) from (select avg(sal) avg_sal,deptno from EMP group by deptno) t2) ); 12、查询平均薪水等级最低的部门的部门名称 13、查询部门经理人中平均薪水最低的部门名称 14、查询薪水最高的前5名雇员编号，名称，薪水 select empno,ename,sal from EMP order by sal desc limit 5; 15、查询薪水最高的第6名到第10名雇员编号，名称，薪水 select empno,ename,sal from EMP order by sal desc limit 5,5; 16、查询部门的名字和部门的人数(如果部门里没有人数，显示0个) select t1.dname,ifnull(t2.num,0) from DEPT t1 left join (select count(*) num,deptno from EMP group by deptno) t2 on t1.deptno = t2.deptno; 17、查询员工的编号，工资和所在部门的平均工资 select empno,ename,sal,t2.deptno,(select avg(sal) from EMP t1 where t1.deptno = t2.deptno) from EMP t2; select empno,ename,sal,t2.deptno,t2.avg_sal from EMP t1 inner join (select avg(sal) avg_sal,deptno from EMP group by deptno) t2 on t1.deptno = t2.deptno;18、函数1、字符串 1、length select LENGTH(&quot;abc中国&quot;); select ename,LENGTH(ename) from EMP; 2、concat select CONCAT(&quot;a&quot;,&quot;bc&quot;,&quot;xx&quot;); 3、str_to_date select STR_TO_DATE(&quot;2018年02月03日&quot;,&quot;%Y年%m月%d日&quot;); create table tt( id int auto_increment primary key, birthday date ); insert into tt(birthday) values(&quot;2018-2-4&quot;); insert into tt(birthday) values(STR_TO_DATE(&quot;2018年02月03日&quot;,&quot;%Y年%m月%d日&quot;)); select * from tt; 2、数字 1、floor，ceil select FLOOR(1.56),CEIL(1.16); 2、rand select RAND(10); 3、日期 1、now select NOW(); select DAYOFWEEK(&apos;2018-08-26&apos;); 2、date_format 日期转字符串 select DATE_FORMAT(NOW(),&quot;%Y年%m月%d日 %H时%i分%s秒&quot;); select DATE_FORMAT(&quot;2018-2-3&quot;,&quot;%Y年%m月%d日&quot;);19、视图创建视图 create view myview as select avg(sal) avg_sal,deptno from EMP group by deptno; 使用视图 select * from myview;20、事务drop table bank; create table bank( id int primary key, money int ); insert into bank values(1,10); insert into bank values(2,1); select * from bank; begin; update bank set money = money-5 where id = 1; update bank set money = money+5 where id = 2; rollback; commit; select * from bank; begin; savepoint p1; update bank set money = money-1 where id = 1; savepoint p2; update bank set money = money-1 where id = 1; savepoint p3; update bank set money = money-1 where id = 1; savepoint p4; rollback to p4; commit;","categories":[{"name":"python 模块","slug":"python-模块","permalink":"https://zhaojiafu.github.io/categories/python-%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://zhaojiafu.github.io/tags/mysql/"},{"name":"python 模块","slug":"python-模块","permalink":"https://zhaojiafu.github.io/tags/python-%E6%A8%A1%E5%9D%97/"}]},{"title":"window 系统chrome浏览器截屏","slug":"5857d3be51819cd3a81f4e4ca8e488a4","date":"2019-06-19T03:34:32.000Z","updated":"2019-12-02T06:45:48.391Z","comments":true,"path":"2019/06/19/5857d3be51819cd3a81f4e4ca8e488a4/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/19/5857d3be51819cd3a81f4e4ca8e488a4/","excerpt":"","text":"@[toc] 1、截全屏1、Ctrl + shift + I 进入开发者工具（也可以右上角三个点，选择更多工具，然后点击开发者工具）2、Ctrl + shift + P,然后输入srceen，然后选择capture full size screenshot3、截图保存下来，在电脑的下载文件夹 在这里插入图片描述 2、截某个元素，也就是截图一分部1、Ctrl + shift + I 进入开发者工具（也可以右上角三个点，选择更多工具，然后点击开发者工具）2、在elements 里面找到需要截图的div或者其他元素块，通过移动颜色加深的就是选择的元素块。 在这里插入图片描述 2、Ctrl + shift + P,然后输入srceen，然后选择capture full node screenshot 在这里插入图片描述 3、截图保存下来，在电脑的下载文件夹 4、注意：有个缺点，只能截图窗口显示部分，其实这个功能还不如用qq,微信，钉钉等聊天工具软件的截图方便。","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"office Excel导入csv方法","slug":"47e1844ffafabaddd9c445f3231ddc5d","date":"2019-06-17T03:34:32.000Z","updated":"2019-12-02T07:40:52.638Z","comments":true,"path":"2019/06/17/47e1844ffafabaddd9c445f3231ddc5d/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/17/47e1844ffafabaddd9c445f3231ddc5d/","excerpt":"","text":"office和wps有点区别，我家里电脑装的是wps，公司电脑是office,刚开始我找的是右边的自文本，然后没有找到合适的导入，每次之只能导入一行，后来找了半天，从创建查询就能直接导入了，这点真的和wps不一样。记录下来，方便下次再忘了。 在这里插入图片描述","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"爬虫Status Code_ 304解决方案","slug":"8805e481d6cc90851195304816559446","date":"2019-06-13T03:34:32.000Z","updated":"2019-12-02T06:45:49.649Z","comments":true,"path":"2019/06/13/8805e481d6cc90851195304816559446/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/13/8805e481d6cc90851195304816559446/","excerpt":"","text":"具体网页不公布了： 问题：打印的结果： print(resp.status_code) print(111,resp.content.decode()) 304 111 这让我很诧异，因为我也是第一次遇见304，不知道如何下手，就百度谷歌搜索结果，看看有没有解决方法： 最后找到了一些304的原理文章https://blog.csdn.net/soonfly/article/details/50953814https://blog.csdn.net/huwei2003/article/details/70139062 其中看到了里面有俩个关键的词，然后我再headers找到了同样的俩个词，然后爬取时去掉即可。 在这里插入图片描述 在这里插入图片描述 headers = { &quot;accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;, &quot;accept-encoding&quot;: &quot;gzip, deflate, br&quot;, &quot;accept-language&quot;: &quot;zh-CN,zh;q=0.9&quot;, &quot;cache-control&quot;: &quot;max-age=0&quot;, &quot;cookie&quot;: &quot;PHPSESSID=mk0a6o889gjlmg6143nngqcqg3; Hm_lvt_475c542162a560b5bb02f9f6fc6cb31e=1560394732; Hm_lvt_a632bb02989bf5564a21489660475bda=1560394808; Hm_lpvt_a632bb02989bf5564a21489660475bda=1560406531; Hm_lpvt_475c542162a560b5bb02f9f6fc6cb31e=1560407160&quot;, # &quot;if-modified-since&quot;: &quot;Sun, 05 May 2019 04:32:58 GMT&quot;, # &quot;if-none-match&quot;: &quot;\\&quot;5cce677a-5b33\\&quot;&quot;, &quot;upgrade-insecure-requests&quot;: &quot;1&quot;, &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36&quot; }这样结果就是200了，至此问题解决。","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"一些实用导航网站","slug":"965d0eb42c0bd8d4877ab8e7734a81d8","date":"2019-06-12T03:34:32.000Z","updated":"2019-12-02T06:45:48.753Z","comments":true,"path":"2019/06/12/965d0eb42c0bd8d4877ab8e7734a81d8/","link":"","permalink":"https://zhaojiafu.github.io/2019/06/12/965d0eb42c0bd8d4877ab8e7734a81d8/","excerpt":"","text":"花了点时间整理一些实用导航网站 对于大多数萌新来说，每次想查找资料，不管是电影音乐，还是专业的学术行业知识，都是习惯性通过百度来搜集，毕竟.百度能解决99%的问题。 然鹅，百度毕竟是综合性搜索引擎，会搜集到自己想要的知识还是需要花费一定时间的，如果是专业的知识可能会更久。因此，为了方便大家更高效地搜寻到资料，摸鱼特地为大家整理了10个垂直专业的小众导航网站，准备好你的ctrl+c吧！ 0、自己用的：程序员导航 - 代码如诗！程序员导航 - 代码如诗！http://code.giffox.com/http://www.its368.com/https://www.benbenla.com/bbla/l-chengxuyuan.html 1. 电影导航网址： http://www.dydh.org/ 当前最全面最专业的电影网址导航。该网站收录了在线电影，电影预告、电影资讯、电影周边，等内容版块，甚至还提供了30个电影下载的网站，即便是电影小白， 你也能在这里找到99%以上的电影。摸鱼说：就差一桶爆米花了！ 2. 在音乐网址：http://www.zaimusic.cn/ 专注于提供音乐的超级链接专业网站。在这里，你能找到跟音乐相关的各种服务，如音乐网站，咨询乐评、音乐公司、音乐铃声，无损音乐等等。如果你也热爱音乐， 那这个音乐平台能为你的梦想之旅添砖加瓦。同时，你也能在这里发现志同道合的音乐伙伴。摸鱼说：说出你的梦想！我为你转身 3. 萌导航网址：http://www.moe123.net/http://moe321.com/漫迷的二次元理想国。网站及时收录了动漫网站及资讯、宅网站、萌网站、动画、漫画、游戏等内容，实在是居家必备，让人流连忘返的好地方。请不要叫我死肥宅，谢谢！摸鱼说：你的二次元导航姬，请查收！ 4. 高考网址导航网址：http://www.gaokao789.com/高考网址导航全面收集了高考相关的网站，科学分类并分别罗列，帮助考生快速浏览,分辨网站性质,并准确地找到自已需要的网站，节省考生大量上网时间，有效提高考生网上查找相关资料效率。高考之于每个人都是特别的记忆，本鱼就在考场对着两道空白的数学大题相对无言。 5. 大数据导航网址：http://hao.199it.com/每个人都值得收藏的网站之一。大数据导航收录了各行各业的大数据分析网站和工具，不管是网站排名监测，全球人口普查数据还有世界500强排行榜，甚至连2018世界杯预测的网站都有，看完后不止梅西，本鱼都慌得一比…摸鱼说：不管你是哪个行业，这里都有你要的大数据！http://t.xiaomiquan.com/u3bIMzf (二维码自动识别) 6. 医学导航网址：http://www.meddir.cn/目前最全最专业的医学网址导航网站之一，该网站涵盖了组织机构、资源分类、求职求学、学科分类和疾病大全六大主题版块，而且根据医务工作者对医学信息的需求,每一个主题下又设置了若干小类，每个类目下精心又编排了众多专业的、实用的医学网址。摸鱼说：感谢每位医务工作者的付出！ 7. 心理学导航网址：http://www.psychspace.com/site/国内最专业的心理学导航网站之一。虽然网站可能看起来有点小简约，或者直接说不具美感。但其实该网站已存活17年了，多年来始终致力于“传播心理学知识、倡导心理文化”之目的在于能使大众在了解心理现象的普遍规律之后找到属于自己的心理空间。心理学中有句话叫助人自助，自助助人，希望每个人都能找到自己的价值感与幸福感！摸鱼说：你真的了解你自己吗? 8. 阿猫啊狗导航网址：http://www.koubei.la/顾名思义，阿猫阿狗网址导航，第一眼你可能会以为是个宠物类网站。是的，我也是这么想的。但它其实是个产品汪、运营喵导航站，目前已收录了产品、运营、交互设计、用户体验、行业资讯、数据分析、电子商务、产品运营等必备工具以及国外优秀网站。摸鱼说：即便你不是产品或运营人员，这里面的工具你也会需要的！ 9. 极客导航网址：http://www.jikedaohang.com/一听极客这个词，就知道是跟程序猿相关的了。极客导航是目前专业的程序员网址导航站之一，已经在广大程序员中树立了良好的品牌，是众多程序员上网的首选。目前已涵盖Android，IOS前，后端，设计等主流IT行业所必备的开发工具，经典博客，自学教程，源码下载等常用网站。良心的是，网站还有跳槽指南版块哦~摸鱼说：也许仅次于全球最大的同性交友社区。 10. 学术网站大全网址：http://dir.cnki.net当前学术领域还缺少一个权威的学术网站导航网站，而知网旗下的学术网站大全算是填补了这块的空白。作目前为最全面、最具权威的全球学术网站大全，在这里你可以搜集到到99%以上跟学术相关的资料，剩下的1%你可能需要Google（具体方法可看我的悟空问答）摸鱼说：科研狗恨不得设为浏览器主页的学术导航网站！ 11、额外一些实用导航网站有趣的网站：果壳任意门 - 发现你最爱的网站http://www.gkbang.cn/link/ ACG网站：翼萌导航|动漫导航https://link.zhihu.com/?target=http%3A//d.yimoe.cc/萌猫导航|萌猫网https://link.zhihu.com/?target=http%3A//www.mao-123.com/ 科学网站：科技网址导航-IT互联网站大全https://link.zhihu.com/?target=http%3A//www.kejik.com/科学123_科学网站导航https://link.zhihu.com/?target=http%3A//www.kexue123.com/其他无忧CAD网址大全_CAD网站第一导航https://link.zhihu.com/?target=http%3A//www.51cad.com.cn/通用机械导航-机械网址大全https://link.zhihu.com/?target=http%3A//tyjxdh.wubaiyi.com/前端网址导航https://link.zhihu.com/?target=http%3A//www.whycss.com/前端开发资源导航https://link.zhihu.com/?target=http%3A//www.css88.com/nav/90后网址导航https://link.zhihu.com/?target=http%3A//www.map90.com/电商导航：电商网址导航https://link.zhihu.com/?target=http%3A//123.21ds.cn/优设电商导航https://link.zhihu.com/?target=http%3A//hao.uisdc.com/shop/SDC设计师网址导航https://link.zhihu.com/?target=http%3A//www.hao.uisdc.com/13890电商网址导航——淘宝卖家必备的网站https://link.zhihu.com/?target=http%3A//www.13890.com/ 创业导航：创业导航（CY2345.COM）https://link.zhihu.com/?target=http%3A//www.cy2345.com/CEO网址导航网https://link.zhihu.com/?target=http%3A//site.xiceo.com/产品经理网址导航https://link.zhihu.com/?target=http%3A//dh.woshipm.com/HR网址之家|HR网站网址导航大全https://link.zhihu.com/?target=http%3A//hao.chochina.com/政府_政府部门https://link.zhihu.com/?target=http%3A//www.2345.com/gov.htm 12、一个简洁网站导航https://www.bidianer.com/#/ 13、沃客导航http://9178.work/ 在这里插入图片描述 在这里插入图片描述 14、商显汇导航网址目前平台按照商显产业链的相关情况，划分为整机厂家、主板、外壳、液晶屏、触摸屏、软件、其他、商显资讯、商显荟萃及国外商显，我们详细整理了商显从业者普遍关心的优秀整机厂家、优秀供应商及行业门户资讯等商显资源。http://www.leddq.com/ 在这里插入图片描述 15、九九归一九九归一 导航网http://www.dh9981.com/学习类：http://1nami.com/ 快搜：https://search.chongbuluo.com/搜索aa：http://lackar.com/aa/去瞧瞧 - 互联网创业者网址导航：http://www.quqiaoqiao.com/旅游类的：http://www.lvxing.net/ 推荐IT网址导航：http://www.it3848.com http://www.linux265.com 这个主要是Linux相关导航。 参考：链接：https://www.zhihu.com/question/19962935/answer/431038071","categories":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"资源分享","slug":"资源分享","permalink":"https://zhaojiafu.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}]},{"title":"chrome 断点调试技巧","slug":"bccfaaf79e64924ba8ea1545e936ecc0","date":"2019-05-30T03:34:32.000Z","updated":"2019-12-02T07:00:37.203Z","comments":true,"path":"2019/05/30/bccfaaf79e64924ba8ea1545e936ecc0/","link":"","permalink":"https://zhaojiafu.github.io/2019/05/30/bccfaaf79e64924ba8ea1545e936ecc0/","excerpt":"","text":"1、全局搜索 在这里插入图片描述 在这里插入图片描述 2、打断点、搜索之后点击行数前的数字，然后刷新即可。 在这里插入图片描述 3、一步一步打断点，有函数进入点击下面的绿点或者按F11 在这里插入图片描述 4、跳出当前循环和函数点击上一个绿点的右侧的点，或者shift + F11","categories":[{"name":"chrome","slug":"chrome","permalink":"https://zhaojiafu.github.io/categories/chrome/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://zhaojiafu.github.io/tags/chrome/"}]},{"title":"python 爬虫之序列化html问题（类似_u003）","slug":"244a267548486b0fe1772e75452530c8","date":"2019-05-24T03:34:32.000Z","updated":"2019-12-02T06:45:49.724Z","comments":true,"path":"2019/05/24/244a267548486b0fe1772e75452530c8/","link":"","permalink":"https://zhaojiafu.github.io/2019/05/24/244a267548486b0fe1772e75452530c8/","excerpt":"","text":"一、需求：我最近爬虫爬取了一个json数据，里面的是html格式，但是爬到之后，响应内容是json格式，让我纠结了好久不知道怎么转换：（比如） &quot;title&quot;: &quot;2019年\\u003cem\\u003epython\\u003c/em\\u003e、golang、java、c++如何选择？&quot;对应内容是： &quot;title&quot;: &quot;2019年&lt;em&gt;python&lt;/em&gt;、golang、java、c++如何选择？&quot;二、处理（很简单）直接使用python的json模块反序列化，loads()功能就行了，返回json格式，进行层级寻找想要数据就行了。 在这里插入图片描述 三、使用lxml模块或者pyquery模块处理html需求：想把：2019年python、golang、java、c++如何选择？处理成：2019年python、golang、java、c++如何选择？ 方法1、使用pyquery模块from pyquery import PyQuery as pq title = &quot;2019年&lt;em&gt;python&lt;/em&gt;、golang、java、c++如何选择？&quot; json_one[&quot;title&quot;] = pq(title).text()这样输出就达到自己想要的纯文本了。 在这里插入图片描述 方法2、使用lxml 模块的etreefrom lxml import etree title = &quot;2019年&lt;em&gt;python&lt;/em&gt;、golang、java、c++如何选择？&quot; json_one[&quot;title&quot;] = &apos;&apos;.join(etree.HTML(title).xpath(&apos;//text()&apos;))这样也得到想要的纯文本了。 方法比较：因为开发爬虫对效率有时候要求高，我测试了一页，俩着用时（包括爬取json的总时间），lxml模块更快一点，虽然单页比较不出来多大差别，但是实际项目时一弄就是几十万的或者上百万的数据爬取，这时候时间差别就很大了。对比时间如下，至此结束。希望能帮到需要的你。 在这里插入图片描述","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"python 使用selenum之模拟登陆只需俩步","slug":"918d0f7c47e94e0d595d80fe77217273","date":"2019-05-22T03:34:32.000Z","updated":"2019-12-02T06:45:49.550Z","comments":true,"path":"2019/05/22/918d0f7c47e94e0d595d80fe77217273/","link":"","permalink":"https://zhaojiafu.github.io/2019/05/22/918d0f7c47e94e0d595d80fe77217273/","excerpt":"","text":"需求：有些网站的一些网页需要登陆才可以的。这时候就是需要借助python的selenium的模块，我突然找到一个更方便的方法。 我的这个方法优点：不用使用找到相关登陆框输入账号密码，也不用一个一个查找cookie，省时省力。 1、之前的笨方法先说一下我之前用的笨方法，之前是模拟一个招聘网站，至于那个网站就不公布了，然后我再网站如下图（?）的地方，进行一个一个cookie删除，最终找到和登陆相关的俩个cookie，把俩个cookie加到selenium里面，也能实现模拟登陆功能。 在这里插入图片描述 2、简单方法今天我突然灵机一动，想到一个简单方法。这个方法主要思路就是先写个代码，访问网站主要，使用python的time模块，停留30秒，这段使用你用来登陆自己的账号，然后代码打印处理你登陆后的cookies,这样就可以找到所以cookies，然后把这些cookies一个一个加入到下一个代码里面，就能实现模拟登陆的功能了，这个时间比之前省了很多。之前的方法一个一个cookie删除刷新，删除刷新，搞了我一俩个小时，才找到是和俩个cookie相关，俩个cookie同时删除才能到，所以如果其他网站和登陆的cookie相关个数增加2个或者以上，那样时间不止一俩个小时了。而这样几分钟就搞定了。 简单方法步骤：不多说，直接上代码： 步骤1获取cookies列表：from selenium import webdriver import time import random driver = webdriver.Chrome() url = &quot;https://search.jd.com/Search?keyword=%E6%89%8B%E6%9C%BA&amp;enc=utf-8&amp;page=1&amp;s=1&quot; driver.get(url) # 等待时间用来获取cookie time.sleep(30) # 这个时间用来自己手动登陆 cookie = driver.get_cookies() # 这个就是需要的cookie列表 print(&apos;cookie&apos;,cookie)步骤2：from selenium import webdriver import time import random driver = webdriver.Chrome() driver.implicitly_wait(10) # url = &quot;https://search.jd.com/Search?keyword=%E6%89%8B%E6%9C%BA&amp;enc=utf-8&amp;page=1&amp;s=1&quot; url = &quot;https://search.jd.com/Search?keyword=裤子&amp;enc=utf-8&amp;page=1&amp;s=1&quot; driver.get(url) # time.sleep(30) cookies = “这个是上一步打印出来的cookies列表，不用改格式，因为本身就是selenium打印出来的格式，他需要的也是这样的格式” for cookie in cookies: # 只能一个一个加入 driver.add_cookie(cookie) time.sleep(1) # 再次访问你需要的url,看看是不是可以登陆了。 driver.get(url) time.sleep(2)","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"Python3永久导入使用自定义模块的2种方式","slug":"110c5e099bc3e787b22f871d5aaa4d17","date":"2019-05-17T03:34:32.000Z","updated":"2019-12-02T06:45:47.867Z","comments":true,"path":"2019/05/17/110c5e099bc3e787b22f871d5aaa4d17/","link":"","permalink":"https://zhaojiafu.github.io/2019/05/17/110c5e099bc3e787b22f871d5aaa4d17/","excerpt":"","text":"需求：我想自己写的一些简单工具，这样每次使用时不用在复制到自己的当前工作目录下，既省时又省力。下面具体说下我用到的俩种方法： 方法一、（主要推荐）步骤1，创建python包把自己需要模块创建问python包，需要在init.py文件需要带入你当前文件下的py文件。上面斜体为主要点，我当时就是因为这个原因弄了好久没弄好，后来我就随便看个人家其他一个我用的模块，看看人家结构，发现就是init.py文件人家写的又内容，所以我比着就写进去，这样肯定不会有问题，毕竟咱使用人家模块都没有问题。（为自己找到解决方法而偷偷窃喜一分钟） 我的结构说一下我的内容：user_agent_all_ok.txt：是我搜集到一批user_agent文件user_agent_myself.py：其实很简单，就是每次随机返回一个user_agent 在这里插入图片描述 我的init.py文件（因为我就一个py文件） 在这里插入图片描述 步骤2，把整个python包放入到安装python目录下的Lib\\site-packages下面比如我的： D:\\tools\\Python3.6\\Lib\\site-packages\\user_agent_myself图片描述 {% image /imgs/20190517113816427.png '在这里插入图片描述' '' %} 步骤3、导入方法import user_agent_myself print(user_agent_myself.get_one_user_agent())方法二、使用sys模块步骤1、和上面步骤1一样：步骤2、把步骤1的python包放到一个你不会移动的文件目录下比如我的目录：D:\\tools_mysel_python_moduls下面的这个D:\\tools_mysel_python_moduls\\user_agent_myself目录，user_agent_myself是我的python包， 步骤3、导入方法import sys sys.path.append(r&quot;D:\\tools\\_mysel_python_moduls\\user_agent_myself&quot;) import user_agent_myself print(user_agent_myself.get_one_user_agent())结果： 在这里插入图片描述 对比：从导入方法来看，方法一的代码更少，和其他的python模块使用类似，我建议使用方法一。注意如果想测方法二的友友，需要先把方法一的python移动到其他目录，便于测试方法二，我看网上还有其他方法，觉得方法一已经是最简单的了，就没有再尝试了。想学的自己可以再多找找学学。","categories":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/categories/python/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"导入使用自定义模块","slug":"导入使用自定义模块","permalink":"https://zhaojiafu.github.io/tags/%E5%AF%BC%E5%85%A5%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/"}]},{"title":"user-agent 批量汇总+随机返回一个","slug":"e78ca42ddd890bd7ce2ee5b02c49fa44","date":"2019-05-17T03:34:32.000Z","updated":"2019-12-02T07:26:18.710Z","comments":true,"path":"2019/05/17/e78ca42ddd890bd7ce2ee5b02c49fa44/","link":"","permalink":"https://zhaojiafu.github.io/2019/05/17/e78ca42ddd890bd7ce2ee5b02c49fa44/","excerpt":"","text":"1、需求：爬虫时需要模块浏览器user-agent,这时如果可以随机得到一个user-agent,会非常方便。本来我是用fake_useragent，但是这个模块今天突然用不了了，https://fake-useragent.herokuapp.com/browsers/0.1.11给我报错fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached，是主要因为上面这个地址获取不到user-agent的json文件了，所以我就在网上找了好多分享的user-agent,大全，汇总、去重、去脏，得到一批自己可以使用的user-agent。有爬虫小伙伴需要的可以拿走用。因为我当时找的时候多想有个好心人分析给我一批，后来才想着自己收集整理了一批。 2、汇总的user-agent文件汇总、去重、去脏之后总共有713个，说不上最多，但也不少了，但是爬虫我觉得应该够用了，每次随机拿一个，觉得够用了。 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.29 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.4 (KHTML, like Gecko) Chrome/3.0.194.0 Safari/531.4 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.11 Safari/534.16 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.50 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.7 Safari/532.0 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; Lunascape 5.0 alpha2) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.7 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; ru-RU) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.11 Safari/534.16 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.10 Safari/532.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Maxthon; Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.1 (KHTML, like Gecko) Chrome/2.0.169.0 Safari/530.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; ja-JP; rv:1.7) Gecko/20040614 Firefox/0.9 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.810.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 Safari/534.6 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; TencentTraveler) Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.4 (KHTML, like Gecko) Chrome/6.0.481.0 Safari/534.4 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.370.0 Safari/533.4 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.7.5) Gecko/20041107 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.4.154.31 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.1.17) Gecko/20110123 (like Firefox/3.x) SeaMonkey/2.0.12 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB) AppleWebKit/534.1 (KHTML, like Gecko) Chrome/6.0.428.0 Safari/534.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; de-DE) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/7.0.540.0 Safari/534.10 Mozilla/5.0 (Windows; U; Windows NT 5.1; de-DE) Chrome/4.0.223.3 Safari/532.2 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/12.0.702.0 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.42 Safari/525.19 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.3 (KHTML, like Gecko) Chrome/4.0.227.0 Safari/532.3 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.8 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.8 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.460.0 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.463.0 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.9 (KHTML, like Gecko) Chrome/2.0.157.0 Safari/528.9 Mozilla/5.0 (Windows NT 5.2) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.794.0 Safari/535.1 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.694.0 Safari/534.24 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5 Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20120427 Firefox/15.0a1 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.5) Gecko/20041107 Firefox/1.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Maxthon; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.4 Safari/532.2 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.65 Safari/535.11 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.21 (KHTML, like Gecko) Chrome/11.0.682.0 Safari/534.21 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/530.0 (KHTML, like Gecko) Chrome/2.0.182.0 Safari/531.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.9 (KHTML, like Gecko) Chrome/7.0.531.0 Safari/534.9 Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0) Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.811.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.0; de-DE; rv:1.7.5) Gecko/20041108 Firefox/1.0 Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.127 Safari/533.4 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E) QQBrowser/6.9.11079.201 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.120 Safari/535.2 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; zh-cn) Opera 8.50 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/7.0.0 Safari/700.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.4 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.53 Safari/525.19 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.6 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.1 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5) Gecko/20041107 Firefox/0.9.2 StumbleUpon/1.994 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-GB; rv:1.9.0.11) Gecko/2009060215 Firefox/3.0.11 (.NET CLR 3.5.30729) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.7.5) Gecko/20041110 Firefox/1.0 Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; en) Opera 8.0 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41 Safari/535.1 QQBrowser/6.9.11079.201 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2 Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b4pre) Gecko/20100815 Minefield/4.0b4pre Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 Mozilla/5.0 (Windows; U; Windows NT 6.0 x64; en-US; rv:1.9pre) Gecko/2008072421 Minefield/3.0.2pre Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.6 Safari/530.5 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.0.3705) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.21 Safari/532.0 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.792.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.1 (KHTML, like Gecko) Chrome/2.0.168.0 Safari/530.1 Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10 Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20040913 Firefox/0.10 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.8 (KHTML, like Gecko) Chrome/2.0.177.1 Safari/530.8 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/533.17.8 (KHTML, like Gecko) Version/5.0.1 Safari/533.17.8 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.40 Safari/530.5 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.24 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.10 (KHTML, like Gecko) Chrome/2.0.157.2 Safari/528.10 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.2 Safari/532.2 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; T312461) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.461.0 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 5.0; rv:1.7.3) Gecko/20041001 Firefox/0.10.1 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3 Mozilla/5.0 (Windows; U; Windows NT 5.2; de-DE) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.202.2 Safari/532.0 Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0) Gecko/16.0 Firefox/16.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/531.3 (KHTML, like Gecko) Chrome/3.0.193.2 Safari/531.3 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0) Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.864.0 Safari/535.2 Mozilla/5.0 (Windows NT 5.2) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.813.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.6 Safari/532.0 Mozilla/5.0 (Windows NT 5.1; rv:2.1.1) Gecko/20110415 Firefox/4.0.2pre Fennec/4.0.1 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.801.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.212.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.36 Safari/535.7 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.697.0 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/7.0.548.0 Safari/534.10 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.17 (KHTML, like Gecko) Chrome/11.0.652.0 Safari/534.17 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.224 Safari/534.10 ChromePlus/1.5.2.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.0 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.7 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.2 Safari/533.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.4 Safari/532.1 Mozilla/5.0 (Windows NT 6.0; rv:2.1.1) Gecko/20110415 Firefox/4.0.2pre Fennec/4.0.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.153.0 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko/20041108 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.462.0 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; de-DE; rv:1.7.5) Gecko/20041122 Firefox/1.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; uZardWeb/1.0; Server_JP) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; HCI0449; .NET CLR 1.0.3705) Mozilla/4.0 (compatible; MSIE 5.0; Windows 98; DigExt); Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1); Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.23 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.208.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.0; rv:14.0) Gecko/20100101 Firefox/14.0.1 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.7 (KHTML, like Gecko) Chrome/2.0.176.0 Safari/530.7 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.21 (KHTML, like Gecko) Chrome/11.0.678.0 Safari/534.21 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.21 Safari/532.0 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; InfoPath.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.55 Safari/525.19 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0a1) Gecko/20110623 Firefox/7.0a1 Fennec/7.0a1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.724.100 Safari/534.30 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.33 Safari/534.3 SE 2.X MetaSr 1.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; WOW64; SV1; uZardWeb/1.0; Server_HK) Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506) Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E) Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3 Mozilla/5.0 (Windows NT 6.0) yi; AppleWebKit/345667.12221 (KHTML, like Gecko) Chrome/23.0.1271.26 Safari/453667.1221 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.2 (KHTML, like Gecko) Chrome/3.0.191.3 Safari/531.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.39 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.1 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.38 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.27 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8b) Gecko/20050118 Firefox/1.0+ Mozilla/5.0 (Windows; U; Windows NT 5.1; ja-JP; rv:1.7) Gecko/20040707 Firefox/0.9.2 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.202.0 Safari/532.0 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.4 (KHTML, like Gecko) Chrome/2.0.171.0 Safari/530.4 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648) Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24 Mozilla/5.0 (Windows; U; Windows NT 5.1; nl-NL; rv:1.7.5) Gecko/20041202 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.204.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.6 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/528.8 (KHTML, like Gecko) Chrome/1.0.156.0 Safari/528.8 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/6.0) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 1.0.3705; .NET CLR 2.0.50727; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.43 Safari/534.7 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.15 Safari/534.13 Mozilla/5.0 (ipad Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.498.0 Safari/534.6 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.43 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.208.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.19 (KHTML, like Gecko) Chrome/11.0.661.0 Safari/534.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-CA) AppleWebKit/534.13 (KHTML like Gecko) Chrome/9.0.597.98 Safari/534.13 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.201.1 Safari/532.0 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.201.1 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.213.1 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/530.6 (KHTML, like Gecko) Chrome/2.0.174.0 Safari/530.6 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.3.154.6 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.599.0 Safari/534.13 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.8 (KHTML, like Gecko) Chrome/7.0.521.0 Safari/534.8 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1b2pre) Gecko/20081015 Fennec/1.0a1 Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Woningstichting Den Helder; .NET CLR 1.0.3705) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.27 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.458.1 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.596.0 Safari/534.13 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.0.3705; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.42 Safari/530.5 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.792.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.20 (KHTML, like Gecko) Chrome/11.0.672.2 Safari/534.20 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.21 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.215 Safari/534.10 Mozilla/5.0 (Windows; Windows; U; Windows NT 5.1; Windows CE 5.2; rv:1.8.1.4pre) Gecko/20070327 Minimo/0.020 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7ad-imcjapan-syosyaman-xkgi3lqg03!wgz Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.43 Safari/525.19 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0) Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt) Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b8) Gecko/20101221 Firefox/4.0b8 Fennec/4.0b3 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.2 (KHTML, like Gecko) Chrome/6.0.454.0 Safari/534.2 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.2 Safari/532.0 Mozilla/6.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.27 Safari/532.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1) Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0; .NET CLR 1.0.3705) Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.815.0 Safari/535.1 Mozilla/4.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.59 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.213.0 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.0 Safari/534.13 Mozilla/4.8 [en] (Windows NT 5.1; U) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.464.0 Safari/534.3 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1468.0 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.3 (KHTML, like Gecko) Chrome/5.0.354.0 Safari/533.3 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.60 Safari/537.17 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.65 Safari/534.24 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506; Tablet PC 2.0; Lunascape 5.0 alpha2) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.18 (KHTML, like Gecko) Chrome/11.0.661.0 Safari/534.18 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.5 Safari/532.1 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; zh-cn) Opera 8.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.3 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.8b) Gecko/20050118 Firefox/1.0+ Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.55 Safari/525.19 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.27 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; de-DE; rv:1.7.5) Gecko/20041107 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.173.0 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/10.0.602.0 Safari/534.14 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.33 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.197.11 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.53 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.6 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.210.0 Safari/532.0 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.1 (KHTML, like Gecko) Chrome/2.0.164.0 Safari/530.1 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 1.0.3705) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser; Avant Browser; .NET CLR 1.0.3705; .NET CLR 1.1.4322; Media Center PC 4.0; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MyIE2) Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.1) Gecko/20110318 Firefox/4.0b13pre Fennec/4.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5) Gecko/20041107 Firefox/1.0 Mozilla/4.0 (Windows; U; Windows NT 5.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.33 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 GTB5 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.3 (KHTML, like Gecko) Chrome/5.0.355.0 Safari/533.3 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.0 (KHTML, like Gecko) Chrome/3.0.191.0 Safari/531.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.460.0 Safari/534.3 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; BrowserBob) Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.458.1 Safari/534.3 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.307.1 Safari/532.9 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/18.6.872.0 Safari/535.2 UNTRUSTED/1.0 3gpp-gba UNTRUSTED/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.5 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.29 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.461.0 Safari/534.3 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.699.0 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.59 Safari/525.19 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E) Mozilla/5.0 (Windows NT 5.2; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.215 Safari/535.1 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.872.0 Safari/535.2 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.220.1 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.207.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.458.0 Safari/534.3 Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.3 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.20 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.3 (KHTML, like Gecko) Chrome/3.0.193.2 Safari/531.3 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.40607) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.213.1 Safari/532.1 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1); Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322; FDM) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.4) Gecko/20030624 Netscape/7.1 (ax) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2a1pre) Gecko/20090317 Fennec/1.0b1 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; BOLT/2.800) AppleWebKit/534.6 (KHTML, like Gecko) Version/5.0 Safari/534.6.3 Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41 Safari/535.1 Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FDM) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.0 (KHTML, like Gecko) Chrome/2.0.160.0 Safari/530.0 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7) Gecko/20040803 Firefox/0.9.3 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/12.0.702.0 Safari/534.24 Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1464.0 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/9.0.600.0 Safari/534.14 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506; InfoPath.1) Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.26 Safari/537.11 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/528.8 (KHTML, like Gecko) Chrome/2.0.156.1 Safari/528.8 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0) Mozilla/5.0 (Windows; U; Windows NT 6.1; de-DE) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.224 Safari/534.10 Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.27 Safari/532.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; TencentTraveler ) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; DFO-MPO Internet Explorer 6.0) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.6 (KHTML, like Gecko) Chrome/2.0.174.0 Safari/530.6 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.1 Safari/532.0 Mozilla/6.0 (Windows; U; Windows NT 6.0; en-US) Gecko/2009032609 (KHTML, like Gecko) Chrome/2.0.172.6 Safari/530.7 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.999 Safari/533.4 Mozilla/5.0 (Windows; U; Windows NT 5.0; fr-FR; rv:1.7.5) Gecko/20041108 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.23) Gecko/20090825 SeaMonkey/1.1.18 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; WOW64; Trident/4.0; uZardWeb/1.0; Server_USA) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; MyIE2; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.0; rv:1.7.3) Gecko/20040913 Firefox/0.10 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.1.1) Gecko/20110415 Firefox/4.0.2pre Fennec/4.0.1 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.25 (KHTML, like Gecko) Chrome/12.0.704.0 Safari/534.25 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.206.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.6 (KHTML, like Gecko) Chrome/2.0.175.0 Safari/530.6 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.14 (KHTML, like Gecko) Chrome/24.0.1292.0 Safari/537.14 Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0) Mozilla/5.0 (Windows; U; Windows NT 5.0; it-IT; rv:1.7.5) Gecko/20041110 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.173.1 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.8 (KHTML, like Gecko) Chrome/2.0.156.0 Version/3.2.1 Safari/528.8 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.3 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.3 Safari/532.2 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; ENGINE; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT)) Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.151.0 Safari/525.19 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; MyIE2; Maxthon; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1) Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.8 (KHTML, like Gecko) Chrome/17.0.940.0 Safari/535.8 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.458.1 Safari/534.3 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.34 Safari/534.24 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.20 (KHTML, like Gecko) Chrome/11.0.669.0 Safari/534.20 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; BOLT/2.340) AppleWebKit/530+ (KHTML, like Gecko) Version/4.0 Safari/530.17 UNTRUSTED/1.0 3gpp-gba Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0; by TSG) Mozilla/5.0 (Windows; U; Windows NT 5.1; ja-JP; rv:1.7) Gecko/20040803 Firefox/0.9.3 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.9 (KHTML, like Gecko) Chrome/6.0.400.0 Safari/533.9 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.2 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.8 (KHTML, like Gecko) Chrome/2.0.177.0 Safari/530.8 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.204.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.36 Safari/535.7 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.10 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.1 (KHTML, like Gecko) Chrome/2.0.170.0 Safari/530.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.107 Safari/535.1 Mozilla/5.0 (Windows NT 6.1; en-US) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.750.0 Safari/534.30 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.1.249.1025 Safari/532.5 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.196.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.17 (KHTML, like Gecko) Chrome/10.0.649.0 Safari/534.17 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.4 (KHTML, like Gecko) Chrome/4.0.241.0 Safari/532.4 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.17 Safari/532.0 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MAGW; .NET4.0C; Lunascape 6.5.8.24780) Mozilla/6.0 (Windows; U; Windows NT 6.0; en-US) Gecko/2009032609 Chrome/2.0.172.6 Safari/530.7 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.0 (KHTML, like Gecko) Chrome/2.0.162.0 Safari/530.0 Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+ Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.4 Safari/532.0 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.3 Safari/534.24 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; ESB{F40811EE-DF17-4BC9-8785-B362ABF34098}; .NET CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; Lunascape 5.0 alpha2) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.20 (KHTML, like Gecko) Chrome/11.0.672.2 Safari/534.20 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/531.3 (KHTML, like Gecko) Chrome/3.0.193.0 Safari/531.3 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2a1pre) Gecko/20081222 Fennec/1.0a2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.8 (KHTML, like Gecko) Chrome/2.0.156.1 Safari/528.8 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.13 (KHTML, like Gecko) Chrome/24.0.1290.1 Safari/537.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.246.0 Safari/532.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.459.0 Safari/534.3 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.174.0 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.43 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 6.1; ru-RU; AppleWebKit/534.16; KHTML; like Gecko; Chrome/10.0.648.11;Safari/534.16) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.5 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; NOKTURNAL KICKS ASS) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.6 (KHTML, like Gecko) Chrome/2.0.174.0 Safari/530.6 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.6 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.206.1 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/530.4 (KHTML, like Gecko) Chrome/2.0.172.0 Safari/530.4 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.498.0 Safari/534.6 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.0 Safari/532.2 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.860.0 Safari/535.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.53 Safari/525.19 Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0) Mozilla/5.0 (Windows; U; Windows NT 6.1; de-DE) AppleWebKit/534.17 (KHTML, like Gecko) Chrome/10.0.649.0 Safari/534.17 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.40607; .NET CLR 1.0.3705) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.134 Safari/534.16 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.12 Safari/532.2 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.43 Safari/525.19 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.41115) Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.6 (KHTML, like Gecko) Chrome/16.0.897.0 Safari/535.6 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.43 Safari/530.5 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/5.0) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML,like Gecko) Chrome/3.0.195.27 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; WOW64; Trident/4.0; uZardWeb/1.0; Server_KO_KTF) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.310.0 Safari/532.9 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.1 (KHTML, like Gecko) Maxthon/3.0.8.2 Safari/533.1 Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0) Mozilla/5.0 (Windows; U; Windows NT 5.0; ja-JP; m18) Gecko/20010131 Netscape6/6.01 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.4 Safari/532.0 Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.15) Gecko/20101027 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/7.0.540.0 Safari/534.10 Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.53 Safari/534.30 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; MyIE2; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.30 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.152.0 Safari/525.19 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.2; WOW64; Trident/5.0) Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Maxthon; .NET CLR 1.1.4322; .NET CLR 2.0.41115) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; i-NavFourF; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/528.10 (KHTML, like Gecko) Chrome/2.0.157.2 Safari/528.10 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.17 (KHTML, like Gecko) Chrome/11.0.654.0 Safari/534.17 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.113 Safari/534.30 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.206.1 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20041001 Firefox/0.10.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.55 Safari/534.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/533.16 (KHTML, like Gecko) Chrome/5.0.335.0 Safari/533.16 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; zh-cn) Opera 8.0 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.20 Safari/535.1 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.3 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.206.1 Safari/532.0 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.4 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.40 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/7.0.540.0 Safari/534.10 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.10 (KHTML, like Gecko) Chrome/2.0.157.0 Safari/528.10 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.2 Safari/532.0 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.20 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; de) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.39 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.202.0 Safari/532.0 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.0) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.43 Safari/525.19 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.813.0 Safari/535.1 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3 Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6 Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2a1pre) Gecko/20090317 Fennec/1.0b1 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.2; Trident/5.0) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; en) Opera 8.00 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.0 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/4.0.202.0 Safari/525.13. Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.3 Safari/532.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; MathPlayer 2.0; .NET CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.3 (KHTML, like Gecko) Chrome/4.0.223.5 Safari/532.3 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7) Gecko/20040616 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.213.0 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/531.3 (KHTML, like Gecko) Chrome/3.0.193.2 Safari/531.3 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; i-Nav 3.0.1.0F; .NET CLR 1.0.3705; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 6.1; rv:2.1.1) Gecko/20110415 Firefox/4.0.2pre Fennec/4.0.1 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.6 Safari/537.11 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.17 Safari/532.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; fr-FR; rv:1.7.5) Gecko/20041108 Firefox/1.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.1 Safari/533.2 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.8b) Gecko/20050212 Firefox/1.0+ (MOOX M3) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.215 Safari/534.10 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.45 Safari/535.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10 Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.13 (KHTML, like Gecko) Chrome/24.0.1284.0 Safari/537.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.202.0 Safari/532.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; {FF0C8E09-3C86-44CB-834A-B8CEEC80A1D7}; iOpus-I-M) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.2 (KHTML, like Gecko) Chrome/6.0.454.0 Safari/534.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.6 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.2 Safari/532.2 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.861.0 Safari/535.2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.3 (KHTML, like Gecko) Chrome/5.0.353.0 Safari/533.3 Mozilla/5.0 (Windows U Windows NT 5.1 en-US) AppleWebKit/534.12 (KHTML, like Gecko) Chrome/9.0.583.0 Safari/534.12 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.197.0 Safari/532.0 Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.17 (KHTML, like Gecko) Chrome/11.0.655.0 Safari/534.17 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.0 (KHTML, like Gecko) Chrome/2.0.182.0 Safari/531.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Q312461; FunWebProducts; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 5.2) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.112 Safari/534.30 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.198.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13(KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.4 (KHTML, like Gecko) Chrome/0.3.155.0 Safari/528.4 Mozilla/5.0 (Windows; U; Windows NT 5.2; rv:1.7.3) Gecko/20041001 Firefox/0.10.1 Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.13 (KHTML, like Gecko) Chrome/24.0.1290.1 Safari/537.13 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.173.1 Safari/530.5 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; winfx; .NET CLR 1.1.4322; .NET CLR 2.0.50727; Zune 2.0) Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1623.0 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.1 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.213.1 Safari/532.1 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0) Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.12 Safari/534.24 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.815.10913 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.198 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.0 Safari/534.13 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.24 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1b2pre) Gecko/20081015 Fennec/1.0a1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.3.155.0 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.3 Safari/532.1 Mozilla/5.0 (Windows NT 5.2; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 SeaMonkey/2.7.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.11 (KHTML, like Gecko) Chrome/2.0.157.0 Safari/528.11 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.50 Safari/525.19 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7xs5D9rRDFpg2g Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.126 Safari/533.4 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.33 Safari/530.5 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FunWebProducts; .NET CLR 1.1.4322; .NET CLR 2.0.40607) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.2 Safari/530.5 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.107 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/528.11 (KHTML, like Gecko) Chrome/2.0.157.0 Safari/528.11 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; es-ES; rv:1.7.5) Gecko/20041210 Firefox/1.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110622 Firefox/6.0a2 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.12 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.197.11 Safari/532.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; zh-cn) Opera 8.50 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727) Mozilla/5.0 (Windows NT 6.0) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.100 Safari/534.30 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.3 (KHTML, like Gecko) Chrome/5.0.357.0 Safari/533.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.223.1 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.4 Safari/532.0 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.43 Safari/534.24 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.17 Safari/537.36 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.8 (KHTML, like Gecko) Beamrise/17.2.0.9 Chrome/17.0.939.0 Safari/535.8 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.813.0 Safari/535.1 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FunWebProducts; AtHome033) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0;) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.53 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/10.0.601.0 Safari/534.14 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.638.0 Safari/534.16 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30618; Lunascape 4.7.3) Mozilla/5.0 (Windows; U; Windows NT 5.1; ja-JP; rv:1.6) Gecko/20040206 Firefox/0.8 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.7.5) Gecko/20041107 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.196.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/528.8 (KHTML, like Gecko) Chrome/2.0.156.0 Safari/528.8 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; zh-cn) Opera 8.01 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.151 Safari/534.16 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.120 Safari/535.2 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.19 Safari/534.13 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Alexa Toolbar) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.30 Safari/525.13 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.814.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.46 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/7.0.540.0 Safari/534.10 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30 ChromePlus/1.6.3.1 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FDM; Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.213.1 Safari/532.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.153.1 Safari/525.19 Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.33 Safari/534.3 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.27 (KHTML, like Gecko) Chrome/12.0.712.0 Safari/534.27 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.206.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.3 Safari/532.1 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.1 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.27 Safari/532.0 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; WOW64; Trident/4.0; uZard/1.0; Server_KO_SKT) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.0 (KHTML, like Gecko) Chrome/3.0.191.0 Safari/531.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.201.1 Safari/532.0 Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; ARM; Trident/6.0) Mozilla/5.0 (Windows NT 6.2) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11 Mozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.153.0 Safari/525.19 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.809.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 6.1) AppleWebKit/526.3 (KHTML, like Gecko) Chrome/14.0.564.21 Safari/526.3 Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.6 Safari/525.13 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.0.3705; .NET CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.3.154.9 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.8 (KHTML, like Gecko) Chrome/2.0.178.0 Safari/530.8 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; Sleipnir/2.9.8) Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.2a1pre) Gecko/20110331 Firefox/4.2a1pre Fennec/4.1a1pre Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 2.0.40607) Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.208.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.68 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.39 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.222.12 Safari/532.2 Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; InfoPath.3) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.3 (KHTML, like Gecko) Chrome/4.0.224.2 Safari/532.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.201.0 Safari/532.0 Mozilla/5.0 (Windows NT 5.1; rv:2.1) Gecko/20110318 Firefox/4.0b13pre Fennec/4.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FTDv3 Browser; .NET CLR 1.0.3705; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 5.2) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.792.0 Safari/535.1 Mozilla/5.0 (Windows NT 6.1; rv:2.1) Gecko/20110318 Firefox/4.0b13pre Fennec/4.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/6.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/527 (KHTML, like Gecko, Safari/419.3) Arora/0.6 (Change: ) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.1 (KHTML, like Gecko) Chrome/6.0.428.0 Safari/534.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.206.1 Safari/532.0 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.17 Safari/537.11 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.558.0 Safari/534.10 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser) Mozilla/5.0 (Windows; U; Windows NT 5.1; tr; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 ( .NET CLR 3.5.30729; .NET4.0E) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.8 (KHTML, like Gecko) Chrome/4.0.288.1 Safari/532.8 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.43 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.59 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.3 Safari/533.2 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 1.0.3705) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.152.0 Safari/525.19 Mozilla/5.0 (Windows NT 5.1; rv:2.0b6pre) Gecko/20100902 Firefox/4.0b6pre Fennec/2.0b1pre Mozilla/5.0 (Windows; U; Windows NT 5.2; eu) AppleWebKit/530.4 (KHTML, like Gecko) Chrome/2.0.172.0 Safari/530.4 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.196.2 Safari/532.0 Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.10 Safari/532.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.0.3705; .NET CLR 1.1.4322) Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; EasyBits GO v1.0; InfoPath.1; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; MyIE2; Maxthon; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.5 Safari/533.2 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; WOW64; SV1; uZardWeb/1.0; Server_CN) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.29 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.197.11 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.3 (KHTML, like Gecko) Chrome/8.0.552.224 Safari/533.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.209.0 Safari/532.0 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0) Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World) Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; Tablet PC 2.0; .NET4.0E) Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.810.0 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.43 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Maxthon; .NET CLR 1.1.4322) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.20 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.3 (KHTML, like Gecko) Chrome/5.0.356.0 Safari/533.3 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.7 (KHTML, like Gecko) Chrome/2.0.176.0 Safari/530.7 Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0 ) Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.0 Safari/534.13 Mozilla/5.0 (Windows; U; Windows NT 6.1; it-IT) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.25 Safari/532.5 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.53 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.7 (KHTML, like Gecko) Chrome/2.0.177.0 Safari/530.7 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.212.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.7 (KHTML, like Gecko) Chrome/2.0.175.0 Safari/530.7 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.151.0 Safari/525.19 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0) Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.700.3 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.6) Gecko/20040113 Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20120403211507 Firefox/12.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.207.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; ) AppleWebKit/534.12 (KHTML, like Gecko) Maxthon/3.0 Safari/534.12 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; Maxthon; .NET CLR 1.1.4322) Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.699.0 Safari/534.24 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.0 (KHTML, like Gecko) Chrome/2.0.182.0 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/530.4 (KHTML, like Gecko) Chrome/2.0.172.0 Safari/530.4 Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.7.5) Gecko/20041110 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 5.0; de-DE; rv:1.7.5) Gecko/20041122 Firefox/1.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.212.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.0 Safari/530.5 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.21 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.203.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.2.151.0 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.8 Safari/530.5 Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0) Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/9.0.601.0 Safari/534.14 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/0.4.154.18 Safari/525.19 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.2) Gecko/20040804 Netscape/7.2 (ax) Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/528.8 (KHTML, like Gecko) Chrome/2.0.156.1 Safari/528.8 Mozilla/5.0 (Windows; U; Windows NT 6.0 (x86_64); de-DE) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.202.2 Safari/532.0 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.514.0 Safari/534.7 Mozilla/5.0 (Windows NT 5.2; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.8 (KHTML, like Gecko) Chrome/6.0.397.0 Safari/533.8 Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; iebar; .NET CLR 1.0.3705) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.198.0 Safari/532.0 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1 Mozilla/5.0 (Windows; U; Windows NT 5.1; de-DE; rv:1.7.5) Gecko/20041108 Firefox/1.0 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE) Mozilla/5.0 (Windows; U; Windows NT 5.0; ja-JP; rv:1.5) Gecko/20031007 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2a1pre) Gecko/20081222 Fennec/1.0a2 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.6 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 5.1; ja-JP; rv:0.9.4.1) Gecko/20020508 Netscape6/6.2.3 Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; WOW64; SV1; uZardWeb/1.0; Server_EN) Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.99 Safari/533.4 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.48 Safari/525.19 Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.2 Safari/537.36 Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; MyIE2) Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1 Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.812.0 Safari/535.1 Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.25 (KHTML, like Gecko) Chrome/12.0.706.0 Safari/534.25 Mozilla/5.0 (Windows; U; Windows NT 5.1; ja-JP; rv:1.4) Gecko/20030624 Netscape/7.1 (ax) Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.634.0 Safari/534.16 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5) Gecko/20041107 Firefox/1.0 StumbleUpon/1.999 Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/532.2 Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/10.0.601.0 Safari/534.14 Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.134 Safari/534.163、每次返回一个user-agent。这个我直接上代码： import random def get_one_user_agent(): with open(&apos;./user_agent_all_ok.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;) as file: ret = file.readlines() user_agent_list = [i.strip() for i in ret] one_user_agent = random.choice(user_agent_list) return one_user_agent if __name__ == &apos;__main__&apos;: one_user_agent = get_one_user_agent() print(one_user_agent)4、如果只是需要uset-agent,到第三步就可以了。但是我想做成像别人导入模块那样使用，后来做成这样的效果，很开心。 import user_agent_myself user_agent = user_agent_myself.get_one_user_agent() print(user_agent)下面是输出结果： 在这里插入图片描述 具体实现导入步骤，可以参考我整理的另一个博客：https://blog.csdn.net/weixin_42081389/article/details/90290493","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"},{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"pytube.exceptions.RegexMatchError_ regex pattern (_W[_'_]_t[_'_]__ _[_'_](.+_)[_'_]) had zero matc问题","slug":"bcd9724e71d8d468a2014155c2e67877","date":"2019-04-28T03:34:32.000Z","updated":"2019-12-02T07:00:36.566Z","comments":true,"path":"2019/04/28/bcd9724e71d8d468a2014155c2e67877/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/28/bcd9724e71d8d468a2014155c2e67877/","excerpt":"","text":"之前能用的代码爬取YouTube视频，突然pytube模块不能用了，很惊奇，就用Google搜了一下：最终找到可解决方案： 参考搜索解决问题网址：https://github.com/nficano/pytube/issues/381 意思就是需要找到报错的extract.py文件，将下面几句注释就可以了。extract.py文件路径：Python36是我的安装python软件路径。 Python36\\site-packages\\pytube\\extract.py 在这里插入图片描述 主要参考解决方法： 在这里插入图片描述 谷歌自带翻译一下： 在这里插入图片描述 至此问题解决。可以爬取YouTube视频了。","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"爬虫之1--响应编码发爬","slug":"84984a0194f58e33f2e0e0c45c881c80","date":"2019-04-28T03:34:32.000Z","updated":"2019-12-02T06:45:49.310Z","comments":true,"path":"2019/04/28/84984a0194f58e33f2e0e0c45c881c80/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/28/84984a0194f58e33f2e0e0c45c881c80/","excerpt":"","text":"本次分析爬虫中的寻找响应乱码，找到正确编码格式的俩种方法： 方法1、浏览器查找charset编码加密，一般响应之后进行解码即可，但是除了单个字体js加密的除外，那种需要其他方法。一般编码格式有utf-8、gbk、gb2312，如果preview和response的内容一直，则编码就是utf-8. 如下加密情况，可以看出不是utf-8的编码格式，需要进行对应的解码： 在这里插入图片描述 在这里插入图片描述 然而响应的内容却是正常的，从文中找到charset，所以我觉得就是gb2312的编码格式，尝试结果就是。所以这就给我提供一个思路，如果在遇到响应乱码时，可以再浏览器中搜索charset，进行尝试。 方法2：使用chardet模块大多数情况下是可以适用的，也会存在一定的识别错误情况。 安装：pip install chardet 具体代码中的简单使用： import chardet url = &quot;http://2019.ip138.com/ic.asp&quot; headers = { &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&apos; } resp = requests.get(url=url, headers=headers, timeout=2) cs = chardet.detect(resp.content) print(&quot;cs的类型：{0}&quot;.format(type(cs))) print(&quot;监测到的cs数据：{0}&quot;.format(cs))输出结果：cs的类型：&lt;class ‘dict’&gt;监测到的cs数据：{‘encoding’: ‘GB2312’, ‘confidence’: 0.99, ‘language’: ‘Chinese’}encoding对应的值就是编码格式。confidence对应的值时识别正确率。","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"短网址生成api使用教程","slug":"b1b4ac29f1119ec18f0167464308a00a","date":"2019-04-22T03:34:32.000Z","updated":"2019-12-02T07:00:37.097Z","comments":true,"path":"2019/04/22/b1b4ac29f1119ec18f0167464308a00a/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/22/b1b4ac29f1119ec18f0167464308a00a/","excerpt":"","text":"目前，国内网又很多提供短地址服务的平台，例如：第三个网址我没有找到api接口，有人找到了可以告诉我一下哈，第四个需要微信登陆，由于不是特别了解这个网站的安全性，故没有登陆测试。目前前俩个转换的短连接地址都是长期有效的，如果失效会网站通知的。 1、新浪：http://sina.lt/2、百度：http://dwz.cn/3、0x3：http://0x3.me/4、MRW：http://mrw.so/5、https://www.shorturl.at/ 1、新浪api使用如果单转一个，也可以使用网页版： http://sina.lt/ 下面是api使用，如果需要批量处理长地址转换可以代码使用。 http://api.t.sina.com.cn/short_url/shorten.json?source=3271760578&amp;url_long=此处替换成你要缩短的网址 使用方法就是将上面中文换成你想转换的长地址，比如我想换：https://blog.csdn.net/weixin_42081389/article/details/89381735 把下面这行直接复制到浏览器：http://api.t.sina.com.cn/short_url/shorten.json?source=3271760578&amp;url_long=https://blog.csdn.net/weixin_42081389/article/details/89381735 出现以下一个json格式的结果：”url_short”后面就是成功的短网址，复制到浏览器可以查看。结果是一样的。[{“url_short”:”http://t.cn/EafsGzA&quot;,&quot;url_long&quot;:&quot;https://blog.csdn.net/weixin_42081389/article/details/89381735&quot;,&quot;type&quot;:0}] 在这里插入图片描述 注意：如果你想转换的url地址如果含有？后面有数字，比如https://blog.csdn.net/weixin_42081389/article/details/89381735?key=good&amp;kw=hello http://api.t.sina.com.cn/short_url/shorten.json?source=3271760578&amp;url_long=https://blog.csdn.net/weixin_42081389/article/details/89381735?key=good&amp;kw=hello转换之后响应结果为：[{“url_short”:”http://t.cn/EaI7l1d&quot;,&quot;url_long&quot;:&quot;https://blog.csdn.net/weixin_42081389/article/details/89381735?key=good&quot;,&quot;type&quot;:0}]观察发现你想转换的地址“&amp;kw=hello”不见了，所以这时候需要先将地址进行url编码，再进行转换。url在线编码https://tool.chinaz.com/tools/urlencode.aspx 在这里插入图片描述 在这里插入图片描述 得到编码后的url：https%3a%2f%2fblog.csdn.net%2fweixin_42081389%2farticle%2fdetails%2f89381735%3fkey%3dgood%26kw%3dhello http://api.t.sina.com.cn/short_url/shorten.json?source=3271760578&amp;url_long=https%3a%2f%2fblog.csdn.net%2fweixin_42081389%2farticle%2fdetails%2f89381735%3fkey%3dgood%26kw%3dhello 然后响应结果为：[{“url_short”:”http://t.cn/EaIASvI&quot;,&quot;url_long&quot;:&quot;https://blog.csdn.net/weixin_42081389/article/details/89381735?key=good&amp;kw=hello&quot;,&quot;type&quot;:0}]这时候就满足自己想要的结果了。 **2、百度和新浪的python 实现api接口代码：注意： ‘Token’: ‘这个要自己登陆之后可以获取’**https://dwz.cn/进入网址之后登陆自己百度账号，点击token既可以获取token。 在这里插入图片描述 import json import requests import urllib def baidu(url_long): # 百度api接口 url = &apos;https://dwz.cn/admin/v2/create&apos; # TODO：设置待创建的长网址 bodys = { &apos;url&apos;: url_long } # 配置headers headers = { &apos;Content-Type&apos;: &apos;application/json&apos;, &apos;Token&apos;: &apos;自己登陆之后可以获取&apos; } # 发起请求 # response = requests.post(url=url, data=json.dumps(bodys), headers=headers) response = requests.post(url=url, json=bodys, headers=headers) data=json.dumps(bodys) # print(data,type(data)) # 读取响应 # print(response.text) url_data = json.loads(response.text) # print(url_data[&apos;ShortUrl&apos;]) return url_data[&apos;ShortUrl&apos;] def xinlang(url_long): # 新浪需要转换一下，不至于get方式的参数传递会少 url1 = urllib.parse.quote(url_long) print(url1) url = &apos;http://api.t.sina.com.cn/short_url/shorten.json?source=3271760578&amp;url_long=&apos; + url1 resp = requests.get(url=url) print(resp.text) data_short = json.loads(resp.text) return data_short[0][&apos;url_short&apos;] if __name__ == &apos;__main__&apos;: url_long = &apos;https://blog.csdn.net/weixin_42081389/article/details/89381735?key=good&amp;kw=hello&apos; ShortUrl = baidu(url_long) print(&apos;baidu&apos;,ShortUrl) url_short = xinlang(url_long) print(&apos;xinlang&apos;,url_short)","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"selenium.common.exceptions.StaleElementReferenceException_ Message_ stale element reference_ element","slug":"b84b7a7d9aa655400659bfc885492d77","date":"2019-04-18T03:34:32.000Z","updated":"2019-12-02T07:00:36.684Z","comments":true,"path":"2019/04/18/b84b7a7d9aa655400659bfc885492d77/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/18/b84b7a7d9aa655400659bfc885492d77/","excerpt":"","text":"# 1、说明：当我使用selenium爬虫训练获得的列表时，中间报了这个错误，感觉很纳闷，没有问题怎么会出异常呐，所以就百度了一下，找到了一个对我这种情况的方法：最后找到原因就是如果循环使用自己之前定位的元素发生变化，至于为什么，我也不太懂。 在这里插入图片描述","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"python 之使用selenium滑动页面下拉方式","slug":"a0f8e251c5c7d260f80b55e7c5f15673","date":"2019-04-18T03:34:32.000Z","updated":"2019-12-02T07:00:37.050Z","comments":true,"path":"2019/04/18/a0f8e251c5c7d260f80b55e7c5f15673/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/18/a0f8e251c5c7d260f80b55e7c5f15673/","excerpt":"","text":"# 若要对页面中的内嵌窗口中的多个滚动条进行操作，要先定位到该内嵌窗口，在进行滚动条操作使用这个方法：（其中，scall是这个div的class的名字，如过就一个这种div，直接中括号后面用0就可以，如果多个滑动div的class的name一样，需要先找找你需要下拉的div是第几个，如果是第三个，把下面[0],改为[2]） js=&apos;document.getElementsByClassName(&quot;scroll&quot;)[0].scrollTop=10000&apos; # 就是这么简单，修改这个元素的scrollTop就可以 driver.execute_script(js)也可以使用 js=&quot;var q=document.getElementById(&apos;id&apos;).scrollTop=100000&quot; driver.execute_script(js) time.sleep(3) 在这里插入图片描述 图上是js的获得元素的方法都可以使用，比如div的name，tagname JavaScript学习链接 http://www.runoob.com/jsref/dom-obj-document.html如果滑动整个大的页面到底部方法1、 driver.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;)方法2、 #将滚动条移动到页面的底部 js=&quot;var q=document.documentElement.scrollTop=100000&quot; driver.execute_script(js) time.sleep(3) 将滚动条移动到页面的顶部js=&quot;var q=document.documentElement.scrollTop=0&quot; driver.execute_script(js) time.sleep(3)","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"}]},{"title":"windows安装MySQL","slug":"18b88a12e31488c53cc9e3ee4ad039ae","date":"2019-04-15T03:34:32.000Z","updated":"2019-12-02T06:45:47.989Z","comments":true,"path":"2019/04/15/18b88a12e31488c53cc9e3ee4ad039ae/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/15/18b88a12e31488c53cc9e3ee4ad039ae/","excerpt":"","text":"参考：https://blog.csdn.net/wdx1121/article/details/79523254https://blog.csdn.net/zhangjing1019/article/details/80362188 1、下载MySQL打开 https://www.mysql.com/ 官网点击downloads 在这里插入图片描述 加载完成，滑到底部，点击Community (GPL) Downloads » 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 一次点击之后，下载下面这个大的软件。 在这里插入图片描述 二、安装参考上面的。https://blog.csdn.net/wdx1121/article/details/79523254","categories":[{"name":"windows安装MySQL","slug":"windows安装MySQL","permalink":"https://zhaojiafu.github.io/categories/windows%E5%AE%89%E8%A3%85MySQL/"}],"tags":[{"name":"windows安装MySQL","slug":"windows安装MySQL","permalink":"https://zhaojiafu.github.io/tags/windows%E5%AE%89%E8%A3%85MySQL/"}]},{"title":"scikit-learn 关于svm进行人脸识别使用报错的问题","slug":"06b384cda368c2fc7e95c3ef2be8b33e","date":"2019-04-09T03:34:32.000Z","updated":"2019-12-02T07:40:53.057Z","comments":true,"path":"2019/04/09/06b384cda368c2fc7e95c3ef2be8b33e/","link":"","permalink":"https://zhaojiafu.github.io/2019/04/09/06b384cda368c2fc7e95c3ef2be8b33e/","excerpt":"","text":"# 问题1、ModuleNotFoundError: No module named ‘sklearn.cross_validation’ 这个错是导入 from sklearn.cross_validation import train_test_split报的错。主要是因为这个模块有更改，将这一句改为下面即可： from sklearn.model_selection import train_test_split问题2、ModuleNotFoundError: No module named ‘sklearn.grid_search’这个是由于导入 from sklearn.grid_search import GridSearchCV报的错，需要将此句改为： from sklearn.model_selection import GridSearchCV问题3、ImportError: cannot import name ‘RandomizedPCA’需要将此句改为下面这句即可： from sklearn.decomposition import PCA as RandomizedPCA问题4、ValueError: min_faces_per_person=70 is too restrictive 这个是因为有数据没有下载完整而报的错误，下载到的目录（我的是window系统，在）下载好复制到这个目录就行，必须先将lfw_home目录下所有内容删除，再运行即可。 C:\\Users\\自己的用户名字\\scikit_learn_data\\lfw_home可以手动下载下面这几个，将不完整的删除。https://ndownloader.figshare.com/files/5976018 #lfw.tgzhttps://ndownloader.figshare.com/files/5976015 #lfw-funneled.tgzhttps://ndownloader.figshare.com/files/5976012 #pairsDevTrain.txthttps://ndownloader.figshare.com/files/5976009 #pairsDevTest.txthttps://ndownloader.figshare.com/files/5976006 #pairs.txt 问题5、ValueError: class_weight must be dict, ‘balanced’, or None, got: ‘auto’ 定位到是这一句： clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=&apos;auto&apos;), param_grid)意思是需要的需要是个字典，字典必须是 ‘balanced’, or None，却得到了‘auto’，所以需要改为： clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=&apos;balanced&apos;), param_grid)或者 clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=None), param_grid)到此结束了。 问题6、FutureWarning: You should specify a value for ‘cv’ instead of relying on the default value. The default value will change from 3 to 5 in version 0.22. warnings.warn(CV_WARNING, FutureWarning) 能够运行，但是却有这个警告，The default value will change from 3 to 5 in version 0.22.这个意思默认cv改为3至5，经过测试，cv为3，4，5都可以。 clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=&apos;balanced&apos;), param_grid)这一句，加个参数即可， clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=&apos;balanced&apos;), param_grid,cv=4)下面是默认的cv=’warn’. {% image /imgs/20190409101355250.png '在这里插入图片描述' '' %} 完整代码：官方完整代码：https://scikit-learn.org/stable/auto_examples/applications/plot_face_recognition.html#sphx-glr-auto-examples-applications-plot-face-recognition-py from __future__ import print_function from time import time import logging import matplotlib.pyplot as plt # from sklearn.cross_validation import train_test_split from sklearn.model_selection import train_test_split from sklearn.datasets import fetch_lfw_people # from sklearn.grid_search import GridSearchCV from sklearn.model_selection import GridSearchCV from sklearn.metrics import classification_report from sklearn.metrics import confusion_matrix # from sklearn.decomposition import RandomizedPCA from sklearn.decomposition import PCA as RandomizedPCA from sklearn.svm import SVC print(__doc__) # Display progress logs on stdout logging.basicConfig(level=logging.INFO, format=&apos;%(asctime)s %(message)s&apos;) ############################################################################### # Download the data, if not already on disk and load it as numpy arrays lfw_people = fetch_lfw_people(min_faces_per_person=70, resize=0.4) # introspect the images arrays to find the shapes (for plotting) n_samples, h, w = lfw_people.images.shape # for machine learning we use the 2 data directly (as relative pixel # positions info is ignored by this model) X = lfw_people.data n_features = X.shape[1] # the label to predict is the id of the person y = lfw_people.target target_names = lfw_people.target_names n_classes = target_names.shape[0] print(&quot;Total dataset size:&quot;) print(&quot;n_samples: %d&quot; % n_samples) print(&quot;n_features: %d&quot; % n_features) print(&quot;n_classes: %d&quot; % n_classes) ############################################################################### # Split into a training set and a test set using a stratified k fold # split into a training and testing set X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.25) ############################################################################### # Compute a PCA (eigenfaces) on the face dataset (treated as unlabeled # dataset): unsupervised feature extraction / dimensionality reduction n_components = 150 print(&quot;Extracting the top %d eigenfaces from %d faces&quot; % (n_components, X_train.shape[0])) t0 = time() pca = RandomizedPCA(n_components=n_components, whiten=True).fit(X_train) print(&quot;done in %0.3fs&quot; % (time() - t0)) eigenfaces = pca.components_.reshape((n_components, h, w)) print(&quot;Projecting the input data on the eigenfaces orthonormal basis&quot;) t0 = time() X_train_pca = pca.transform(X_train) X_test_pca = pca.transform(X_test) print(&quot;done in %0.3fs&quot; % (time() - t0)) ############################################################################### # Train a SVM classification model print(&quot;Fitting the classifier to the training set&quot;) t0 = time() param_grid = {&apos;C&apos;: [1e3, 5e3, 1e4, 5e4, 1e5], &apos;gamma&apos;: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], } # clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=&apos;auto&apos;), param_grid) clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=&apos;balanced&apos;), param_grid) clf = GridSearchCV(SVC(kernel=&apos;rbf&apos;, class_weight=None), param_grid) clf = clf.fit(X_train_pca, y_train) print(&quot;done in %0.3fs&quot; % (time() - t0)) print(&quot;Best estimator found by grid search:&quot;) print(clf.best_estimator_) ############################################################################### # Quantitative evaluation of the model quality on the test set print(&quot;Predicting people&apos;s names on the test set&quot;) t0 = time() y_pred = clf.predict(X_test_pca) print(&quot;done in %0.3fs&quot; % (time() - t0)) print(classification_report(y_test, y_pred, target_names=target_names)) print(confusion_matrix(y_test, y_pred, labels=range(n_classes))) ############################################################################### # Qualitative evaluation of the predictions using matplotlib def plot_gallery(images, titles, h, w, n_row=3, n_col=4): &quot;&quot;&quot;Helper function to plot a gallery of portraits&quot;&quot;&quot; plt.figure(figsize=(1.8 * n_col, 2.4 * n_row)) plt.subplots_adjust(bottom=0, left=.01, right=.99, top=.90, hspace=.35) for i in range(n_row * n_col): plt.subplot(n_row, n_col, i + 1) plt.imshow(images[i].reshape((h, w)), cmap=plt.cm.gray) plt.title(titles[i], size=12) plt.xticks(()) plt.yticks(()) # plot the result of the prediction on a portion of the test set def title(y_pred, y_test, target_names, i): pred_name = target_names[y_pred[i]].rsplit(&apos; &apos;, 1)[-1] true_name = target_names[y_test[i]].rsplit(&apos; &apos;, 1)[-1] return r&apos;predicted: %s\\ntrue: %s&apos; % (pred_name, true_name) prediction_titles = [title(y_pred, y_test, target_names, i) for i in range(y_pred.shape[0])] plot_gallery(X_test, prediction_titles, h, w) # plot the gallery of the most significative eigenfaces eigenface_titles = [&quot;eigenface %d&quot; % i for i in range(eigenfaces.shape[0])] plot_gallery(eigenfaces, eigenface_titles, h, w) plt.show()","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"},{"name":"scikit_learn","slug":"python模块/scikit-learn","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/scikit-learn/"}],"tags":[{"name":"scikit_learn","slug":"scikit-learn","permalink":"https://zhaojiafu.github.io/tags/scikit-learn/"}]},{"title":"Linux 一个目录下对文件批量重命名","slug":"8969134a197b60df2a0bf6c28be1d3b1","date":"2019-03-29T03:34:32.000Z","updated":"2019-12-02T06:45:49.981Z","comments":true,"path":"2019/03/29/8969134a197b60df2a0bf6c28be1d3b1/","link":"","permalink":"https://zhaojiafu.github.io/2019/03/29/8969134a197b60df2a0bf6c28be1d3b1/","excerpt":"","text":"# 1、流程1、流程如下：解压.7z压缩包，解压完之后图片都在dir(自己命名)文件夹下；2、然后执行 ls dir &gt;file_list.txt(文件名自己命名)，将图片名称列表存放到txt文件中；3、然后执行sh form_filename.sh file_list.txt dir 2、sh文件form_filename.sh新建一个文本文档，将下面复制到里面，另存选择所以文件，命名为.sh 结尾就行。然后按流程即可。 在这里插入图片描述 #!/bin/bash file=$1 dir=$2 cat $file | while read line do old_picname=$line new_picname=`echo $old_picname|sed &apos;s/,//g&apos;|sed &apos;s/=//g&apos;|sed &apos;s/&amp;//g&apos;|sed &apos;s/%//g&apos;|sed &apos;s/!//g&apos; \\ |sed &apos;s/(//g&apos; | sed &apos;s/)//g&apos;` echo $new_picname mv ${dir}&quot;/&quot;$old_picname ${dir}&quot;/&quot;$new_picname done","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhaojiafu.github.io/tags/Linux/"}]},{"title":"jupyter 学习之1-修改工作路径","slug":"bbd0d3220fda0db3ed82acc140814302","date":"2019-03-28T03:34:32.000Z","updated":"2019-12-02T07:00:36.998Z","comments":true,"path":"2019/03/28/bbd0d3220fda0db3ed82acc140814302/","link":"","permalink":"https://zhaojiafu.github.io/2019/03/28/bbd0d3220fda0db3ed82acc140814302/","excerpt":"","text":"配置：window10系统python3.6.8版本 安装jupyter安装好pip之后，cmd中直接运行pip install jupyter notebook即可安装 1、进入C:\\Users\\自己的用户名.jupyter 在这里插入图片描述 有一个jupyter_notebook_config文件 用记事本或者pycharm打开。 2、修改工作路径找到这一行： #c.NotebookApp.notebook_dir = &apos;&apos;修改为后面自己的路径。比如我的修改为： c.NotebookApp.notebook_dir = &apos;D:\\\\zjf_workspace\\\\005jupyter-notebook&apos;3、建立jupyter快捷方式进入cmd输入 where jupyter-notebook找到对应的exe文件，将此发送到桌面即可。 4、双击jupyter-notebook快捷方式出现 在这里插入图片描述 将url 复制粘贴到自己浏览器就可以了。 在这里插入图片描述","categories":[{"name":"jupyter","slug":"jupyter","permalink":"https://zhaojiafu.github.io/categories/jupyter/"}],"tags":[{"name":"jupyter","slug":"jupyter","permalink":"https://zhaojiafu.github.io/tags/jupyter/"}]},{"title":"TensorFlow的几个问题","slug":"6fa95cc7ff91011d15c19df9a0ca0c79","date":"2019-03-25T03:34:32.000Z","updated":"2019-12-02T06:45:49.067Z","comments":true,"path":"2019/03/25/6fa95cc7ff91011d15c19df9a0ca0c79/","link":"","permalink":"https://zhaojiafu.github.io/2019/03/25/6fa95cc7ff91011d15c19df9a0ca0c79/","excerpt":"","text":"1、Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2问题错误提醒：2019-03-25 16:33:29.066658: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2第一个问题Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2可以参考：https://blog.csdn.net/hq86937375/article/details/79696023 I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2问题解决：对此问题可以直接在代码中加入： import os os.environ[&apos;TF_CPP_MIN_LOG_LEVEL&apos;] = &apos;2&apos;2、版本警告问题警告提醒：WARNING:tensorflow:From C:\\Users\\wb-zjf497303\\AppData\\Roaming\\Python\\Python36\\site-packages\\tensorflow\\python\\ops\\resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version. Instructions for updating: Colocations handled automatically by placer. 在这里插入图片描述 意思是下一个版本TensorFlow将会将此方法删除： 因此，该方法colocate_with是一个上下文管理器，用于确保您要创建的操作或张量将放置在引用操作所在的同一设备上。但是，您的警告说它将被弃用，并且从现在开始将自动处理。从tensorflow的下一个版本开始，此方法将被删除，因此您必须立即更新代码（将在当前运行）或更晚（当您将tensorflow的版本更新到下一个时，此代码将不再可运行因为该方法将被删除） 解决方法先进行版本卸载在重新安装指定版本的tensorflow我的python是3.6.8：查找版本对应地址：https://www.tensorflow.org/install/source_windows#cpu pip uninstall tensorflow pip install tensorflow==1.11.0问题解决结果中没有了警告： 在这里插入图片描述 3、ImportError: cannot import name ‘ops’错误原内容： Using TensorFlow backend. Traceback (most recent call last): File &quot;D:/zjf_workspace/自己测试用的/005imageai模块/imageai_study/demo_02_photo_search/demo-1.py&quot;, line 1, in &lt;module&gt; from imageai.Detection import ObjectDetection File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\imageai\\Detection\\__init__.py&quot;, line 3, in &lt;module&gt; from imageai.Detection.keras_retinanet.models.resnet import resnet50_retinanet File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\imageai\\Detection\\keras_retinanet\\models\\resnet.py&quot;, line 19, in &lt;module&gt; import keras File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\keras\\__init__.py&quot;, line 3, in &lt;module&gt; from . import utils File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\keras\\utils\\__init__.py&quot;, line 6, in &lt;module&gt; from . import conv_utils File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\keras\\utils\\conv_utils.py&quot;, line 9, in &lt;module&gt; from .. import backend as K File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\keras\\backend\\__init__.py&quot;, line 89, in &lt;module&gt; from .tensorflow_backend import * File &quot;D:\\tools\\Python3.6\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py&quot;, line 6, in &lt;module&gt; from tensorflow.python.framework import ops as tf_ops ImportError: cannot import name &apos;ops&apos;问题我也是找了好久，定位到最终问题是导入下面这个模块的问题， from tensorflow.python.framework import ops as tf_ops最后还是通过Google搜索到，最终解决。意思好像就是tensorflow和keras俩个模块不支持当前的python版本。 我最终找到解决参考连接（好像需要翻墙）：https://stackoverflow.com/questions/51076277/cannot-import-name-ops-python 解决方法： pip install tensorflow --upgrade pip install keras --upgrade4、TensorFlow模块导入出现ImportError: DLL load failed: 找不到指定的模块。当我使用imageai模块的时候给我报错，错误指向TensorFlow，我就很奇怪，然后进行Google搜索，前进加速TensorFlow进行搜索，可以搜到相关的，最后我只写一个import TensorFlow 也会报这个错误，最终确定是python版本和TensorFlow版本的不兼容问题。最后我找了快1个小时最终找到一个版本对应关系，所以我又把我的python3.7换成3.6.8版本的，没有找到和3.7对应版本的TensorFlow，所以和我一样老是升级的强迫症以后注意了，浪费不少精力。 版本对应链接：https://www.tensorflow.org/install/source_windows#cpu 在这里插入图片描述 在这里插入图片描述 安装指定版本命令然后我命令安装对应版本： pip install tensorflow-gpu==1.5.0 pip install tensorflow==1.5如果你的python有对应的，可以先卸载再安装，pip卸载命令： pip uninstall tensorflow pip uninstall tensorflow-gpu","categories":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"https://zhaojiafu.github.io/categories/TensorFlow/"}],"tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"https://zhaojiafu.github.io/tags/TensorFlow/"}]},{"title":"Tesseract-OCR使用报错","slug":"22b1c8578c48cbef3f51bd55adcb0289","date":"2019-03-02T03:34:32.000Z","updated":"2019-12-02T07:40:52.661Z","comments":true,"path":"2019/03/02/22b1c8578c48cbef3f51bd55adcb0289/","link":"","permalink":"https://zhaojiafu.github.io/2019/03/02/22b1c8578c48cbef3f51bd55adcb0289/","excerpt":"","text":"# Tesseract-OCR使用报错具体报错： Error opening data file \\python_study_tools\\Tesseract-OCR\\chi_sim.traineddataPlease make sure the TESSDATA_PREFIX environment variable is set to your “tessdata” directory.Failed loading language ‘chi_sim’Tesseract couldn’t load any languages!Could not initialize tesseract. 解决方法： 一看上面的提示就是路径有问题，windows路径是\\的解决办法，添加TESSDATA_PREFIX的环境变量，设置为安装目录下的tessdata目录如:E:\\study_software\\Tesseract-OCR\\tessdata（注意是不需要加’;’结尾的） 如果还是不行，设置了环境变量可能需要重启下才生效 最快捷的试验方法是，cmd命令行设置环境变量后测试 在这里插入图片描述 在这里插入图片描述 SET TESSDATA_PREFIX=D:\\python_study_tools\\Tesseract-OCR\\tessdata tesseract 123.png 123.txt","categories":[{"name":"Tesseract_OCR","slug":"Tesseract-OCR","permalink":"https://zhaojiafu.github.io/categories/Tesseract-OCR/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"selenium.common.exceptions.WebDriverException_ Message_ 'chromedriver' executable needs to be in PAT","slug":"4bd77ecca883577cf0a237d982884c11","date":"2019-02-28T03:34:32.000Z","updated":"2019-12-02T06:45:49.245Z","comments":true,"path":"2019/02/28/4bd77ecca883577cf0a237d982884c11/","link":"","permalink":"https://zhaojiafu.github.io/2019/02/28/4bd77ecca883577cf0a237d982884c11/","excerpt":"","text":"# selenium使用Chrome时报错：selenium.common.exceptions.WebDriverException: Message: ‘chromedriver’ executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home 1、进入页面https://sites.google.com/a/chromium.org/chromedriver/home 在这里插入图片描述 2、选择合适的Chrome版本下载 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 3、解压下的Chromedriver放到python安装的目录下， 在这里插入图片描述 4、运行测试from selenium import webdriver # 从selenium导入webdriver driver = webdriver.Chrome() # Optional argument, if not specified will search path. driver.get(&apos;https://www.baidu.com&apos;) # 获取百度页面 在这里插入图片描述 可以了，之前测试了好几次，安装其他目录加到环境变量还是不行，后来放到python安装目录下就好了。","categories":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/categories/selenium/"},{"name":"问题解决","slug":"selenium/问题解决","permalink":"https://zhaojiafu.github.io/categories/selenium/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zhaojiafu.github.io/tags/selenium/"},{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"爬取数据Unicode编码问题","slug":"bfbe645d7341b0c57425fee5ffce75f0","date":"2019-02-15T03:34:32.000Z","updated":"2019-12-02T07:00:37.020Z","comments":true,"path":"2019/02/15/bfbe645d7341b0c57425fee5ffce75f0/","link":"","permalink":"https://zhaojiafu.github.io/2019/02/15/bfbe645d7341b0c57425fee5ffce75f0/","excerpt":"","text":"数据是一个josn，需要josn序列化，在对Unicode编码进行utf-8编码后再utf-8解码后就正常了。 在这里插入图片描述 步骤： 一、josn序列号data = json.loads(response1.text) 二、找到问题数据text = data[&apos;data&apos;][0]三、编码，再解码即可print(text.encode(&quot;utf-8&quot;).decode(&apos;utf-8&apos;)) 在这里插入图片描述","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"OpenSSL.SSL.Error_ [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]","slug":"f7dae0b90dcb083ada046cf6ae5fc8e6","date":"2019-02-15T03:34:32.000Z","updated":"2019-12-02T07:26:18.615Z","comments":true,"path":"2019/02/15/f7dae0b90dcb083ada046cf6ae5fc8e6/","link":"","permalink":"https://zhaojiafu.github.io/2019/02/15/f7dae0b90dcb083ada046cf6ae5fc8e6/","excerpt":"","text":"# 爬重报错OpenSSL.SSL.Error: [(‘SSL routines’, ‘tls_process_server_certificate’, ‘certificate verify failed’)]，定位到是下面这一句出错， 在这里插入图片描述 下面是错误： 在这里插入图片描述 在这里插入图片描述 解决方法： 一、更换代理IP，这个是爬取网站的一个反爬，将代理IP，之前是http的IP，换成https的就可以爬去内容了。 在这里插入图片描述","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"window系统每天定时更新python安装包","slug":"a60dd79545592014d1c1380239f1396e","date":"2019-02-13T03:34:32.000Z","updated":"2019-12-02T07:00:37.326Z","comments":true,"path":"2019/02/13/a60dd79545592014d1c1380239f1396e/","link":"","permalink":"https://zhaojiafu.github.io/2019/02/13/a60dd79545592014d1c1380239f1396e/","excerpt":"","text":"# 1、安装更新包代码 import os ret = os.system(r&apos;pip list --outdated --format=freeze &gt;&gt; D:\\t.txt&apos;) with open(&apos;./t.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;) as file_pip: pip_list = file_pip.readlines() if pip_list: for pip_one in pip_list: pip_one = pip_one.strip() if pip_one != &quot;&quot;: module, v = pip_one.split(&quot;==&quot;) os.system(&apos;pip install --user --upgrade {}&apos;.format(module)) print(pip_one) os.remove(r&apos;D:\\t.txt&apos;)2、启动每天定时任务 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 这个是我的代码文件位置，一般不会动这个文件。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 点击确定就可以，这样每天早上9.20定时更新最新的python安装包了。","categories":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/categories/python%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"python模块","slug":"python模块","permalink":"https://zhaojiafu.github.io/tags/python%E6%A8%A1%E5%9D%97/"}]},{"title":"python you-get下载哔哩哔哩视频","slug":"c80a951a8598a7c0c9e0a2137a961502","date":"2019-02-12T03:34:32.000Z","updated":"2019-12-02T07:00:36.544Z","comments":true,"path":"2019/02/12/c80a951a8598a7c0c9e0a2137a961502/","link":"","permalink":"https://zhaojiafu.github.io/2019/02/12/c80a951a8598a7c0c9e0a2137a961502/","excerpt":"","text":"# 有时候需在哔哩哔哩找一些视频，所以用python爬取试试，在网上搜了一下。 1、安装you-get 模块pip install you-get2、查看帮助!{% image /imgs/20190212152358130.png '在这里插入图片描述' '' %} 3、cmd中命令下载列表下载： you-get -o E:\\003_video\\002bilibili\\TensorFlow https://www.bilibili.com/video/av14540765/?p=1 -l-o 后面是保存视频的目录，-l是指按列表下载，相当于–playlist。 4、py文件中代码下载。一、批量哔哩哔哩视频列表import sys from you_get import common as you_get #导入you-get库 directory = r&apos;E:\\003_video\\002bilibili\\003jiqixuexi&apos; #设置下载目录 url = &apos;https://www.bilibili.com/video/av9912938&apos; #需要下载的视频地址 sys.argv = [&apos;you-get&apos;,&apos;-l&apos;,&apos;-o&apos;,directory,url] #sys传递参数执行下载，就像在命令行一样；‘-l’是指按列表下载，如果下载单个视频，去掉‘-l’即可；‘-o’后面跟保存目录。 you_get.main()二、批量哔哩哔哩单个视频import sys from you_get import common as you_get #导入you-get库 directory = r&apos;E:\\003_video\\002bilibili\\003jiqixuexi&apos; #设置下载目录 url = &apos;https://www.bilibili.com/video/av9912938&apos; #需要下载的视频地址 sys.argv = [&apos;you-get&apos;,&apos;-o&apos;,directory,url] #sys传递参数执行下载，就像在命令行一样；‘-o’后面跟保存目录。 you_get.main()","categories":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhaojiafu.github.io/tags/python/"}]},{"title":"错误：SSL_ DECRYPTION_FAILED_OR_BAD_RECORD_MAC","slug":"c08e8c40081c647d4a7414ac9b533b6a","date":"2019-01-29T03:34:32.000Z","updated":"2019-12-02T07:00:37.116Z","comments":true,"path":"2019/01/29/c08e8c40081c647d4a7414ac9b533b6a/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/29/c08e8c40081c647d4a7414ac9b533b6a/","excerpt":"","text":"# 使用pytube爬取YouTube视频时出现了错误：SSL: DECRYPTION_FAILED_OR_BAD_RECORD_MAC 刚开始在网上找了好久，没有找到解决方法，就是突然看到一个评论者对另一个类似问题的回答，是否尝试升级的openssl安装包，于是，我就尝试把所有的安装包升级了，我用的Windows，于是网上找了一下Windows安装命令，一个一个感觉太麻烦，有十来个需要升级。 pip list --outdate # 这个是查看所有的可以升级的安装包命令 在这里插入图片描述 使用pip批量更新（Windows系统cmd中）查看可更新包： pip list --outdated --format=columns 批量下载并更新： pip install pip-review pip-review --local --interactive","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"python 使用gevent模块报MonkeyPatchWarning异常问题","slug":"fbb4c923306fd9047828096afa3c296e","date":"2019-01-25T03:34:32.000Z","updated":"2019-12-02T07:26:18.159Z","comments":true,"path":"2019/01/25/fbb4c923306fd9047828096afa3c296e/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/25/fbb4c923306fd9047828096afa3c296e/","excerpt":"","text":"# 使用协程爬虫monkey.patch_all()运行报异常： MonkeyPatchWarning: Monkey-patching ssl after ssl has already been imported may lead to errors{% image /imgs/20190125095509197.png '在这里插入图片描述' '' %} 这个上面图片是我报错时的导入模块顺序，将下面这三个放在最上面即可解决此问题。 import gevent from gevent import monkey monkey.patch_all()顺更改之后，异常警告没有了。 参考：https://blog.csdn.net/baidu_24536755/article/details/80712903","categories":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://zhaojiafu.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"window电脑C盘占用过大问题的几种解决方法","slug":"a64692d6bd06a5feec63df3647aec56e","date":"2019-01-24T03:34:32.000Z","updated":"2019-12-02T07:40:52.714Z","comments":true,"path":"2019/01/24/a64692d6bd06a5feec63df3647aec56e/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/24/a64692d6bd06a5feec63df3647aec56e/","excerpt":"","text":"C盘占用过大问题的俩种解决方法原因一、临时文件过大：windows的temp临时目录(temp文件过大问题)： windows解压缩包、安装软件时，会生成一些临时文件存放在temp目录中，windows不会自动删除这些文件,在工作机or个人PC机中中这个目录一般不会有什么问题，但是在server机器中，如果有服务进行大量的软件安装卸载或者解压缩包的操作，这个目录就会变得很大。 解决1： 每次手动删除这个temp： 我的在：C:\\Users\\用户名\\AppData\\Local\\Temp 注意AppData是隐藏文件夹。 解决2： 修改临时储存路径，放到其他盘。 在这里插入图片描述 原因二、（我自己用的pycharm软件缓存过大）：pycharm的缓存过大，安装pycharm的缓存也会慢慢变大，可以直接删除里面的缓存，也可以将缓存位置进行更改，再重启pycharm。解决1，直接删除大的缓存数据（你也就可以先移动到其他位置测试是否有影响，我测试过了）：找到C盘‪.PyCharmCE\\system\\caches\\content.dat.storageData文件，如果过大，删除后打开再打开pycharm。解决2，迁移储存位置1、将pycarm的安装目录打开，bin目录下idea文件，将四个默认的储存位置注销，找个其他盘固定位置存放。2、把原来的.PyCharmCE直接移动过来，删除缓存过大的数据。重启pycharm即可。 在这里插入图片描述 在这里插入图片描述 原因三、新增的其他博客方法：这个我试了他的关闭休眠，但是效果不大。 11：关闭休眠2以管理员身份运行C：\\windows\\system32\\cmd.exe--执行命令：powercfg -h off。休眠文件便不再存在。342：下载 https://github.com/lostindark/DriverStoreExplorer/releases/tag/v0.9.355删除旧驱动673：配置系统8win10在“设置--系统--存储--存储感知”中按钮打开，能够定期自行清除垃圾 910OK，C盘空间恢复了。11下一个软件：wicleanu12百度下载地址：http://rj.baidu.com/soft/detail/26316.html?ald1314另一个清除各种驱动的软件：1516DriverStore.Explorer.v0.71718运行Rapr.exe 选择一些不要的包 delete package就OK了。 方法四、删除window更新文件（这个一旦删除，无法还原，慎重考虑）我在win10在“设置–系统–存储–立即释放空间”可以把window之前的旧版本删除，因为我不需要还原，所以，我这里就不要了，根据自己的情况考虑（慎重考虑）。 在这里插入图片描述 在这里插入图片描述 在这里插入图片描述 然后我释放之后，电脑磁盘空间就多了几个G，但是要确保你不在恢复系统，确定之前的旧版本不需要再删除。==（慎重考虑，删除无法恢复）== 在这里插入图片描述 参考：https://www.cnblogs.com/tangmiao/p/10077525.htmlhttps://www.jb51.net/article/106779.htmhttps://www.jianshu.com/p/16e7752419e0?utm_campaignhttps://blog.csdn.net/xocom/article/details/79728372","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"提高效率小工具","slug":"提高效率小工具","permalink":"https://zhaojiafu.github.io/tags/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"删除Windows系统文件的2种方法","slug":"fa19538eb0eee7e922cf5d49d5fbd9d6","date":"2019-01-24T03:34:32.000Z","updated":"2019-12-02T07:26:18.051Z","comments":true,"path":"2019/01/24/fa19538eb0eee7e922cf5d49d5fbd9d6/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/24/fa19538eb0eee7e922cf5d49d5fbd9d6/","excerpt":"","text":"# 方法一：python 的os模块： import gevent from gevent import monkey monkey.patch_all() import os import time def remove_repetition(key): global path,num num += 1 print(key,num) # 获取已经存在的key os.chdir(path) # 去重 os.remove(key) if __name__ == &apos;__main__&apos;: # 已经保存的文件文件夹 start_time = time.time() path = r&apos;D:\\zjf_workspace\\001-地标、利器、服饰\\004文本\\baidu_isbn5\\新建文件夹\\txt&apos; # os.chdir(path) key_list = os.listdir(path) gevent_list = [] num = 0 for i in key_list: if num &gt;= 5000: gevent.joinall(gevent_list) print(&quot;准备删除gevents&quot;) gevent.killall(gevent_list) gevent_list = [] num = 0 gevent_key = gevent.spawn(remove_repetition,i) gevent_list.append(gevent_key) gevent.joinall(gevent_list) # remove_repetition(path=path) end_time = time.time() print(end_time-start_time,&quot;秒&quot;) 在这里插入图片描述 删除了57546个json文件，总共用时191秒，合301个文件每秒。（因为我的每个文件很小，所以多一点，但是也比Windows右击全选删除快，已经测试过了） 方法二（推荐，简单、高效）：将下面这俩句话放到Windows一个txt文档中，然后另存为一个.bat系统文件，将需要删除的文件或者文件夹拖到此.bat文件上即可。 DEL /F /A /Q \\?%1 RD /S /Q \\?%1 在这里插入图片描述 在这里插入图片描述 这个是我的做成的，参考网上的方法，因为我有个文件是0kb，一直删除掉，上网搜了这个方法，直接就删除了，把此文件留在电脑中备用。 在这里插入图片描述 87400个json小文件，用手机测试，用了202秒，合每秒430个，比第一个方法更快，可能是因为第一个方法需要借用python，以及相关模块原因吧，但是第一种比直接删除还快一点，所以建议用第二种方法。","categories":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhaojiafu.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"python对视频截帧的俩个方法","slug":"8f8f494d2b14b441d0c9adc487d0aac9","date":"2019-01-22T03:34:32.000Z","updated":"2019-12-02T06:45:49.795Z","comments":true,"path":"2019/01/22/8f8f494d2b14b441d0c9adc487d0aac9/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/22/8f8f494d2b14b441d0c9adc487d0aac9/","excerpt":"","text":"# python读取视频流提取视频帧的方法 注意事项(路径尽量全部英文，不然很可能会耽误很多时间) 安装环境： pip install imageio pip install skimage 这时候会报错： Please install the scikit-image package (instead of skimage)所以按照提示操作即可： pip install scikit-image环境安装成功。 {% image /imgs/2019012211141851.png '在这里插入图片描述' '' %} 2、cv2模块安装，刚开始看到别人写的import cv2 以为是需要安装pip install cv2(尴尬。。。结果是 pip install opencv-python) pip install opencv-python3、视频截帧代码 方法一：使用imageio库提取视频帧imageio官方文档地址：http://imageio.readthedocs.io/en/latest/examples.html # coding:utf-8 import imageio import pylab # 注释的代码执行一次就好，以后都会默认下载完成 # imageio.plugins.ffmpeg.download() # 视频的绝对路径 filename =r&apos;e:\\video\\159725149.mp4&apos; # 可以选择解码工具 # print(filename) # vid = imageio.get_reader(uri=filename, format=&apos;ffmpeg&apos;) vid = imageio.get_reader(filename ,&apos;ffmpeg&apos;) print(type(vid),len(vid)) try: # 这个地方需要加个异常处理，我也不知道什么原因，用imageio读取的视频总是最后俩帧是无法读取，用俩个视频测试都是如此，就加个异常，忽略最后俩帧就可以了。 for num, im in enumerate(vid): print(num) if (num % 101) == 0: imageio.imwrite(&apos;E:\\save_photo_from_video\\{}.jpg&apos;.format(num // 101), im) except imageio.core.format.CannotReadFrameError or RuntimeError: pass # for num, im in enumerate(vid): # print(num) # if (num % 101) == 0: # imageio.imwrite(&apos;E:\\save_photo_from_video\\{}.jpg&apos;.format(num // 101), im)方法二：需要安装opencv-python，也就是导入cv2模块。 &apos;&apos;&apos; pip install opencv-python&apos;&apos;&apos;用法： #!usr/bin/python import cv2 # 需要安装opencv-python &apos;&apos;&apos; pip install opencv-python&apos;&apos;&apos; # 读入视频文件 vc = cv2.VideoCapture(r&apos;D:\\zjf_workspace\\000爬虫代码-基础的\\scrapy_100_工具\\视频处理\\mp4\\55563878.mp4&apos;) c = 1 if vc.isOpened(): # 判断是否正常打开 real, frame = vc.read() # print(real) else: real = False timeF = 100 # 视频帧计数间隔频率 while real: real, frame = vc.read() # print(real, frame) if (c % timeF == 0): # 每隔timeF帧进行储存为图像，（注意保存地址必须全部为英文和数字，不能含有中文或者中文字符，我这个错误就是刚开始不知道是地址中文原因，找了好久。） cv2.imwrite(r&apos;E:\\save_photo_from_video&apos; + &apos;\\\\&apos; + str(c // timeF) + &apos;.jpg&apos;, frame) c += 1 cv2.waitKey(1) vc.release() 参考文章：https://blog.csdn.net/NFMSR/article/details/78559930https://blog.csdn.net/xinxing__8185/article/details/48440133","categories":[{"name":"python视频截帧","slug":"python视频截帧","permalink":"https://zhaojiafu.github.io/categories/python%E8%A7%86%E9%A2%91%E6%88%AA%E5%B8%A7/"}],"tags":[{"name":"python视频截帧","slug":"python视频截帧","permalink":"https://zhaojiafu.github.io/tags/python%E8%A7%86%E9%A2%91%E6%88%AA%E5%B8%A7/"}]},{"title":"scrapy-redis爬虫异常","slug":"a2ff09f7d5877efa8cc7bcff2de3da08","date":"2019-01-18T03:34:32.000Z","updated":"2019-12-02T07:00:36.798Z","comments":true,"path":"2019/01/18/a2ff09f7d5877efa8cc7bcff2de3da08/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/18/a2ff09f7d5877efa8cc7bcff2de3da08/","excerpt":"","text":"# 爬虫报错 redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value 在这里插入图片描述 这是报错内容，后来通过上网查询，原来是插入的key的类型错误，默认是string，改成list就好了，这是scrapy-redis内部规定是list类型。后面就能正常跑了。 在这里插入图片描述 在这里插入图片描述","categories":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/"},{"name":"scrapy","slug":"python爬虫/scrapy","permalink":"https://zhaojiafu.github.io/categories/python%E7%88%AC%E8%99%AB/scrapy/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"https://zhaojiafu.github.io/tags/python%E7%88%AC%E8%99%AB/"}]},{"title":"解决PyCharm 中查看文本文件大小被限制问题","slug":"b8abd342591ee59e5da654b826d20cba","date":"2019-01-18T03:34:32.000Z","updated":"2019-12-02T07:00:37.229Z","comments":true,"path":"2019/01/18/b8abd342591ee59e5da654b826d20cba/","link":"","permalink":"https://zhaojiafu.github.io/2019/01/18/b8abd342591ee59e5da654b826d20cba/","excerpt":"","text":"用PyCharm 打开较大文本的时候，出现提示“File size exceeds configured limit (2560000), code insight features not available”，是因为IDEA对能关联的文件大小做了限制，主要是为了保护内存，默认值为2500kb解决方法： 在这里插入图片描述 下面的idea.properties文件中添加一行idea.max.intellisense.filesize=99999然后关闭pycharm，重新在进来就好了。（记得把目前写的代码保存一下哈，以防万一数据丢失，可不能怪我哈O(∩_∩)O）","categories":[{"name":"pychram","slug":"pychram","permalink":"https://zhaojiafu.github.io/categories/pychram/"}],"tags":[{"name":"pychram","slug":"pychram","permalink":"https://zhaojiafu.github.io/tags/pychram/"}]}]}